
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000540  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126f  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2f  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00003334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000800  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dda  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00004ece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_1>
   8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_2>
   c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_10>
  2c:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
 */ 

#include "Sess28I2C/sess_INT.h"

int main(){
	source_code();
  7c:	0e 94 43 00 	call	0x86	; 0x86 <source_code>
	return 0;
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <source_code>:
 */ 

#include "Sess28I2C/sess_INT.h"

int source_code()
{
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	1f 92       	push	r1
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	I2C_init(SLAVE);
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 ed 01 	call	0x3da	; 0x3da <I2C_init>
	
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	82 e1       	ldi	r24, 0x12	; 18
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_setPinDir>
	
	u8 RecevedData;
	while (1)
	{
		I2C_SlaveReceiveByte(&RecevedData);
  9e:	ce 01       	movw	r24, r28
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <I2C_SlaveReceiveByte>
		if (RecevedData==1)
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	29 f4       	brne	.+10     	; 0xb6 <source_code+0x30>
		{
			DIO_setPinValue(DIO_PINC2,DIO_HIGH);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	82 e1       	ldi	r24, 0x12	; 18
  b0:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_setPinValue>
  b4:	f4 cf       	rjmp	.-24     	; 0x9e <source_code+0x18>
		}
		else if (RecevedData==0)
  b6:	81 11       	cpse	r24, r1
  b8:	f2 cf       	rjmp	.-28     	; 0x9e <source_code+0x18>
		{
			DIO_setPinValue(DIO_PINC2,DIO_LOW);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	82 e1       	ldi	r24, 0x12	; 18
  be:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_setPinValue>
  c2:	ed cf       	rjmp	.-38     	; 0x9e <source_code+0x18>

000000c4 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	00 f5       	brcc	.+64     	; 0x108 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
  c8:	61 11       	cpse	r22, r1
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
  cc:	4a b3       	in	r20, 0x1a	; 26
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_setPinDir+0x16>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_setPinDir+0x12>
  de:	cb 01       	movw	r24, r22
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_setPinDir+0x2a>
  ec:	75 c0       	rjmp	.+234    	; 0x1d8 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
  ee:	4a b3       	in	r20, 0x1a	; 26
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	b9 01       	movw	r22, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_setPinDir+0x38>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_setPinDir+0x34>
 100:	cb 01       	movw	r24, r22
 102:	84 2b       	or	r24, r20
 104:	8a bb       	out	0x1a, r24	; 26
 106:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 108:	98 ef       	ldi	r25, 0xF8	; 248
 10a:	98 0f       	add	r25, r24
 10c:	98 30       	cpi	r25, 0x08	; 8
 10e:	00 f5       	brcc	.+64     	; 0x150 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 110:	61 11       	cpse	r22, r1
 112:	0e c0       	rjmp	.+28     	; 0x130 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 114:	47 b3       	in	r20, 0x17	; 23
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	b9 01       	movw	r22, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_setPinDir+0x5e>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	9a 95       	dec	r25
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_setPinDir+0x5a>
 126:	cb 01       	movw	r24, r22
 128:	80 95       	com	r24
 12a:	84 23       	and	r24, r20
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 130:	61 30       	cpi	r22, 0x01	; 1
 132:	09 f0       	breq	.+2      	; 0x136 <DIO_setPinDir+0x72>
 134:	51 c0       	rjmp	.+162    	; 0x1d8 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 136:	47 b3       	in	r20, 0x17	; 23
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	b9 01       	movw	r22, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_setPinDir+0x80>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	9a 95       	dec	r25
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_setPinDir+0x7c>
 148:	cb 01       	movw	r24, r22
 14a:	84 2b       	or	r24, r20
 14c:	87 bb       	out	0x17, r24	; 23
 14e:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 150:	90 ef       	ldi	r25, 0xF0	; 240
 152:	98 0f       	add	r25, r24
 154:	98 30       	cpi	r25, 0x08	; 8
 156:	f8 f4       	brcc	.+62     	; 0x196 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 158:	61 11       	cpse	r22, r1
 15a:	0e c0       	rjmp	.+28     	; 0x178 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 15c:	44 b3       	in	r20, 0x14	; 20
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_setPinDir+0xa6>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	9a 95       	dec	r25
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_setPinDir+0xa2>
 16e:	cb 01       	movw	r24, r22
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	84 bb       	out	0x14, r24	; 20
 176:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 178:	61 30       	cpi	r22, 0x01	; 1
 17a:	71 f5       	brne	.+92     	; 0x1d8 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 17c:	44 b3       	in	r20, 0x14	; 20
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_setPinDir+0xc6>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	9a 95       	dec	r25
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_setPinDir+0xc2>
 18e:	cb 01       	movw	r24, r22
 190:	84 2b       	or	r24, r20
 192:	84 bb       	out	0x14, r24	; 20
 194:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 196:	88 51       	subi	r24, 0x18	; 24
 198:	88 30       	cpi	r24, 0x08	; 8
 19a:	f0 f4       	brcc	.+60     	; 0x1d8 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 19c:	61 11       	cpse	r22, r1
 19e:	0e c0       	rjmp	.+28     	; 0x1bc <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRD,pinNum);
 1a0:	41 b3       	in	r20, 0x11	; 17
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_setPinDir+0xea>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	8a 95       	dec	r24
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_setPinDir+0xe6>
 1b2:	cb 01       	movw	r24, r22
 1b4:	80 95       	com	r24
 1b6:	84 23       	and	r24, r20
 1b8:	81 bb       	out	0x11, r24	; 17
 1ba:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 1bc:	61 30       	cpi	r22, 0x01	; 1
 1be:	61 f4       	brne	.+24     	; 0x1d8 <DIO_setPinDir+0x114>
			SET_BIT(DDRD,pinNum);
 1c0:	41 b3       	in	r20, 0x11	; 17
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_setPinDir+0x10a>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_setPinDir+0x106>
 1d2:	cb 01       	movw	r24, r22
 1d4:	84 2b       	or	r24, r20
 1d6:	81 bb       	out	0x11, r24	; 17
 1d8:	08 95       	ret

000001da <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	00 f5       	brcc	.+64     	; 0x21e <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 1de:	61 11       	cpse	r22, r1
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 1e2:	4b b3       	in	r20, 0x1b	; 27
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinValue+0x16>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	8a 95       	dec	r24
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinValue+0x12>
 1f4:	cb 01       	movw	r24, r22
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 1fe:	61 30       	cpi	r22, 0x01	; 1
 200:	09 f0       	breq	.+2      	; 0x204 <DIO_setPinValue+0x2a>
 202:	75 c0       	rjmp	.+234    	; 0x2ee <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 204:	4b b3       	in	r20, 0x1b	; 27
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	b9 01       	movw	r22, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_setPinValue+0x38>
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	8a 95       	dec	r24
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_setPinValue+0x34>
 216:	cb 01       	movw	r24, r22
 218:	84 2b       	or	r24, r20
 21a:	8b bb       	out	0x1b, r24	; 27
 21c:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 21e:	98 ef       	ldi	r25, 0xF8	; 248
 220:	98 0f       	add	r25, r24
 222:	98 30       	cpi	r25, 0x08	; 8
 224:	00 f5       	brcc	.+64     	; 0x266 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 226:	61 11       	cpse	r22, r1
 228:	0e c0       	rjmp	.+28     	; 0x246 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 22a:	48 b3       	in	r20, 0x18	; 24
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0x5e>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	9a 95       	dec	r25
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0x5a>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	88 bb       	out	0x18, r24	; 24
 244:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	09 f0       	breq	.+2      	; 0x24c <DIO_setPinValue+0x72>
 24a:	51 c0       	rjmp	.+162    	; 0x2ee <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 24c:	48 b3       	in	r20, 0x18	; 24
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_setPinValue+0x80>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	9a 95       	dec	r25
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_setPinValue+0x7c>
 25e:	cb 01       	movw	r24, r22
 260:	84 2b       	or	r24, r20
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 266:	90 ef       	ldi	r25, 0xF0	; 240
 268:	98 0f       	add	r25, r24
 26a:	98 30       	cpi	r25, 0x08	; 8
 26c:	f8 f4       	brcc	.+62     	; 0x2ac <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 26e:	61 11       	cpse	r22, r1
 270:	0e c0       	rjmp	.+28     	; 0x28e <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 272:	45 b3       	in	r20, 0x15	; 21
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	b9 01       	movw	r22, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_setPinValue+0xa6>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	9a 95       	dec	r25
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_setPinValue+0xa2>
 284:	cb 01       	movw	r24, r22
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 28e:	61 30       	cpi	r22, 0x01	; 1
 290:	71 f5       	brne	.+92     	; 0x2ee <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 292:	45 b3       	in	r20, 0x15	; 21
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	b9 01       	movw	r22, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_setPinValue+0xc6>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	9a 95       	dec	r25
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_setPinValue+0xc2>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 2b       	or	r24, r20
 2a8:	85 bb       	out	0x15, r24	; 21
 2aa:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 2ac:	88 51       	subi	r24, 0x18	; 24
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	f0 f4       	brcc	.+60     	; 0x2ee <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 2b2:	61 11       	cpse	r22, r1
 2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 2b6:	42 b3       	in	r20, 0x12	; 18
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_setPinValue+0xea>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_setPinValue+0xe6>
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 95       	com	r24
 2cc:	84 23       	and	r24, r20
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 2d2:	61 30       	cpi	r22, 0x01	; 1
 2d4:	61 f4       	brne	.+24     	; 0x2ee <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 2d6:	42 b3       	in	r20, 0x12	; 18
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	b9 01       	movw	r22, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_setPinValue+0x10a>
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	8a 95       	dec	r24
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_setPinValue+0x106>
 2e8:	cb 01       	movw	r24, r22
 2ea:	84 2b       	or	r24, r20
 2ec:	82 bb       	out	0x12, r24	; 18
 2ee:	08 95       	ret

000002f0 <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
 312:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXT_int0Func>
 316:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXT_int0Func+0x1>
 31a:	09 95       	icall
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_2>:
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31
 360:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 364:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 368:	09 95       	icall
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	EXT_int2Func();
 3ae:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXT_int2Func>
 3b2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXT_int2Func+0x1>
 3b6:	09 95       	icall
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <I2C_init>:
	TWCR = (1<<TWINT)|(1<<TWEN);
	while (GET_BIT(TWCR,TWINT)==0);
	*byte = TWDR;
	
	//Send Stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	21 f0       	breq	.+8      	; 0x3e6 <I2C_init+0xc>
 3de:	81 11       	cpse	r24, r1
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <I2C_init+0xc>
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	82 b9       	out	0x02, r24	; 2
 3e6:	86 b7       	in	r24, 0x36	; 54
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	86 bf       	out	0x36, r24	; 54
 3ec:	88 e4       	ldi	r24, 0x48	; 72
 3ee:	80 b9       	out	0x00, r24	; 0
 3f0:	08 95       	ret

000003f2 <I2C_SlaveReceiveByte>:


void I2C_SlaveReceiveByte(u8* byte){
	
	//Read data
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWEA);
 3f2:	24 ec       	ldi	r18, 0xC4	; 196
 3f4:	26 bf       	out	0x36, r18	; 54
	while (GET_BIT(TWCR,TWINT)==0);
 3f6:	06 b6       	in	r0, 0x36	; 54
 3f8:	07 fe       	sbrs	r0, 7
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <I2C_SlaveReceiveByte+0x4>
	*byte = TWDR;
 3fc:	23 b1       	in	r18, 0x03	; 3
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	08 95       	ret

00000404 <__vector_11>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	2f 93       	push	r18
 410:	3f 93       	push	r19
 412:	4f 93       	push	r20
 414:	5f 93       	push	r21
 416:	6f 93       	push	r22
 418:	7f 93       	push	r23
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
 426:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TIMER0_OvFunc>
 42a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TIMER0_OvFunc+0x1>
 42e:	09 95       	icall
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	2f 93       	push	r18
 45e:	3f 93       	push	r19
 460:	4f 93       	push	r20
 462:	5f 93       	push	r21
 464:	6f 93       	push	r22
 466:	7f 93       	push	r23
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
	TIMER0_CTCFunc();
 474:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER0_CTCFunc>
 478:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER0_CTCFunc+0x1>
 47c:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__vector_6>:
}

//Vector Table Function that belongs to TIMER1
//number(in vector table) - 1
void __vector_6() __attribute__((signal));
void __vector_6(){
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	TIMER1_IcuFunc();
 4c2:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TIMER1_IcuFunc>
 4c6:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TIMER1_IcuFunc+0x1>
 4ca:	09 95       	icall
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	7f 91       	pop	r23
 4da:	6f 91       	pop	r22
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	3f 91       	pop	r19
 4e2:	2f 91       	pop	r18
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <__vector_13>:
}

//Vector Table Function that belongs to UART_INT
//number(in vector table) - 1
void __vector_13() __attribute__((signal));
void __vector_13(){
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	2f 93       	push	r18
 4fa:	3f 93       	push	r19
 4fc:	4f 93       	push	r20
 4fe:	5f 93       	push	r21
 500:	6f 93       	push	r22
 502:	7f 93       	push	r23
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	af 93       	push	r26
 50a:	bf 93       	push	r27
 50c:	ef 93       	push	r30
 50e:	ff 93       	push	r31
	UART_INTFunc();
 510:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <UART_INTFunc>
 514:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <UART_INTFunc+0x1>
 518:	09 95       	icall
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	bf 91       	pop	r27
 520:	af 91       	pop	r26
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	7f 91       	pop	r23
 528:	6f 91       	pop	r22
 52a:	5f 91       	pop	r21
 52c:	4f 91       	pop	r20
 52e:	3f 91       	pop	r19
 530:	2f 91       	pop	r18
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
