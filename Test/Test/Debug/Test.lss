
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001598  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083d  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e7  00000000  00000000  00002665  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  0000304c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f5  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009e8  00000000  00000000  0000374d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004135  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "KPD_INT.h"
#include "LCD_INT.h"

int main(void)
{
	LCD_init();
  6c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_init>
	KPD_INIT();
  70:	0e 94 45 00 	call	0x8a	; 0x8a <KPD_INIT>
	u8 state;
    /* Replace with your application code */
    while (1) 
    {
		state = KPD_read();
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <KPD_read>
		if (state!=KPD_UNPRESSED)
  78:	88 37       	cpi	r24, 0x78	; 120
  7a:	e1 f3       	breq	.-8      	; 0x74 <main+0x8>
		{
			LCD_sendData(state);
  7c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_sendData>
			while(KPD_read()!=KPD_UNPRESSED);
  80:	0e 94 72 00 	call	0xe4	; 0xe4 <KPD_read>
  84:	88 37       	cpi	r24, 0x78	; 120
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	f5 cf       	rjmp	.-22     	; 0x74 <main+0x8>

0000008a <KPD_INIT>:

//Functions

void KPD_INIT(){
	//Set Columns to be output
	DIO_setPinDir(KPD_COL0,DIO_OUTPUT);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	83 e1       	ldi	r24, 0x13	; 19
  8e:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(KPD_COL1,DIO_OUTPUT);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	84 e1       	ldi	r24, 0x14	; 20
  96:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(KPD_COL2,DIO_OUTPUT);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	85 e1       	ldi	r24, 0x15	; 21
  9e:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(KPD_COL3,DIO_OUTPUT);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	86 e1       	ldi	r24, 0x16	; 22
  a6:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	
	//Set Rows to be input and pull-up
	DIO_setPinDir(KPD_ROW0,DIO_INPUT);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW1,DIO_INPUT);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW2,DIO_INPUT);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW3,DIO_INPUT);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	
	DIO_setPullUp(KPD_ROW0);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW1);
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW2);
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW3);
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_setPullUp>
  e2:	08 95       	ret

000000e4 <KPD_read>:
}

u8 KPD_read(){
	DIO_setPinValue(KPD_COL0, DIO_LOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e1       	ldi	r24, 0x13	; 19
  e8:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	84 e1       	ldi	r24, 0x14	; 20
  f0:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	85 e1       	ldi	r24, 0x15	; 21
  f8:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	86 e1       	ldi	r24, 0x16	; 22
 100:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 10a:	88 23       	and	r24, r24
 10c:	09 f4       	brne	.+2      	; 0x110 <KPD_read+0x2c>
 10e:	87 c0       	rjmp	.+270    	; 0x21e <KPD_read+0x13a>
	{
		return KPD_ROW0_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 116:	88 23       	and	r24, r24
 118:	09 f4       	brne	.+2      	; 0x11c <KPD_read+0x38>
 11a:	83 c0       	rjmp	.+262    	; 0x222 <KPD_read+0x13e>
	{
		return KPD_ROW1_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 11c:	8e e0       	ldi	r24, 0x0E	; 14
 11e:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 122:	88 23       	and	r24, r24
 124:	09 f4       	brne	.+2      	; 0x128 <KPD_read+0x44>
 126:	7f c0       	rjmp	.+254    	; 0x226 <KPD_read+0x142>
	{
		return KPD_ROW2_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 12e:	88 23       	and	r24, r24
 130:	09 f4       	brne	.+2      	; 0x134 <KPD_read+0x50>
 132:	7b c0       	rjmp	.+246    	; 0x22a <KPD_read+0x146>
	{
		return KPD_ROW3_COL0;
	}
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	83 e1       	ldi	r24, 0x13	; 19
 138:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_LOW);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	84 e1       	ldi	r24, 0x14	; 20
 140:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	85 e1       	ldi	r24, 0x15	; 21
 148:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	86 e1       	ldi	r24, 0x16	; 22
 150:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 15a:	88 23       	and	r24, r24
 15c:	09 f4       	brne	.+2      	; 0x160 <KPD_read+0x7c>
 15e:	67 c0       	rjmp	.+206    	; 0x22e <KPD_read+0x14a>
	{
		return KPD_ROW0_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 166:	88 23       	and	r24, r24
 168:	09 f4       	brne	.+2      	; 0x16c <KPD_read+0x88>
 16a:	63 c0       	rjmp	.+198    	; 0x232 <KPD_read+0x14e>
	{
		return KPD_ROW1_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 16c:	8e e0       	ldi	r24, 0x0E	; 14
 16e:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 172:	88 23       	and	r24, r24
 174:	09 f4       	brne	.+2      	; 0x178 <KPD_read+0x94>
 176:	5f c0       	rjmp	.+190    	; 0x236 <KPD_read+0x152>
	{
		return KPD_ROW2_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 17e:	88 23       	and	r24, r24
 180:	09 f4       	brne	.+2      	; 0x184 <KPD_read+0xa0>
 182:	5b c0       	rjmp	.+182    	; 0x23a <KPD_read+0x156>
	{
		return KPD_ROW3_COL1;
	}
	
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	83 e1       	ldi	r24, 0x13	; 19
 188:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_LOW);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	85 e1       	ldi	r24, 0x15	; 21
 198:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	86 e1       	ldi	r24, 0x16	; 22
 1a0:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 1aa:	88 23       	and	r24, r24
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <KPD_read+0xcc>
 1ae:	47 c0       	rjmp	.+142    	; 0x23e <KPD_read+0x15a>
	{
		return KPD_ROW0_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 1b6:	88 23       	and	r24, r24
 1b8:	09 f4       	brne	.+2      	; 0x1bc <KPD_read+0xd8>
 1ba:	43 c0       	rjmp	.+134    	; 0x242 <KPD_read+0x15e>
	{
		return KPD_ROW1_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 1bc:	8e e0       	ldi	r24, 0x0E	; 14
 1be:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 1c2:	88 23       	and	r24, r24
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <KPD_read+0xe4>
 1c6:	3f c0       	rjmp	.+126    	; 0x246 <KPD_read+0x162>
	{
		return KPD_ROW2_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 1ce:	88 23       	and	r24, r24
 1d0:	e1 f1       	breq	.+120    	; 0x24a <KPD_read+0x166>
	{
		return KPD_ROW3_COL2;
	}
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	83 e1       	ldi	r24, 0x13	; 19
 1d6:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	84 e1       	ldi	r24, 0x14	; 20
 1de:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	85 e1       	ldi	r24, 0x15	; 21
 1e6:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_LOW);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	86 e1       	ldi	r24, 0x16	; 22
 1ee:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 1f8:	88 23       	and	r24, r24
 1fa:	49 f1       	breq	.+82     	; 0x24e <KPD_read+0x16a>
	{
		return KPD_ROW0_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 1fc:	8d e0       	ldi	r24, 0x0D	; 13
 1fe:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 202:	88 23       	and	r24, r24
 204:	31 f1       	breq	.+76     	; 0x252 <KPD_read+0x16e>
	{
		return KPD_ROW1_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 20c:	88 23       	and	r24, r24
 20e:	19 f1       	breq	.+70     	; 0x256 <KPD_read+0x172>
	{
		return KPD_ROW2_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 210:	8f e0       	ldi	r24, 0x0F	; 15
 212:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_readPinValue>
 216:	81 11       	cpse	r24, r1
 218:	20 c0       	rjmp	.+64     	; 0x25a <KPD_read+0x176>
	{
		return KPD_ROW3_COL3;
 21a:	8b e2       	ldi	r24, 0x2B	; 43
 21c:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL0;
 21e:	87 e3       	ldi	r24, 0x37	; 55
 220:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL0;
 222:	84 e3       	ldi	r24, 0x34	; 52
 224:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL0;
 226:	81 e3       	ldi	r24, 0x31	; 49
 228:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL0;
 22a:	83 e6       	ldi	r24, 0x63	; 99
 22c:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL1;
 22e:	88 e3       	ldi	r24, 0x38	; 56
 230:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL1;
 232:	85 e3       	ldi	r24, 0x35	; 53
 234:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL1;
 236:	82 e3       	ldi	r24, 0x32	; 50
 238:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL1;
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_LOW);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL2;
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL2;
 242:	86 e3       	ldi	r24, 0x36	; 54
 244:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL2;
 246:	83 e3       	ldi	r24, 0x33	; 51
 248:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL2;
 24a:	8d e3       	ldi	r24, 0x3D	; 61
 24c:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_LOW);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL3;
 24e:	8f e2       	ldi	r24, 0x2F	; 47
 250:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL3;
 252:	8a e2       	ldi	r24, 0x2A	; 42
 254:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL3;
 256:	8d e2       	ldi	r24, 0x2D	; 45
 258:	08 95       	ret
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL3;
	}
	
	return KPD_UNPRESSED;
 25a:	88 e7       	ldi	r24, 0x78	; 120
}
 25c:	08 95       	ret

0000025e <LCD_Instruction>:
}

void LCD_Instruction(u8 type){

	//Set registers to send data
	if (type=='D')
 25e:	84 34       	cpi	r24, 0x44	; 68
 260:	49 f4       	brne	.+18     	; 0x274 <LCD_Instruction+0x16>
	{
		DIO_setPinValue(LCD_RW,DIO_LOW);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	8a e0       	ldi	r24, 0x0A	; 10
 266:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
		DIO_setPinValue(LCD_RS,DIO_HIGH);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	89 e0       	ldi	r24, 0x09	; 9
 26e:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
 272:	08 95       	ret
	}
	
	//Set registers to send command
	else if (type=='C')
 274:	83 34       	cpi	r24, 0x43	; 67
 276:	41 f4       	brne	.+16     	; 0x288 <LCD_Instruction+0x2a>
	{
		DIO_setPinValue(LCD_RW,DIO_LOW);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	8a e0       	ldi	r24, 0x0A	; 10
 27c:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
		DIO_setPinValue(LCD_RS,DIO_LOW);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
 288:	08 95       	ret

0000028a <LCD_pulse>:
	LCD_sendCmd(0b00000001);
}


void LCD_pulse(){
	DIO_setPinValue(LCD_E,DIO_HIGH);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	8b e0       	ldi	r24, 0x0B	; 11
 28e:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	8f e9       	ldi	r24, 0x9F	; 159
 294:	9f e0       	ldi	r25, 0x0F	; 15
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_pulse+0xc>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_pulse+0x12>
 29c:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E,DIO_LOW);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	8b e0       	ldi	r24, 0x0B	; 11
 2a2:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
 2a6:	08 95       	ret

000002a8 <LCD_sendData>:
		DIO_setPinValue(LCD_RW,DIO_LOW);
		DIO_setPinValue(LCD_RS,DIO_LOW);
	}
}

void LCD_sendData(u8 data){
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
	
	LCD_Instruction('D');
 2ac:	84 e4       	ldi	r24, 0x44	; 68
 2ae:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Instruction>
	
	//DIO_setPinValue(LCD_RW,DIO_LOW);
	//DIO_setPinValue(LCD_RS,DIO_HIGH);
	
	//High bits
	DIO_setPinValue(LCD_D4,GET_BIT(data,4));
 2b2:	c4 fb       	bst	r28, 4
 2b4:	66 27       	eor	r22, r22
 2b6:	60 f9       	bld	r22, 0
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(data,5));
 2be:	c5 fb       	bst	r28, 5
 2c0:	66 27       	eor	r22, r22
 2c2:	60 f9       	bld	r22, 0
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(data,6));
 2ca:	c6 fb       	bst	r28, 6
 2cc:	66 27       	eor	r22, r22
 2ce:	60 f9       	bld	r22, 0
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(data,7));
 2d6:	6c 2f       	mov	r22, r28
 2d8:	66 1f       	adc	r22, r22
 2da:	66 27       	eor	r22, r22
 2dc:	66 1f       	adc	r22, r22
 2de:	87 e0       	ldi	r24, 0x07	; 7
 2e0:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	LCD_pulse();
 2e4:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_pulse>
	
	//Low bits
	DIO_setPinValue(LCD_D4,GET_BIT(data,0));
 2e8:	6c 2f       	mov	r22, r28
 2ea:	61 70       	andi	r22, 0x01	; 1
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(data,1));
 2f2:	c1 fb       	bst	r28, 1
 2f4:	66 27       	eor	r22, r22
 2f6:	60 f9       	bld	r22, 0
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(data,2));
 2fe:	c2 fb       	bst	r28, 2
 300:	66 27       	eor	r22, r22
 302:	60 f9       	bld	r22, 0
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(data,3));
 30a:	c3 fb       	bst	r28, 3
 30c:	66 27       	eor	r22, r22
 30e:	60 f9       	bld	r22, 0
 310:	87 e0       	ldi	r24, 0x07	; 7
 312:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	LCD_pulse();
 316:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_pulse>
	
}
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <LCD_sendCmd>:

void LCD_sendCmd(u8 cmd){
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
	
	LCD_Instruction('C');
 322:	83 e4       	ldi	r24, 0x43	; 67
 324:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Instruction>
	
	//High bits
	DIO_setPinValue(LCD_D4,GET_BIT(cmd,4));
 328:	c4 fb       	bst	r28, 4
 32a:	66 27       	eor	r22, r22
 32c:	60 f9       	bld	r22, 0
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(cmd,5));
 334:	c5 fb       	bst	r28, 5
 336:	66 27       	eor	r22, r22
 338:	60 f9       	bld	r22, 0
 33a:	85 e0       	ldi	r24, 0x05	; 5
 33c:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(cmd,6));
 340:	c6 fb       	bst	r28, 6
 342:	66 27       	eor	r22, r22
 344:	60 f9       	bld	r22, 0
 346:	86 e0       	ldi	r24, 0x06	; 6
 348:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(cmd,7));
 34c:	6c 2f       	mov	r22, r28
 34e:	66 1f       	adc	r22, r22
 350:	66 27       	eor	r22, r22
 352:	66 1f       	adc	r22, r22
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	LCD_pulse();
 35a:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_pulse>
	
	//Low bits
	DIO_setPinValue(LCD_D4,GET_BIT(cmd,0));
 35e:	6c 2f       	mov	r22, r28
 360:	61 70       	andi	r22, 0x01	; 1
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(cmd,1));
 368:	c1 fb       	bst	r28, 1
 36a:	66 27       	eor	r22, r22
 36c:	60 f9       	bld	r22, 0
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(cmd,2));
 374:	c2 fb       	bst	r28, 2
 376:	66 27       	eor	r22, r22
 378:	60 f9       	bld	r22, 0
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(cmd,3));
 380:	c3 fb       	bst	r28, 3
 382:	66 27       	eor	r22, r22
 384:	60 f9       	bld	r22, 0
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
	
	LCD_pulse();
 38c:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_pulse>
}
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <LCD_init>:
 */ 

#include "LCD_INT.h"

void LCD_init(){
	DIO_setPinDir(LCD_D4,DIO_OUTPUT);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(LCD_D5,DIO_OUTPUT);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	85 e0       	ldi	r24, 0x05	; 5
 3a0:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(LCD_D6,DIO_OUTPUT);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(LCD_D7,DIO_OUTPUT);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	87 e0       	ldi	r24, 0x07	; 7
 3b0:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	
	DIO_setPinDir(LCD_E,DIO_OUTPUT);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	8b e0       	ldi	r24, 0x0B	; 11
 3b8:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(LCD_RW,DIO_OUTPUT);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	8a e0       	ldi	r24, 0x0A	; 10
 3c0:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	DIO_setPinDir(LCD_RS,DIO_OUTPUT);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	89 e0       	ldi	r24, 0x09	; 9
 3c8:	0e 94 11 02 	call	0x422	; 0x422 <DIO_setPinDir>
	
	LCD_sendCmd(0b00000010);
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_sendCmd>
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	86 e7       	ldi	r24, 0x76	; 118
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <LCD_init+0x44>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_init+0x4e>
 3e2:	00 00       	nop
	_delay_ms(30);
	LCD_sendCmd(0b00101000);
 3e4:	88 e2       	ldi	r24, 0x28	; 40
 3e6:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_sendCmd>
 3ea:	8f e9       	ldi	r24, 0x9F	; 159
 3ec:	9f e0       	ldi	r25, 0x0F	; 15
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_init+0x5a>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_init+0x60>
 3f4:	00 00       	nop
	
	_delay_ms(1);
	LCD_sendCmd(0b00001111);
 3f6:	8f e0       	ldi	r24, 0x0F	; 15
 3f8:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_sendCmd>
 3fc:	8f e9       	ldi	r24, 0x9F	; 159
 3fe:	9f e0       	ldi	r25, 0x0F	; 15
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	
	_delay_ms(1);
	LCD_sendCmd(0b000000001);
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_sendCmd>
 40e:	8f e3       	ldi	r24, 0x3F	; 63
 410:	9f e1       	ldi	r25, 0x1F	; 31
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	
	_delay_ms(2);
	LCD_sendCmd(0b00000110);
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_sendCmd>
 420:	08 95       	ret

00000422 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 422:	88 30       	cpi	r24, 0x08	; 8
 424:	00 f5       	brcc	.+64     	; 0x466 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 426:	61 11       	cpse	r22, r1
 428:	0e c0       	rjmp	.+28     	; 0x446 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 42a:	4a b3       	in	r20, 0x1a	; 26
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	b9 01       	movw	r22, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_setPinDir+0x16>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	8a 95       	dec	r24
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_setPinDir+0x12>
 43c:	cb 01       	movw	r24, r22
 43e:	80 95       	com	r24
 440:	84 23       	and	r24, r20
 442:	8a bb       	out	0x1a, r24	; 26
 444:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 446:	61 30       	cpi	r22, 0x01	; 1
 448:	09 f0       	breq	.+2      	; 0x44c <DIO_setPinDir+0x2a>
 44a:	75 c0       	rjmp	.+234    	; 0x536 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
 44c:	4a b3       	in	r20, 0x1a	; 26
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_setPinDir+0x38>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_setPinDir+0x34>
 45e:	cb 01       	movw	r24, r22
 460:	84 2b       	or	r24, r20
 462:	8a bb       	out	0x1a, r24	; 26
 464:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 466:	98 ef       	ldi	r25, 0xF8	; 248
 468:	98 0f       	add	r25, r24
 46a:	98 30       	cpi	r25, 0x08	; 8
 46c:	00 f5       	brcc	.+64     	; 0x4ae <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 46e:	61 11       	cpse	r22, r1
 470:	0e c0       	rjmp	.+28     	; 0x48e <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 472:	47 b3       	in	r20, 0x17	; 23
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	b9 01       	movw	r22, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_setPinDir+0x5e>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	9a 95       	dec	r25
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_setPinDir+0x5a>
 484:	cb 01       	movw	r24, r22
 486:	80 95       	com	r24
 488:	84 23       	and	r24, r20
 48a:	87 bb       	out	0x17, r24	; 23
 48c:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 48e:	61 30       	cpi	r22, 0x01	; 1
 490:	09 f0       	breq	.+2      	; 0x494 <DIO_setPinDir+0x72>
 492:	51 c0       	rjmp	.+162    	; 0x536 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 494:	47 b3       	in	r20, 0x17	; 23
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_setPinDir+0x80>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	9a 95       	dec	r25
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_setPinDir+0x7c>
 4a6:	cb 01       	movw	r24, r22
 4a8:	84 2b       	or	r24, r20
 4aa:	87 bb       	out	0x17, r24	; 23
 4ac:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 4ae:	90 ef       	ldi	r25, 0xF0	; 240
 4b0:	98 0f       	add	r25, r24
 4b2:	98 30       	cpi	r25, 0x08	; 8
 4b4:	f8 f4       	brcc	.+62     	; 0x4f4 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 4b6:	61 11       	cpse	r22, r1
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 4ba:	44 b3       	in	r20, 0x14	; 20
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	b9 01       	movw	r22, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_setPinDir+0xa6>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	9a 95       	dec	r25
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_setPinDir+0xa2>
 4cc:	cb 01       	movw	r24, r22
 4ce:	80 95       	com	r24
 4d0:	84 23       	and	r24, r20
 4d2:	84 bb       	out	0x14, r24	; 20
 4d4:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 4d6:	61 30       	cpi	r22, 0x01	; 1
 4d8:	71 f5       	brne	.+92     	; 0x536 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 4da:	44 b3       	in	r20, 0x14	; 20
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_setPinDir+0xc6>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	9a 95       	dec	r25
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_setPinDir+0xc2>
 4ec:	cb 01       	movw	r24, r22
 4ee:	84 2b       	or	r24, r20
 4f0:	84 bb       	out	0x14, r24	; 20
 4f2:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 4f4:	88 51       	subi	r24, 0x18	; 24
 4f6:	88 30       	cpi	r24, 0x08	; 8
 4f8:	f0 f4       	brcc	.+60     	; 0x536 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 4fa:	61 11       	cpse	r22, r1
 4fc:	0e c0       	rjmp	.+28     	; 0x51a <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 4fe:	44 b3       	in	r20, 0x14	; 20
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	b9 01       	movw	r22, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_setPinDir+0xea>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	8a 95       	dec	r24
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_setPinDir+0xe6>
 510:	cb 01       	movw	r24, r22
 512:	80 95       	com	r24
 514:	84 23       	and	r24, r20
 516:	84 bb       	out	0x14, r24	; 20
 518:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 51a:	61 30       	cpi	r22, 0x01	; 1
 51c:	61 f4       	brne	.+24     	; 0x536 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 51e:	44 b3       	in	r20, 0x14	; 20
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_setPinDir+0x10a>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	8a 95       	dec	r24
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_setPinDir+0x106>
 530:	cb 01       	movw	r24, r22
 532:	84 2b       	or	r24, r20
 534:	84 bb       	out	0x14, r24	; 20
 536:	08 95       	ret

00000538 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 538:	88 30       	cpi	r24, 0x08	; 8
 53a:	00 f5       	brcc	.+64     	; 0x57c <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 53c:	61 11       	cpse	r22, r1
 53e:	0e c0       	rjmp	.+28     	; 0x55c <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 540:	4b b3       	in	r20, 0x1b	; 27
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	b9 01       	movw	r22, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_setPinValue+0x16>
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	8a 95       	dec	r24
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_setPinValue+0x12>
 552:	cb 01       	movw	r24, r22
 554:	80 95       	com	r24
 556:	84 23       	and	r24, r20
 558:	8b bb       	out	0x1b, r24	; 27
 55a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 55c:	61 30       	cpi	r22, 0x01	; 1
 55e:	09 f0       	breq	.+2      	; 0x562 <DIO_setPinValue+0x2a>
 560:	75 c0       	rjmp	.+234    	; 0x64c <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 562:	4b b3       	in	r20, 0x1b	; 27
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_setPinValue+0x38>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_setPinValue+0x34>
 574:	cb 01       	movw	r24, r22
 576:	84 2b       	or	r24, r20
 578:	8b bb       	out	0x1b, r24	; 27
 57a:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 57c:	98 ef       	ldi	r25, 0xF8	; 248
 57e:	98 0f       	add	r25, r24
 580:	98 30       	cpi	r25, 0x08	; 8
 582:	00 f5       	brcc	.+64     	; 0x5c4 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 584:	61 11       	cpse	r22, r1
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 588:	48 b3       	in	r20, 0x18	; 24
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_setPinValue+0x5e>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	9a 95       	dec	r25
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_setPinValue+0x5a>
 59a:	cb 01       	movw	r24, r22
 59c:	80 95       	com	r24
 59e:	84 23       	and	r24, r20
 5a0:	88 bb       	out	0x18, r24	; 24
 5a2:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 5a4:	61 30       	cpi	r22, 0x01	; 1
 5a6:	09 f0       	breq	.+2      	; 0x5aa <DIO_setPinValue+0x72>
 5a8:	51 c0       	rjmp	.+162    	; 0x64c <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 5aa:	48 b3       	in	r20, 0x18	; 24
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_setPinValue+0x80>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	9a 95       	dec	r25
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_setPinValue+0x7c>
 5bc:	cb 01       	movw	r24, r22
 5be:	84 2b       	or	r24, r20
 5c0:	88 bb       	out	0x18, r24	; 24
 5c2:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 5c4:	90 ef       	ldi	r25, 0xF0	; 240
 5c6:	98 0f       	add	r25, r24
 5c8:	98 30       	cpi	r25, 0x08	; 8
 5ca:	f8 f4       	brcc	.+62     	; 0x60a <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 5cc:	61 11       	cpse	r22, r1
 5ce:	0e c0       	rjmp	.+28     	; 0x5ec <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 5d0:	45 b3       	in	r20, 0x15	; 21
 5d2:	21 e0       	ldi	r18, 0x01	; 1
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	b9 01       	movw	r22, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_setPinValue+0xa6>
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	9a 95       	dec	r25
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_setPinValue+0xa2>
 5e2:	cb 01       	movw	r24, r22
 5e4:	80 95       	com	r24
 5e6:	84 23       	and	r24, r20
 5e8:	85 bb       	out	0x15, r24	; 21
 5ea:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 5ec:	61 30       	cpi	r22, 0x01	; 1
 5ee:	71 f5       	brne	.+92     	; 0x64c <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 5f0:	45 b3       	in	r20, 0x15	; 21
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	b9 01       	movw	r22, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_setPinValue+0xc6>
 5fa:	66 0f       	add	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	9a 95       	dec	r25
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_setPinValue+0xc2>
 602:	cb 01       	movw	r24, r22
 604:	84 2b       	or	r24, r20
 606:	85 bb       	out	0x15, r24	; 21
 608:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 60a:	88 51       	subi	r24, 0x18	; 24
 60c:	88 30       	cpi	r24, 0x08	; 8
 60e:	f0 f4       	brcc	.+60     	; 0x64c <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 610:	61 11       	cpse	r22, r1
 612:	0e c0       	rjmp	.+28     	; 0x630 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 614:	42 b3       	in	r20, 0x12	; 18
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	b9 01       	movw	r22, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_setPinValue+0xea>
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	8a 95       	dec	r24
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_setPinValue+0xe6>
 626:	cb 01       	movw	r24, r22
 628:	80 95       	com	r24
 62a:	84 23       	and	r24, r20
 62c:	82 bb       	out	0x12, r24	; 18
 62e:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 630:	61 30       	cpi	r22, 0x01	; 1
 632:	61 f4       	brne	.+24     	; 0x64c <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 634:	42 b3       	in	r20, 0x12	; 18
 636:	21 e0       	ldi	r18, 0x01	; 1
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	b9 01       	movw	r22, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_setPinValue+0x10a>
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	8a 95       	dec	r24
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_setPinValue+0x106>
 646:	cb 01       	movw	r24, r22
 648:	84 2b       	or	r24, r20
 64a:	82 bb       	out	0x12, r24	; 18
 64c:	08 95       	ret

0000064e <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 64e:	88 30       	cpi	r24, 0x08	; 8
 650:	58 f4       	brcc	.+22     	; 0x668 <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
 652:	29 b3       	in	r18, 0x19	; 25
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	a9 01       	movw	r20, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_readPinValue+0x10>
 65a:	55 95       	asr	r21
 65c:	47 95       	ror	r20
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_readPinValue+0xc>
 662:	ca 01       	movw	r24, r20
 664:	81 70       	andi	r24, 0x01	; 1
 666:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 668:	28 ef       	ldi	r18, 0xF8	; 248
 66a:	28 0f       	add	r18, r24
 66c:	28 30       	cpi	r18, 0x08	; 8
 66e:	48 f4       	brcc	.+18     	; 0x682 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 670:	86 b3       	in	r24, 0x16	; 22
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_readPinValue+0x2c>
 676:	95 95       	asr	r25
 678:	87 95       	ror	r24
 67a:	2a 95       	dec	r18
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_readPinValue+0x28>
 67e:	81 70       	andi	r24, 0x01	; 1
 680:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 682:	20 ef       	ldi	r18, 0xF0	; 240
 684:	28 0f       	add	r18, r24
 686:	28 30       	cpi	r18, 0x08	; 8
 688:	48 f4       	brcc	.+18     	; 0x69c <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 68a:	83 b3       	in	r24, 0x13	; 19
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_readPinValue+0x46>
 690:	95 95       	asr	r25
 692:	87 95       	ror	r24
 694:	2a 95       	dec	r18
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_readPinValue+0x42>
 698:	81 70       	andi	r24, 0x01	; 1
 69a:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 69c:	28 ee       	ldi	r18, 0xE8	; 232
 69e:	28 0f       	add	r18, r24
 6a0:	28 30       	cpi	r18, 0x08	; 8
 6a2:	50 f4       	brcc	.+20     	; 0x6b8 <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 6a4:	90 b3       	in	r25, 0x10	; 16
 6a6:	89 2f       	mov	r24, r25
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_readPinValue+0x62>
 6ac:	95 95       	asr	r25
 6ae:	87 95       	ror	r24
 6b0:	2a 95       	dec	r18
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_readPinValue+0x5e>
 6b4:	81 70       	andi	r24, 0x01	; 1
 6b6:	08 95       	ret
	}
}
 6b8:	08 95       	ret

000006ba <DIO_setPullUp>:

void DIO_setPullUp(u8 pinNum){
	DIO_setPinValue(pinNum,DIO_HIGH);
 6ba:	61 e0       	ldi	r22, 0x01	; 1
 6bc:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_setPinValue>
 6c0:	08 95       	ret

000006c2 <_exit>:
 6c2:	f8 94       	cli

000006c4 <__stop_program>:
 6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <__stop_program>
