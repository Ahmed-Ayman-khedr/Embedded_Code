
Nasr75Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4a  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ea  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ac  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089c  00000000  00000000  000033e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003c7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_10>
  2c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "SPI_INT.h"

int main(void)
{
	//init SPI and select master/slave
	SPI_init(SPI_MASTER);
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	0e 94 a5 01 	call	0x34a	; 0x34a <SPI_init>
	
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	82 e1       	ldi	r24, 0x12	; 18
  86:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
	
	while (1)
	{	
		//B4 -> LOW
		DIO_setPinValue(DIO_PINB4,DIO_LOW);
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	8c e0       	ldi	r24, 0x0C	; 12
  8e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_setPinValue>
		//send data
		u8 rData = SPI_sendReceiveData(3);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	0e 94 da 01 	call	0x3b4	; 0x3b4 <SPI_sendReceiveData>
  98:	c8 2f       	mov	r28, r24
		//B4 -> HIGH
		DIO_setPinValue(DIO_PINB4,DIO_HIGH);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_setPinValue>
		
		if(rData == 0)
  a2:	c1 11       	cpse	r28, r1
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <main+0x34>
		{
			DIO_setPinValue(DIO_PINC2,DIO_LOW);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	82 e1       	ldi	r24, 0x12	; 18
  aa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_setPinValue>
  ae:	06 c0       	rjmp	.+12     	; 0xbc <main+0x40>
		}
		else if(rData == 0xFF)
  b0:	cf 3f       	cpi	r28, 0xFF	; 255
  b2:	21 f4       	brne	.+8      	; 0xbc <main+0x40>
		{
			DIO_setPinValue(DIO_PINC2,DIO_HIGH);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	82 e1       	ldi	r24, 0x12	; 18
  b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x46>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x50>
  cc:	00 00       	nop
  ce:	dd cf       	rjmp	.-70     	; 0x8a <main+0xe>

000000d0 <DIO_setPinDir>:


void DIO_setPinDir(u8 pinNum, u8 dir)
{
	//PORTA
	if(pinNum>=0 && pinNum<=7)
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	00 f5       	brcc	.+64     	; 0x114 <DIO_setPinDir+0x44>
	{
		if(dir == DIO_INPUT)
  d4:	61 11       	cpse	r22, r1
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <DIO_setPinDir+0x24>
		{
			CLEAR_BIT(DDRA, pinNum);
  d8:	4a b3       	in	r20, 0x1a	; 26
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	b9 01       	movw	r22, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_setPinDir+0x16>
  e2:	66 0f       	add	r22, r22
  e4:	77 1f       	adc	r23, r23
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_setPinDir+0x12>
  ea:	cb 01       	movw	r24, r22
  ec:	80 95       	com	r24
  ee:	84 23       	and	r24, r20
  f0:	8a bb       	out	0x1a, r24	; 26
  f2:	08 95       	ret
		}
		else if(dir == DIO_OUTPUT)
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	09 f0       	breq	.+2      	; 0xfa <DIO_setPinDir+0x2a>
  f8:	75 c0       	rjmp	.+234    	; 0x1e4 <DIO_setPinDir+0x114>
		{
			SET_BIT(DDRA, pinNum);
  fa:	4a b3       	in	r20, 0x1a	; 26
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	b9 01       	movw	r22, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_setPinDir+0x38>
 104:	66 0f       	add	r22, r22
 106:	77 1f       	adc	r23, r23
 108:	8a 95       	dec	r24
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_setPinDir+0x34>
 10c:	cb 01       	movw	r24, r22
 10e:	84 2b       	or	r24, r20
 110:	8a bb       	out	0x1a, r24	; 26
 112:	08 95       	ret
		}
	}
	//PORTB
	else if(pinNum>=8 && pinNum<=15)
 114:	98 ef       	ldi	r25, 0xF8	; 248
 116:	98 0f       	add	r25, r24
 118:	98 30       	cpi	r25, 0x08	; 8
 11a:	00 f5       	brcc	.+64     	; 0x15c <DIO_setPinDir+0x8c>
	{
		pinNum = pinNum -8;
		if(dir == DIO_INPUT)
 11c:	61 11       	cpse	r22, r1
 11e:	0e c0       	rjmp	.+28     	; 0x13c <DIO_setPinDir+0x6c>
		{
			CLEAR_BIT(DDRB, pinNum);
 120:	47 b3       	in	r20, 0x17	; 23
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_setPinDir+0x5e>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_setPinDir+0x5a>
 132:	cb 01       	movw	r24, r22
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	87 bb       	out	0x17, r24	; 23
 13a:	08 95       	ret
		}
		else if(dir == DIO_OUTPUT)
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	09 f0       	breq	.+2      	; 0x142 <DIO_setPinDir+0x72>
 140:	51 c0       	rjmp	.+162    	; 0x1e4 <DIO_setPinDir+0x114>
		{
			SET_BIT(DDRB, pinNum);
 142:	47 b3       	in	r20, 0x17	; 23
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_setPinDir+0x80>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	9a 95       	dec	r25
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_setPinDir+0x7c>
 154:	cb 01       	movw	r24, r22
 156:	84 2b       	or	r24, r20
 158:	87 bb       	out	0x17, r24	; 23
 15a:	08 95       	ret
		}
	}
	//PORTC
	else if(pinNum>=16 && pinNum<=23)
 15c:	90 ef       	ldi	r25, 0xF0	; 240
 15e:	98 0f       	add	r25, r24
 160:	98 30       	cpi	r25, 0x08	; 8
 162:	f8 f4       	brcc	.+62     	; 0x1a2 <DIO_setPinDir+0xd2>
	{
		pinNum = pinNum -16;
		if(dir == DIO_INPUT)
 164:	61 11       	cpse	r22, r1
 166:	0e c0       	rjmp	.+28     	; 0x184 <DIO_setPinDir+0xb4>
		{
			CLEAR_BIT(DDRC, pinNum);
 168:	44 b3       	in	r20, 0x14	; 20
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_setPinDir+0xa6>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	9a 95       	dec	r25
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_setPinDir+0xa2>
 17a:	cb 01       	movw	r24, r22
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	84 bb       	out	0x14, r24	; 20
 182:	08 95       	ret
		}
		else if(dir == DIO_OUTPUT)
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	71 f5       	brne	.+92     	; 0x1e4 <DIO_setPinDir+0x114>
		{
			SET_BIT(DDRC, pinNum);
 188:	44 b3       	in	r20, 0x14	; 20
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_setPinDir+0xc6>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	9a 95       	dec	r25
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_setPinDir+0xc2>
 19a:	cb 01       	movw	r24, r22
 19c:	84 2b       	or	r24, r20
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	08 95       	ret
		}
	}
	//PORTD
	else if(pinNum>=24 && pinNum<=31)
 1a2:	88 51       	subi	r24, 0x18	; 24
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	f0 f4       	brcc	.+60     	; 0x1e4 <DIO_setPinDir+0x114>
	{
		pinNum = pinNum -24;
		if(dir == DIO_INPUT)
 1a8:	61 11       	cpse	r22, r1
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <DIO_setPinDir+0xf8>
		{
			CLEAR_BIT(DDRD, pinNum);
 1ac:	41 b3       	in	r20, 0x11	; 17
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setPinDir+0xea>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setPinDir+0xe6>
 1be:	cb 01       	movw	r24, r22
 1c0:	80 95       	com	r24
 1c2:	84 23       	and	r24, r20
 1c4:	81 bb       	out	0x11, r24	; 17
 1c6:	08 95       	ret
		}
		else if(dir == DIO_OUTPUT)
 1c8:	61 30       	cpi	r22, 0x01	; 1
 1ca:	61 f4       	brne	.+24     	; 0x1e4 <DIO_setPinDir+0x114>
		{
			SET_BIT(DDRD, pinNum);
 1cc:	41 b3       	in	r20, 0x11	; 17
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_setPinDir+0x10a>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_setPinDir+0x106>
 1de:	cb 01       	movw	r24, r22
 1e0:	84 2b       	or	r24, r20
 1e2:	81 bb       	out	0x11, r24	; 17
 1e4:	08 95       	ret

000001e6 <DIO_setPinValue>:
}

void DIO_setPinValue(u8 pinNum, u8 level)
{
	//PORTA
	if(pinNum>=0 && pinNum<=7)
 1e6:	88 30       	cpi	r24, 0x08	; 8
 1e8:	00 f5       	brcc	.+64     	; 0x22a <DIO_setPinValue+0x44>
	{
		if(level == DIO_LOW)
 1ea:	61 11       	cpse	r22, r1
 1ec:	0e c0       	rjmp	.+28     	; 0x20a <DIO_setPinValue+0x24>
		{
			CLEAR_BIT(PORTA, pinNum);
 1ee:	4b b3       	in	r20, 0x1b	; 27
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_setPinValue+0x16>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_setPinValue+0x12>
 200:	cb 01       	movw	r24, r22
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	8b bb       	out	0x1b, r24	; 27
 208:	08 95       	ret
		}
		else if(level == DIO_HIGH)
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	09 f0       	breq	.+2      	; 0x210 <DIO_setPinValue+0x2a>
 20e:	75 c0       	rjmp	.+234    	; 0x2fa <DIO_setPinValue+0x114>
		{
			SET_BIT(PORTA, pinNum);
 210:	4b b3       	in	r20, 0x1b	; 27
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	b9 01       	movw	r22, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_setPinValue+0x38>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	8a 95       	dec	r24
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_setPinValue+0x34>
 222:	cb 01       	movw	r24, r22
 224:	84 2b       	or	r24, r20
 226:	8b bb       	out	0x1b, r24	; 27
 228:	08 95       	ret
		}
	}
	//PORTB
	else if(pinNum>=8 && pinNum<=15)
 22a:	98 ef       	ldi	r25, 0xF8	; 248
 22c:	98 0f       	add	r25, r24
 22e:	98 30       	cpi	r25, 0x08	; 8
 230:	00 f5       	brcc	.+64     	; 0x272 <DIO_setPinValue+0x8c>
	{
		pinNum = pinNum -8;
		if(level == DIO_LOW)
 232:	61 11       	cpse	r22, r1
 234:	0e c0       	rjmp	.+28     	; 0x252 <DIO_setPinValue+0x6c>
		{
			CLEAR_BIT(PORTB, pinNum);
 236:	48 b3       	in	r20, 0x18	; 24
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_setPinValue+0x5e>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	9a 95       	dec	r25
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_setPinValue+0x5a>
 248:	cb 01       	movw	r24, r22
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	88 bb       	out	0x18, r24	; 24
 250:	08 95       	ret
		}
		else if(level == DIO_HIGH)
 252:	61 30       	cpi	r22, 0x01	; 1
 254:	09 f0       	breq	.+2      	; 0x258 <DIO_setPinValue+0x72>
 256:	51 c0       	rjmp	.+162    	; 0x2fa <DIO_setPinValue+0x114>
		{
			SET_BIT(PORTB, pinNum);
 258:	48 b3       	in	r20, 0x18	; 24
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	b9 01       	movw	r22, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_setPinValue+0x80>
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	9a 95       	dec	r25
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_setPinValue+0x7c>
 26a:	cb 01       	movw	r24, r22
 26c:	84 2b       	or	r24, r20
 26e:	88 bb       	out	0x18, r24	; 24
 270:	08 95       	ret
		}
	}
	//PORTC
	else if(pinNum>=16 && pinNum<=23)
 272:	90 ef       	ldi	r25, 0xF0	; 240
 274:	98 0f       	add	r25, r24
 276:	98 30       	cpi	r25, 0x08	; 8
 278:	f8 f4       	brcc	.+62     	; 0x2b8 <DIO_setPinValue+0xd2>
	{
		pinNum = pinNum -16;
		if(level == DIO_LOW)
 27a:	61 11       	cpse	r22, r1
 27c:	0e c0       	rjmp	.+28     	; 0x29a <DIO_setPinValue+0xb4>
		{
			CLEAR_BIT(PORTC, pinNum);
 27e:	45 b3       	in	r20, 0x15	; 21
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_setPinValue+0xa6>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	9a 95       	dec	r25
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_setPinValue+0xa2>
 290:	cb 01       	movw	r24, r22
 292:	80 95       	com	r24
 294:	84 23       	and	r24, r20
 296:	85 bb       	out	0x15, r24	; 21
 298:	08 95       	ret
		}
		else if(level == DIO_HIGH)
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	71 f5       	brne	.+92     	; 0x2fa <DIO_setPinValue+0x114>
		{
			SET_BIT(PORTC, pinNum);
 29e:	45 b3       	in	r20, 0x15	; 21
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	b9 01       	movw	r22, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_setPinValue+0xc6>
 2a8:	66 0f       	add	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	9a 95       	dec	r25
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_setPinValue+0xc2>
 2b0:	cb 01       	movw	r24, r22
 2b2:	84 2b       	or	r24, r20
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	08 95       	ret
		}
	}
	//PORTD
	else if(pinNum>=24 && pinNum<=31)
 2b8:	88 51       	subi	r24, 0x18	; 24
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	f0 f4       	brcc	.+60     	; 0x2fa <DIO_setPinValue+0x114>
	{
		pinNum = pinNum -24;
		if(level == DIO_LOW)
 2be:	61 11       	cpse	r22, r1
 2c0:	0e c0       	rjmp	.+28     	; 0x2de <DIO_setPinValue+0xf8>
		{
			CLEAR_BIT(PORTD, pinNum);
 2c2:	42 b3       	in	r20, 0x12	; 18
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_setPinValue+0xea>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_setPinValue+0xe6>
 2d4:	cb 01       	movw	r24, r22
 2d6:	80 95       	com	r24
 2d8:	84 23       	and	r24, r20
 2da:	82 bb       	out	0x12, r24	; 18
 2dc:	08 95       	ret
		}
		else if(level == DIO_HIGH)
 2de:	61 30       	cpi	r22, 0x01	; 1
 2e0:	61 f4       	brne	.+24     	; 0x2fa <DIO_setPinValue+0x114>
		{
			SET_BIT(PORTD, pinNum);
 2e2:	42 b3       	in	r20, 0x12	; 18
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_setPinValue+0x10a>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_setPinValue+0x106>
 2f4:	cb 01       	movw	r24, r22
 2f6:	84 2b       	or	r24, r20
 2f8:	82 bb       	out	0x12, r24	; 18
 2fa:	08 95       	ret

000002fc <__vector_1>:
}

//num(in vector table)-1
void __vector_1() __attribute__((signal));
void __vector_1()
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
	EXT_int0Func();
 31e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 322:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 326:	09 95       	icall
	//DIO_togglePinValue(DIO_PINC2);	
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	1f 90       	pop	r1
 348:	18 95       	reti

0000034a <SPI_init>:
#include "SPI_INT.h"
#include "DIO_INT.h"
void SPI_init(SPI_MODE mode)
{
	//select master or slave with #if
	if(mode == SPI_MASTER)
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	d1 f4       	brne	.+52     	; 0x382 <SPI_init+0x38>
	{
		//if master
		//select master
		SET_BIT(SPCR,MSTR);
 34e:	8d b1       	in	r24, 0x0d	; 13
 350:	80 61       	ori	r24, 0x10	; 16
 352:	8d b9       	out	0x0d, r24	; 13
		
		//MOSI -> B5 -> OUTPUT
		DIO_setPinDir(DIO_PINB5, DIO_OUTPUT);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	8d e0       	ldi	r24, 0x0D	; 13
 358:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		//CLK -> B7 -> OUTPUT
		DIO_setPinDir(DIO_PINB7, DIO_OUTPUT);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	8f e0       	ldi	r24, 0x0F	; 15
 360:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		//MISO -> B6 -> INPUT
		DIO_setPinDir(DIO_PINB6, DIO_INPUT);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	8e e0       	ldi	r24, 0x0E	; 14
 368:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		//SS -> B4 -> OUTPUT
		DIO_setPinDir(DIO_PINB4, DIO_OUTPUT);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	8c e0       	ldi	r24, 0x0C	; 12
 370:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		
		//clk:
		SET_BIT(SPCR,SPR0);
 374:	8d b1       	in	r24, 0x0d	; 13
 376:	81 60       	ori	r24, 0x01	; 1
 378:	8d b9       	out	0x0d, r24	; 13
		SET_BIT(SPCR,SPR1);
 37a:	8d b1       	in	r24, 0x0d	; 13
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	8d b9       	out	0x0d, r24	; 13
 380:	15 c0       	rjmp	.+42     	; 0x3ac <SPI_init+0x62>
	}
	else if(mode == SPI_SLAVE)
 382:	81 11       	cpse	r24, r1
 384:	13 c0       	rjmp	.+38     	; 0x3ac <SPI_init+0x62>
	{
		//if slave
		//select slave
		CLEAR_BIT(SPCR,MSTR);
 386:	8d b1       	in	r24, 0x0d	; 13
 388:	8f 7e       	andi	r24, 0xEF	; 239
 38a:	8d b9       	out	0x0d, r24	; 13
		
		//MOSI -> B5 -> INPUT
		DIO_setPinDir(DIO_PINB5, DIO_INPUT);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	8d e0       	ldi	r24, 0x0D	; 13
 390:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		//CLK -> B7 -> INPUT
		DIO_setPinDir(DIO_PINB7, DIO_INPUT);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		//MISO -> B6 -> OUTPUT
		DIO_setPinDir(DIO_PINB6, DIO_OUTPUT);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	8e e0       	ldi	r24, 0x0E	; 14
 3a0:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		//SS -> B4 -> INPUT
		DIO_setPinDir(DIO_PINB4, DIO_INPUT);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	8c e0       	ldi	r24, 0x0C	; 12
 3a8:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDir>
		
	}
	
	//enable SPI
	SET_BIT(SPCR,SPE);
 3ac:	8d b1       	in	r24, 0x0d	; 13
 3ae:	80 64       	ori	r24, 0x40	; 64
 3b0:	8d b9       	out	0x0d, r24	; 13
 3b2:	08 95       	ret

000003b4 <SPI_sendReceiveData>:
}

u8 SPI_sendReceiveData(u8 data)
{		
	//write data to the register
	SPDR = data;
 3b4:	8f b9       	out	0x0f, r24	; 15
	//wait flag until send
	while((GET_BIT(SPSR,SPIF)) == 0);
 3b6:	77 9b       	sbis	0x0e, 7	; 14
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <SPI_sendReceiveData+0x2>
	
	//return the register data
	return SPDR;
 3ba:	8f b1       	in	r24, 0x0f	; 15
 3bc:	08 95       	ret

000003be <__vector_11>:

void (*TIMER0_ctcFunc)();

void TIMER0_setCallbackCtc(void (*func)())
{
	TIMER0_ctcFunc = func;
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 93       	push	r18
 3ca:	3f 93       	push	r19
 3cc:	4f 93       	push	r20
 3ce:	5f 93       	push	r21
 3d0:	6f 93       	push	r22
 3d2:	7f 93       	push	r23
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	af 93       	push	r26
 3da:	bf 93       	push	r27
 3dc:	ef 93       	push	r30
 3de:	ff 93       	push	r31
 3e0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER0_ovFunc>
 3e4:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER0_ovFunc+0x1>
 3e8:	09 95       	icall
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_10>:
}

//num(in vector table)-1
void __vector_10() __attribute__((signal));
void __vector_10()
{
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	3f 93       	push	r19
 41a:	4f 93       	push	r20
 41c:	5f 93       	push	r21
 41e:	6f 93       	push	r22
 420:	7f 93       	push	r23
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	af 93       	push	r26
 428:	bf 93       	push	r27
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
	TIMER0_ctcFunc();
 42e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <TIMER0_ctcFunc>
 432:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <TIMER0_ctcFunc+0x1>
 436:	09 95       	icall
}
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__vector_6>:
}

//num(in vector table)-1
void __vector_6() __attribute__((signal));
void __vector_6()
{
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
	TIMER1_icuFunc();
 47c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER1_icuFunc>
 480:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER1_icuFunc+0x1>
 484:	09 95       	icall
 486:	ff 91       	pop	r31
 488:	ef 91       	pop	r30
 48a:	bf 91       	pop	r27
 48c:	af 91       	pop	r26
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	7f 91       	pop	r23
 494:	6f 91       	pop	r22
 496:	5f 91       	pop	r21
 498:	4f 91       	pop	r20
 49a:	3f 91       	pop	r19
 49c:	2f 91       	pop	r18
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
