
Nasr75Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000552  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8a  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000979  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d5  00000000  00000000  00001fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063b  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089d  00000000  00000000  00003277  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
  2c:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "SPI_INT.h"

int main(void)
{
	//init SPI and select master/slave
	SPI_init(SPI_SLAVE);
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_init>
	
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	82 e1       	ldi	r24, 0x12	; 18
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
	u8 data = 0;
  8a:	c0 e0       	ldi	r28, 0x00	; 0
	while (1)
	{	
		//send data
		u8 rData = SPI_sendReceiveData(data);
  8c:	8c 2f       	mov	r24, r28
  8e:	0e 94 2d 02 	call	0x45a	; 0x45a <SPI_sendReceiveData>
		data = ~data ;//0->0xFF and 0xFF->0
  92:	c0 95       	com	r28
		DIO_togglePinValue(DIO_PINC2);
  94:	82 e1       	ldi	r24, 0x12	; 18
  96:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_togglePinValue>
  9a:	f8 cf       	rjmp	.-16     	; 0x8c <main+0x10>

0000009c <DIO_setPinDir>:
}


void DIO_setPullUp(u8 pinNum)
{
	DIO_setPinValue(pinNum, DIO_HIGH);
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	00 f5       	brcc	.+64     	; 0xe0 <DIO_setPinDir+0x44>
  a0:	61 11       	cpse	r22, r1
  a2:	0e c0       	rjmp	.+28     	; 0xc0 <DIO_setPinDir+0x24>
  a4:	4a b3       	in	r20, 0x1a	; 26
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	b9 01       	movw	r22, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_setPinDir+0x16>
  ae:	66 0f       	add	r22, r22
  b0:	77 1f       	adc	r23, r23
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_setPinDir+0x12>
  b6:	cb 01       	movw	r24, r22
  b8:	80 95       	com	r24
  ba:	84 23       	and	r24, r20
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
  c0:	61 30       	cpi	r22, 0x01	; 1
  c2:	09 f0       	breq	.+2      	; 0xc6 <DIO_setPinDir+0x2a>
  c4:	75 c0       	rjmp	.+234    	; 0x1b0 <DIO_setPinDir+0x114>
  c6:	4a b3       	in	r20, 0x1a	; 26
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_setPinDir+0x38>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_setPinDir+0x34>
  d8:	cb 01       	movw	r24, r22
  da:	84 2b       	or	r24, r20
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	08 95       	ret
  e0:	98 ef       	ldi	r25, 0xF8	; 248
  e2:	98 0f       	add	r25, r24
  e4:	98 30       	cpi	r25, 0x08	; 8
  e6:	00 f5       	brcc	.+64     	; 0x128 <DIO_setPinDir+0x8c>
  e8:	61 11       	cpse	r22, r1
  ea:	0e c0       	rjmp	.+28     	; 0x108 <DIO_setPinDir+0x6c>
  ec:	47 b3       	in	r20, 0x17	; 23
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_setPinDir+0x5e>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_setPinDir+0x5a>
  fe:	cb 01       	movw	r24, r22
 100:	80 95       	com	r24
 102:	84 23       	and	r24, r20
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
 108:	61 30       	cpi	r22, 0x01	; 1
 10a:	09 f0       	breq	.+2      	; 0x10e <DIO_setPinDir+0x72>
 10c:	51 c0       	rjmp	.+162    	; 0x1b0 <DIO_setPinDir+0x114>
 10e:	47 b3       	in	r20, 0x17	; 23
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	b9 01       	movw	r22, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_setPinDir+0x80>
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	9a 95       	dec	r25
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_setPinDir+0x7c>
 120:	cb 01       	movw	r24, r22
 122:	84 2b       	or	r24, r20
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
 128:	90 ef       	ldi	r25, 0xF0	; 240
 12a:	98 0f       	add	r25, r24
 12c:	98 30       	cpi	r25, 0x08	; 8
 12e:	f8 f4       	brcc	.+62     	; 0x16e <DIO_setPinDir+0xd2>
 130:	61 11       	cpse	r22, r1
 132:	0e c0       	rjmp	.+28     	; 0x150 <DIO_setPinDir+0xb4>
 134:	44 b3       	in	r20, 0x14	; 20
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_setPinDir+0xa6>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	9a 95       	dec	r25
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_setPinDir+0xa2>
 146:	cb 01       	movw	r24, r22
 148:	80 95       	com	r24
 14a:	84 23       	and	r24, r20
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	08 95       	ret
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	71 f5       	brne	.+92     	; 0x1b0 <DIO_setPinDir+0x114>
 154:	44 b3       	in	r20, 0x14	; 20
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDir+0xc6>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	9a 95       	dec	r25
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDir+0xc2>
 166:	cb 01       	movw	r24, r22
 168:	84 2b       	or	r24, r20
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	08 95       	ret
 16e:	88 51       	subi	r24, 0x18	; 24
 170:	88 30       	cpi	r24, 0x08	; 8
 172:	f0 f4       	brcc	.+60     	; 0x1b0 <DIO_setPinDir+0x114>
 174:	61 11       	cpse	r22, r1
 176:	0e c0       	rjmp	.+28     	; 0x194 <DIO_setPinDir+0xf8>
 178:	41 b3       	in	r20, 0x11	; 17
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_setPinDir+0xea>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_setPinDir+0xe6>
 18a:	cb 01       	movw	r24, r22
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	81 bb       	out	0x11, r24	; 17
 192:	08 95       	ret
 194:	61 30       	cpi	r22, 0x01	; 1
 196:	61 f4       	brne	.+24     	; 0x1b0 <DIO_setPinDir+0x114>
 198:	41 b3       	in	r20, 0x11	; 17
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	b9 01       	movw	r22, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_setPinDir+0x10a>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_setPinDir+0x106>
 1aa:	cb 01       	movw	r24, r22
 1ac:	84 2b       	or	r24, r20
 1ae:	81 bb       	out	0x11, r24	; 17
 1b0:	08 95       	ret

000001b2 <DIO_setPinValue>:
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	00 f5       	brcc	.+64     	; 0x1f6 <DIO_setPinValue+0x44>
 1b6:	61 11       	cpse	r22, r1
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <DIO_setPinValue+0x24>
 1ba:	4b b3       	in	r20, 0x1b	; 27
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	b9 01       	movw	r22, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_setPinValue+0x16>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	8a 95       	dec	r24
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_setPinValue+0x12>
 1cc:	cb 01       	movw	r24, r22
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	08 95       	ret
 1d6:	61 30       	cpi	r22, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_setPinValue+0x2a>
 1da:	75 c0       	rjmp	.+234    	; 0x2c6 <DIO_setPinValue+0x114>
 1dc:	4b b3       	in	r20, 0x1b	; 27
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x38>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x34>
 1ee:	cb 01       	movw	r24, r22
 1f0:	84 2b       	or	r24, r20
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	08 95       	ret
 1f6:	98 ef       	ldi	r25, 0xF8	; 248
 1f8:	98 0f       	add	r25, r24
 1fa:	98 30       	cpi	r25, 0x08	; 8
 1fc:	00 f5       	brcc	.+64     	; 0x23e <DIO_setPinValue+0x8c>
 1fe:	61 11       	cpse	r22, r1
 200:	0e c0       	rjmp	.+28     	; 0x21e <DIO_setPinValue+0x6c>
 202:	48 b3       	in	r20, 0x18	; 24
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_setPinValue+0x5e>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	9a 95       	dec	r25
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_setPinValue+0x5a>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
 21e:	61 30       	cpi	r22, 0x01	; 1
 220:	09 f0       	breq	.+2      	; 0x224 <DIO_setPinValue+0x72>
 222:	51 c0       	rjmp	.+162    	; 0x2c6 <DIO_setPinValue+0x114>
 224:	48 b3       	in	r20, 0x18	; 24
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	b9 01       	movw	r22, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_setPinValue+0x80>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	9a 95       	dec	r25
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_setPinValue+0x7c>
 236:	cb 01       	movw	r24, r22
 238:	84 2b       	or	r24, r20
 23a:	88 bb       	out	0x18, r24	; 24
 23c:	08 95       	ret
 23e:	90 ef       	ldi	r25, 0xF0	; 240
 240:	98 0f       	add	r25, r24
 242:	98 30       	cpi	r25, 0x08	; 8
 244:	f8 f4       	brcc	.+62     	; 0x284 <DIO_setPinValue+0xd2>
 246:	61 11       	cpse	r22, r1
 248:	0e c0       	rjmp	.+28     	; 0x266 <DIO_setPinValue+0xb4>
 24a:	45 b3       	in	r20, 0x15	; 21
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_setPinValue+0xa6>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	9a 95       	dec	r25
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_setPinValue+0xa2>
 25c:	cb 01       	movw	r24, r22
 25e:	80 95       	com	r24
 260:	84 23       	and	r24, r20
 262:	85 bb       	out	0x15, r24	; 21
 264:	08 95       	ret
 266:	61 30       	cpi	r22, 0x01	; 1
 268:	71 f5       	brne	.+92     	; 0x2c6 <DIO_setPinValue+0x114>
 26a:	45 b3       	in	r20, 0x15	; 21
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_setPinValue+0xc6>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	9a 95       	dec	r25
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_setPinValue+0xc2>
 27c:	cb 01       	movw	r24, r22
 27e:	84 2b       	or	r24, r20
 280:	85 bb       	out	0x15, r24	; 21
 282:	08 95       	ret
 284:	88 51       	subi	r24, 0x18	; 24
 286:	88 30       	cpi	r24, 0x08	; 8
 288:	f0 f4       	brcc	.+60     	; 0x2c6 <DIO_setPinValue+0x114>
 28a:	61 11       	cpse	r22, r1
 28c:	0e c0       	rjmp	.+28     	; 0x2aa <DIO_setPinValue+0xf8>
 28e:	42 b3       	in	r20, 0x12	; 18
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_setPinValue+0xea>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_setPinValue+0xe6>
 2a0:	cb 01       	movw	r24, r22
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	82 bb       	out	0x12, r24	; 18
 2a8:	08 95       	ret
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	61 f4       	brne	.+24     	; 0x2c6 <DIO_setPinValue+0x114>
 2ae:	42 b3       	in	r20, 0x12	; 18
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	b9 01       	movw	r22, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_setPinValue+0x10a>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	8a 95       	dec	r24
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_setPinValue+0x106>
 2c0:	cb 01       	movw	r24, r22
 2c2:	84 2b       	or	r24, r20
 2c4:	82 bb       	out	0x12, r24	; 18
 2c6:	08 95       	ret

000002c8 <DIO_readPinValue>:
 2c8:	88 30       	cpi	r24, 0x08	; 8
 2ca:	b0 f4       	brcc	.+44     	; 0x2f8 <DIO_readPinValue+0x30>
 2cc:	99 b3       	in	r25, 0x19	; 25
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	a9 01       	movw	r20, r18
 2d4:	08 2e       	mov	r0, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_readPinValue+0x14>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_readPinValue+0x10>
 2e0:	29 2f       	mov	r18, r25
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	24 23       	and	r18, r20
 2e6:	35 23       	and	r19, r21
 2e8:	a9 01       	movw	r20, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_readPinValue+0x28>
 2ec:	55 95       	asr	r21
 2ee:	47 95       	ror	r20
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_readPinValue+0x24>
 2f4:	ca 01       	movw	r24, r20
 2f6:	08 95       	ret
 2f8:	48 ef       	ldi	r20, 0xF8	; 248
 2fa:	48 0f       	add	r20, r24
 2fc:	48 30       	cpi	r20, 0x08	; 8
 2fe:	a0 f4       	brcc	.+40     	; 0x328 <DIO_readPinValue+0x60>
 300:	56 b3       	in	r21, 0x16	; 22
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	9c 01       	movw	r18, r24
 308:	04 2e       	mov	r0, r20
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_readPinValue+0x48>
 30c:	22 0f       	add	r18, r18
 30e:	33 1f       	adc	r19, r19
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_readPinValue+0x44>
 314:	85 2f       	mov	r24, r21
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	82 23       	and	r24, r18
 31a:	93 23       	and	r25, r19
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_readPinValue+0x5a>
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	4a 95       	dec	r20
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_readPinValue+0x56>
 326:	08 95       	ret
 328:	40 ef       	ldi	r20, 0xF0	; 240
 32a:	48 0f       	add	r20, r24
 32c:	48 30       	cpi	r20, 0x08	; 8
 32e:	a0 f4       	brcc	.+40     	; 0x358 <DIO_readPinValue+0x90>
 330:	53 b3       	in	r21, 0x13	; 19
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	9c 01       	movw	r18, r24
 338:	04 2e       	mov	r0, r20
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_readPinValue+0x78>
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_readPinValue+0x74>
 344:	85 2f       	mov	r24, r21
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	82 23       	and	r24, r18
 34a:	93 23       	and	r25, r19
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_readPinValue+0x8a>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	4a 95       	dec	r20
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_readPinValue+0x86>
 356:	08 95       	ret
 358:	48 ee       	ldi	r20, 0xE8	; 232
 35a:	48 0f       	add	r20, r24
 35c:	48 30       	cpi	r20, 0x08	; 8
 35e:	a0 f4       	brcc	.+40     	; 0x388 <DIO_readPinValue+0xc0>
 360:	50 b3       	in	r21, 0x10	; 16
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	9c 01       	movw	r18, r24
 368:	04 2e       	mov	r0, r20
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_readPinValue+0xa8>
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_readPinValue+0xa4>
 374:	85 2f       	mov	r24, r21
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	82 23       	and	r24, r18
 37a:	93 23       	and	r25, r19
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_readPinValue+0xba>
 37e:	95 95       	asr	r25
 380:	87 95       	ror	r24
 382:	4a 95       	dec	r20
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_readPinValue+0xb6>
 386:	08 95       	ret
 388:	08 95       	ret

0000038a <DIO_togglePinValue>:
}

void DIO_togglePinValue(u8 pinNum)
{
 38a:	cf 93       	push	r28
 38c:	c8 2f       	mov	r28, r24
	DIO_setPinValue(pinNum, !DIO_readPinValue(pinNum) );
 38e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_readPinValue>
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 11       	cpse	r24, r1
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	8c 2f       	mov	r24, r28
 39a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_setPinValue>

 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <__vector_1>:
}

//num(in vector table)-1
void __vector_1() __attribute__((signal));
void __vector_1()
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	EXT_int0Func();
 3c4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3cc:	09 95       	icall
	//DIO_togglePinValue(DIO_PINC2);	
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <SPI_init>:
#include "DIO_INT.h"

void SPI_init(SPI_MODE mode)
{
	//select master or slave with #if
	if(mode == SPI_MASTER)
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	d1 f4       	brne	.+52     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
		//if master
		//select master
		SET_BIT(SPCR,MSTR);
 3f4:	8d b1       	in	r24, 0x0d	; 13
 3f6:	80 61       	ori	r24, 0x10	; 16
 3f8:	8d b9       	out	0x0d, r24	; 13
		
		//MOSI -> B5 -> OUTPUT
		DIO_setPinDir(DIO_PINB5, DIO_OUTPUT);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8d e0       	ldi	r24, 0x0D	; 13
 3fe:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		//CLK -> B7 -> OUTPUT
		DIO_setPinDir(DIO_PINB7, DIO_OUTPUT);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		//MISO -> B6 -> INPUT
		DIO_setPinDir(DIO_PINB6, DIO_INPUT);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	8e e0       	ldi	r24, 0x0E	; 14
 40e:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		//SS -> B4 -> OUTPUT
		DIO_setPinDir(DIO_PINB4, DIO_OUTPUT);
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	8c e0       	ldi	r24, 0x0C	; 12
 416:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		
		//clk:
		SET_BIT(SPCR,SPR0);
 41a:	8d b1       	in	r24, 0x0d	; 13
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	8d b9       	out	0x0d, r24	; 13
		SET_BIT(SPCR,SPR1);
 420:	8d b1       	in	r24, 0x0d	; 13
 422:	82 60       	ori	r24, 0x02	; 2
 424:	8d b9       	out	0x0d, r24	; 13
 426:	15 c0       	rjmp	.+42     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	}
	else if(mode == SPI_SLAVE)
 428:	81 11       	cpse	r24, r1
 42a:	13 c0       	rjmp	.+38     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	{
		//if slave
		//select slave
		CLEAR_BIT(SPCR,MSTR);
 42c:	8d b1       	in	r24, 0x0d	; 13
 42e:	8f 7e       	andi	r24, 0xEF	; 239
 430:	8d b9       	out	0x0d, r24	; 13
		
		//MOSI -> B5 -> INPUT
		DIO_setPinDir(DIO_PINB5, DIO_INPUT);
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	8d e0       	ldi	r24, 0x0D	; 13
 436:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		//CLK -> B7 -> INPUT
		DIO_setPinDir(DIO_PINB7, DIO_INPUT);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	8f e0       	ldi	r24, 0x0F	; 15
 43e:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		//MISO -> B6 -> OUTPUT
		DIO_setPinDir(DIO_PINB6, DIO_OUTPUT);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	8e e0       	ldi	r24, 0x0E	; 14
 446:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		//SS -> B4 -> INPUT
		DIO_setPinDir(DIO_PINB4, DIO_INPUT);
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	8c e0       	ldi	r24, 0x0C	; 12
 44e:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDir>
		
	}
	
	//enable SPI
	SET_BIT(SPCR,SPE);
 452:	8d b1       	in	r24, 0x0d	; 13
 454:	80 64       	ori	r24, 0x40	; 64
 456:	8d b9       	out	0x0d, r24	; 13
 458:	08 95       	ret

0000045a <SPI_sendReceiveData>:
}

u8 SPI_sendReceiveData(u8 data)
{		
	//write data to the register
	SPDR = data;
 45a:	8f b9       	out	0x0f, r24	; 15
	//wait flag until send
	while((GET_BIT(SPSR,SPIF)) == 0);
 45c:	77 9b       	sbis	0x0e, 7	; 14
 45e:	fe cf       	rjmp	.-4      	; 0x45c <SPI_sendReceiveData+0x2>
	
	//return the register data
	return SPDR;
 460:	8f b1       	in	r24, 0x0f	; 15
 462:	08 95       	ret

00000464 <__vector_11>:

void (*TIMER0_ctcFunc)();

void TIMER0_setCallbackCtc(void (*func)())
{
	TIMER0_ctcFunc = func;
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
 486:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER0_ovFunc>
 48a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER0_ovFunc+0x1>
 48e:	09 95       	icall
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <__vector_10>:
}

//num(in vector table)-1
void __vector_10() __attribute__((signal));
void __vector_10()
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
	TIMER0_ctcFunc();
 4d4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <TIMER0_ctcFunc>
 4d8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <TIMER0_ctcFunc+0x1>
 4dc:	09 95       	icall
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_6>:
}

//num(in vector table)-1
void __vector_6() __attribute__((signal));
void __vector_6()
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	TIMER1_icuFunc();
 522:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER1_icuFunc>
 526:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER1_icuFunc+0x1>
 52a:	09 95       	icall
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
