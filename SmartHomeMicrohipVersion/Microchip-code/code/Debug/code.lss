
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  00003554  000035e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006f0  00800104  00800104  0000368c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000036bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000878  00000000  00000000  000036f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008add  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f35  00000000  00000000  0000ca4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004cce  00000000  00000000  0000e982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000186c  00000000  00000000  00013650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002410  00000000  00000000  00014ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000074f8  00000000  00000000  000172cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  0001e7c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__vector_1>
       8:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__vector_2>
       c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__vector_3>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 26 18 	jmp	0x304c	; 0x304c <__vector_6>
      1c:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_7>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__vector_10>
      2c:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__vector_11>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__vector_13>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	37 12       	cpse	r3, r23
      56:	37 12       	cpse	r3, r23
      58:	66 12       	cpse	r6, r22
      5a:	6b 12       	cpse	r6, r27
      5c:	81 12       	cpse	r8, r17
      5e:	37 12       	cpse	r3, r23
      60:	37 12       	cpse	r3, r23
      62:	66 12       	cpse	r6, r22
      64:	6b 12       	cpse	r6, r27

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	11 e0       	ldi	r17, 0x01	; 1
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e4 e5       	ldi	r30, 0x54	; 84
      7a:	f5 e3       	ldi	r31, 0x35	; 53
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a4 30       	cpi	r26, 0x04	; 4
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	27 e0       	ldi	r18, 0x07	; 7
      8a:	a4 e0       	ldi	r26, 0x04	; 4
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a4 3f       	cpi	r26, 0xF4	; 244
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
      9c:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
 */ 

#include "SmartHome/Code_APP.h"

int main(){
	source_code();
      a4:	0e 94 41 03 	call	0x682	; 0x682 <source_code>
	return 0;
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	08 95       	ret

000000ae <Code_APPInitDriversTask>:
		 		{
		 			deleteuserflag = FALSE;
		 		}
		 		i2++;
		 	}
}
      ae:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <GI_enable>
      b2:	0e 94 56 13 	call	0x26ac	; 0x26ac <KPD_init>
      b6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_init>
      ba:	0e 94 4d 18 	call	0x309a	; 0x309a <UART_init>
      be:	0e 94 ff 12 	call	0x25fe	; 0x25fe <EEPROM_Init>
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <vTaskSuspend>
      ca:	84 ef       	ldi	r24, 0xF4	; 244
      cc:	91 e0       	ldi	r25, 0x01	; 1
      ce:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <vTaskDelay>
      d2:	ed cf       	rjmp	.-38     	; 0xae <Code_APPInitDriversTask>

000000d4 <UARTInputTask>:
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	1f 92       	push	r1
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	88 e7       	ldi	r24, 0x78	; 120
      e0:	89 83       	std	Y+1, r24	; 0x01
      e2:	0e 94 73 18 	call	0x30e6	; 0x30e6 <UART_receiveData>
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	88 37       	cpi	r24, 0x78	; 120
      ea:	61 f0       	breq	.+24     	; 0x104 <UARTInputTask+0x30>
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	50 e0       	ldi	r21, 0x00	; 0
      f2:	be 01       	movw	r22, r28
      f4:	6f 5f       	subi	r22, 0xFF	; 255
      f6:	7f 4f       	sbci	r23, 0xFF	; 255
      f8:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <xQueue>
      fc:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <xQueue+0x1>
     100:	0e 94 34 08 	call	0x1068	; 0x1068 <xQueueGenericSend>
     104:	84 ef       	ldi	r24, 0xF4	; 244
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <vTaskDelay>
     10c:	ea cf       	rjmp	.-44     	; 0xe2 <UARTInputTask+0xe>

0000010e <CheckPasswordAdmin>:
     10e:	cf 93       	push	r28
     110:	21 c0       	rjmp	.+66     	; 0x154 <CheckPasswordAdmin+0x46>
     112:	8e e0       	ldi	r24, 0x0E	; 14
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 25 13 	call	0x264a	; 0x264a <EEPROM_ReadByteNACK>
     11a:	2f ef       	ldi	r18, 0xFF	; 255
     11c:	31 ee       	ldi	r19, 0xE1	; 225
     11e:	84 e0       	ldi	r24, 0x04	; 4
     120:	21 50       	subi	r18, 0x01	; 1
     122:	30 40       	sbci	r19, 0x00	; 0
     124:	80 40       	sbci	r24, 0x00	; 0
     126:	e1 f7       	brne	.-8      	; 0x120 <CheckPasswordAdmin+0x12>
     128:	00 c0       	rjmp	.+0      	; 0x12a <CheckPasswordAdmin+0x1c>
     12a:	00 00       	nop
     12c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <EEPROMRecevedData.2447>
     130:	8f 3f       	cpi	r24, 0xFF	; 255
     132:	69 f0       	breq	.+26     	; 0x14e <CheckPasswordAdmin+0x40>
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <EEPROM_flage.2442>
     13a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     13e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     148:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <EEPROMAdminLocation.2449>
     14c:	03 c0       	rjmp	.+6      	; 0x154 <CheckPasswordAdmin+0x46>
     14e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <EEPROM_flage.2442>
     152:	07 c0       	rjmp	.+14     	; 0x162 <CheckPasswordAdmin+0x54>
     154:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     158:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     15c:	64 30       	cpi	r22, 0x04	; 4
     15e:	71 05       	cpc	r23, r1
     160:	c0 f2       	brcs	.-80     	; 0x112 <CheckPasswordAdmin+0x4>
     162:	0e 94 73 18 	call	0x30e6	; 0x30e6 <UART_receiveData>
     166:	80 53       	subi	r24, 0x30	; 48
     168:	88 37       	cpi	r24, 0x78	; 120
     16a:	51 f0       	breq	.+20     	; 0x180 <CheckPasswordAdmin+0x72>
     16c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <InputIndex.2446>
     170:	e9 2f       	mov	r30, r25
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	e8 5f       	subi	r30, 0xF8	; 248
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	80 83       	st	Z, r24
     17a:	9f 5f       	subi	r25, 0xFF	; 255
     17c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <InputIndex.2446>
     180:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <InputIndex.2446>
     184:	84 30       	cpi	r24, 0x04	; 4
     186:	09 f0       	breq	.+2      	; 0x18a <CheckPasswordAdmin+0x7c>
     188:	ae c0       	rjmp	.+348    	; 0x2e6 <CheckPasswordAdmin+0x1d8>
     18a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <EEPROM_flage.2442>
     18e:	81 11       	cpse	r24, r1
     190:	2a c0       	rjmp	.+84     	; 0x1e6 <CheckPasswordAdmin+0xd8>
     192:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     196:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <EEPROMAdminLocation.2449>
     19a:	1c c0       	rjmp	.+56     	; 0x1d4 <CheckPasswordAdmin+0xc6>
     19c:	9f ef       	ldi	r25, 0xFF	; 255
     19e:	21 ee       	ldi	r18, 0xE1	; 225
     1a0:	34 e0       	ldi	r19, 0x04	; 4
     1a2:	91 50       	subi	r25, 0x01	; 1
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	30 40       	sbci	r19, 0x00	; 0
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <CheckPasswordAdmin+0x94>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <CheckPasswordAdmin+0x9e>
     1ac:	00 00       	nop
     1ae:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     1b2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     1b6:	fb 01       	movw	r30, r22
     1b8:	e8 5f       	subi	r30, 0xF8	; 248
     1ba:	fe 4f       	sbci	r31, 0xFE	; 254
     1bc:	80 81       	ld	r24, Z
     1be:	0e 94 03 13 	call	0x2606	; 0x2606 <EEPROM_SendByte>
     1c2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     1c6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     1d0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <EEPROMAdminLocation.2449>
     1d4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     1d8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     1dc:	04 97       	sbiw	r24, 0x04	; 4
     1de:	f0 f2       	brcs	.-68     	; 0x19c <CheckPasswordAdmin+0x8e>
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Save_flage.2443>
     1e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <EEPROM_flage.2442>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	a1 f5       	brne	.+104    	; 0x256 <CheckPasswordAdmin+0x148>
     1ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     1f2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <EEPROMAdminLocation.2449>
     1f6:	29 c0       	rjmp	.+82     	; 0x24a <CheckPasswordAdmin+0x13c>
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
     1fa:	91 ee       	ldi	r25, 0xE1	; 225
     1fc:	24 e0       	ldi	r18, 0x04	; 4
     1fe:	81 50       	subi	r24, 0x01	; 1
     200:	90 40       	sbci	r25, 0x00	; 0
     202:	20 40       	sbci	r18, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <CheckPasswordAdmin+0xf0>
     206:	00 c0       	rjmp	.+0      	; 0x208 <CheckPasswordAdmin+0xfa>
     208:	00 00       	nop
     20a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     20e:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     212:	8e e0       	ldi	r24, 0x0E	; 14
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	0e 94 25 13 	call	0x264a	; 0x264a <EEPROM_ReadByteNACK>
     21a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     21e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     222:	fc 01       	movw	r30, r24
     224:	e8 5f       	subi	r30, 0xF8	; 248
     226:	fe 4f       	sbci	r31, 0xFE	; 254
     228:	30 81       	ld	r19, Z
     22a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <EEPROMRecevedData.2447>
     22e:	32 13       	cpse	r19, r18
     230:	09 c0       	rjmp	.+18     	; 0x244 <CheckPasswordAdmin+0x136>
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <flage>
     238:	01 96       	adiw	r24, 0x01	; 1
     23a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     23e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <EEPROMAdminLocation.2449>
     242:	03 c0       	rjmp	.+6      	; 0x24a <CheckPasswordAdmin+0x13c>
     244:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flage>
     248:	06 c0       	rjmp	.+12     	; 0x256 <CheckPasswordAdmin+0x148>
     24a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEPROMAdminLocation.2449>
     24e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <EEPROMAdminLocation.2449+0x1>
     252:	04 97       	sbiw	r24, 0x04	; 4
     254:	88 f2       	brcs	.-94     	; 0x1f8 <CheckPasswordAdmin+0xea>
     256:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Save_flage.2443>
     25a:	81 11       	cpse	r24, r1
     25c:	40 c0       	rjmp	.+128    	; 0x2de <CheckPasswordAdmin+0x1d0>
     25e:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <flage>
     262:	c1 30       	cpi	r28, 0x01	; 1
     264:	81 f4       	brne	.+32     	; 0x286 <CheckPasswordAdmin+0x178>
     266:	81 e6       	ldi	r24, 0x61	; 97
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_sendStr>
     26e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <InputIndex.2446>
     272:	3f ef       	ldi	r19, 0xFF	; 255
     274:	81 ee       	ldi	r24, 0xE1	; 225
     276:	94 e0       	ldi	r25, 0x04	; 4
     278:	31 50       	subi	r19, 0x01	; 1
     27a:	80 40       	sbci	r24, 0x00	; 0
     27c:	90 40       	sbci	r25, 0x00	; 0
     27e:	e1 f7       	brne	.-8      	; 0x278 <CheckPasswordAdmin+0x16a>
     280:	00 c0       	rjmp	.+0      	; 0x282 <CheckPasswordAdmin+0x174>
     282:	00 00       	nop
     284:	31 c0       	rjmp	.+98     	; 0x2e8 <CheckPasswordAdmin+0x1da>
     286:	8b e6       	ldi	r24, 0x6B	; 107
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_sendStr>
     28e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <counter.2448>
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <counter.2448>
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	49 f0       	breq	.+18     	; 0x2ae <CheckPasswordAdmin+0x1a0>
     29c:	83 30       	cpi	r24, 0x03	; 3
     29e:	61 f0       	breq	.+24     	; 0x2b8 <CheckPasswordAdmin+0x1aa>
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	e9 f4       	brne	.+58     	; 0x2de <CheckPasswordAdmin+0x1d0>
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     2ac:	18 c0       	rjmp	.+48     	; 0x2de <CheckPasswordAdmin+0x1d0>
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     2b6:	13 c0       	rjmp	.+38     	; 0x2de <CheckPasswordAdmin+0x1d0>
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     2c0:	89 e7       	ldi	r24, 0x79	; 121
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_sendStr>
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	37 e6       	ldi	r19, 0x67	; 103
     2cc:	89 e8       	ldi	r24, 0x89	; 137
     2ce:	99 e0       	ldi	r25, 0x09	; 9
     2d0:	21 50       	subi	r18, 0x01	; 1
     2d2:	30 40       	sbci	r19, 0x00	; 0
     2d4:	80 40       	sbci	r24, 0x00	; 0
     2d6:	90 40       	sbci	r25, 0x00	; 0
     2d8:	d9 f7       	brne	.-10     	; 0x2d0 <CheckPasswordAdmin+0x1c2>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <CheckPasswordAdmin+0x1ce>
     2dc:	00 00       	nop
     2de:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <InputIndex.2446>
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <CheckPasswordAdmin+0x1da>
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	8c 2f       	mov	r24, r28
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <TEMP_ControlAC>:
     2ee:	cf 92       	push	r12
     2f0:	df 92       	push	r13
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	c0 90 dd 07 	lds	r12, 0x07DD	; 0x8007dd <VAnalogTemp>
     2fa:	d0 90 de 07 	lds	r13, 0x07DE	; 0x8007de <VAnalogTemp+0x1>
     2fe:	e0 90 df 07 	lds	r14, 0x07DF	; 0x8007df <VAnalogTemp+0x2>
     302:	f0 90 e0 07 	lds	r15, 0x07E0	; 0x8007e0 <VAnalogTemp+0x3>
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 ee       	ldi	r20, 0xE0	; 224
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	c7 01       	movw	r24, r14
     310:	b6 01       	movw	r22, r12
     312:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__gesf2>
     316:	18 16       	cp	r1, r24
     318:	6c f4       	brge	.+26     	; 0x334 <TEMP_ControlAC+0x46>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	8c e1       	ldi	r24, 0x1C	; 28
     31e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	8b e1       	ldi	r24, 0x1B	; 27
     326:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	8f e1       	ldi	r24, 0x1F	; 31
     32e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     332:	16 c0       	rjmp	.+44     	; 0x360 <TEMP_ControlAC+0x72>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	40 ee       	ldi	r20, 0xE0	; 224
     33a:	51 e4       	ldi	r21, 0x41	; 65
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 12 19 	call	0x3224	; 0x3224 <__cmpsf2>
     344:	88 23       	and	r24, r24
     346:	64 f4       	brge	.+24     	; 0x360 <TEMP_ControlAC+0x72>
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	8c e1       	ldi	r24, 0x1C	; 28
     34c:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	8b e1       	ldi	r24, 0x1B	; 27
     354:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	86 e1       	ldi	r24, 0x16	; 22
     35c:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	08 95       	ret

0000036a <TEMP_Check>:
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <ADC_read>
     370:	90 93 e2 07 	sts	0x07E2, r25	; 0x8007e2 <VDigitalTemp+0x1>
     374:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <VDigitalTemp>
     378:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <ADC_convertAnalog>
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	48 ec       	ldi	r20, 0xC8	; 200
     382:	52 e4       	ldi	r21, 0x42	; 66
     384:	0e 94 04 1a 	call	0x3408	; 0x3408 <__mulsf3>
     388:	60 93 dd 07 	sts	0x07DD, r22	; 0x8007dd <VAnalogTemp>
     38c:	70 93 de 07 	sts	0x07DE, r23	; 0x8007de <VAnalogTemp+0x1>
     390:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <VAnalogTemp+0x2>
     394:	90 93 e0 07 	sts	0x07E0, r25	; 0x8007e0 <VAnalogTemp+0x3>
     398:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_clearDis>
     39c:	8f e7       	ldi	r24, 0x7F	; 127
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_sendStr>
     3a4:	60 91 dd 07 	lds	r22, 0x07DD	; 0x8007dd <VAnalogTemp>
     3a8:	70 91 de 07 	lds	r23, 0x07DE	; 0x8007de <VAnalogTemp+0x1>
     3ac:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <VAnalogTemp+0x2>
     3b0:	90 91 e0 07 	lds	r25, 0x07E0	; 0x8007e0 <VAnalogTemp+0x3>
     3b4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_sendFloatNum>
     3b8:	83 e4       	ldi	r24, 0x43	; 67
     3ba:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
     3be:	0e 94 77 01 	call	0x2ee	; 0x2ee <TEMP_ControlAC>
     3c2:	08 95       	ret

000003c4 <LIGHTING_Start>:
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	19 f0       	breq	.+6      	; 0x3ce <LIGHTING_Start+0xa>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	29 f0       	breq	.+10     	; 0x3d6 <LIGHTING_Start+0x12>
     3cc:	08 95       	ret
     3ce:	87 e1       	ldi	r24, 0x17	; 23
     3d0:	0e 94 40 17 	call	0x2e80	; 0x2e80 <DIO_togglePinValue>
     3d4:	08 95       	ret
     3d6:	82 e1       	ldi	r24, 0x12	; 18
     3d8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <DIO_togglePinValue>
     3dc:	08 95       	ret

000003de <INPUT_Read>:
     3de:	0e 94 83 13 	call	0x2706	; 0x2706 <KPD_read>
     3e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Keypad_Press_KPD.2483>
     3e6:	0e 94 73 18 	call	0x30e6	; 0x30e6 <UART_receiveData>
     3ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     3ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Keypad_Press_KPD.2483>
     3f2:	98 37       	cpi	r25, 0x78	; 120
     3f4:	39 f0       	breq	.+14     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3f6:	0e 94 83 13 	call	0x2706	; 0x2706 <KPD_read>
     3fa:	88 37       	cpi	r24, 0x78	; 120
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <INPUT_Read+0x18>
     3fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Keypad_Press_KPD.2483>
     402:	08 95       	ret
     404:	88 37       	cpi	r24, 0x78	; 120
     406:	39 f0       	breq	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     408:	0e 94 73 18 	call	0x30e6	; 0x30e6 <UART_receiveData>
     40c:	88 37       	cpi	r24, 0x78	; 120
     40e:	e1 f7       	brne	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     410:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
     414:	08 95       	ret
     416:	08 95       	ret

00000418 <OptionsTask>:
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	be 01       	movw	r22, r28
     428:	6f 5f       	subi	r22, 0xFF	; 255
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <xQueue>
     430:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <xQueue+0x1>
     434:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueReceive>
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	09 f0       	breq	.+2      	; 0x43e <OptionsTask+0x26>
     43c:	84 c0       	rjmp	.+264    	; 0x546 <OptionsTask+0x12e>
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	41 e0       	ldi	r20, 0x01	; 1
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <LoginEventGroup>
     44e:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <LoginEventGroup+0x1>
     452:	0e 94 c7 03 	call	0x78e	; 0x78e <xEventGroupWaitBits>
     456:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <uxBits+0x1>
     45a:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <uxBits>
     45e:	9c 01       	movw	r18, r24
     460:	21 70       	andi	r18, 0x01	; 1
     462:	33 27       	eor	r19, r19
     464:	80 ff       	sbrs	r24, 0
     466:	19 c0       	rjmp	.+50     	; 0x49a <OptionsTask+0x82>
     468:	87 e8       	ldi	r24, 0x87	; 135
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_sendStr>
     470:	0e 94 73 18 	call	0x30e6	; 0x30e6 <UART_receiveData>
     474:	81 33       	cpi	r24, 0x31	; 49
     476:	29 f4       	brne	.+10     	; 0x482 <OptionsTask+0x6a>
     478:	80 ea       	ldi	r24, 0xA0	; 160
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_sendStr>
     480:	62 c0       	rjmp	.+196    	; 0x546 <OptionsTask+0x12e>
     482:	0e 94 73 18 	call	0x30e6	; 0x30e6 <UART_receiveData>
     486:	82 33       	cpi	r24, 0x32	; 50
     488:	09 f0       	breq	.+2      	; 0x48c <OptionsTask+0x74>
     48a:	5d c0       	rjmp	.+186    	; 0x546 <OptionsTask+0x12e>
     48c:	0e 94 b5 01 	call	0x36a	; 0x36a <TEMP_Check>
     490:	84 eb       	ldi	r24, 0xB4	; 180
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_sendStr>
     498:	56 c0       	rjmp	.+172    	; 0x546 <OptionsTask+0x12e>
     49a:	23 2b       	or	r18, r19
     49c:	09 f0       	breq	.+2      	; 0x4a0 <OptionsTask+0x88>
     49e:	53 c0       	rjmp	.+166    	; 0x546 <OptionsTask+0x12e>
     4a0:	85 ec       	ldi	r24, 0xC5	; 197
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_sendStr>
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_GoTo>
     4b0:	0e 94 ef 01 	call	0x3de	; 0x3de <INPUT_Read>
     4b4:	81 33       	cpi	r24, 0x31	; 49
     4b6:	19 f4       	brne	.+6      	; 0x4be <OptionsTask+0xa6>
     4b8:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
     4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <OptionsTask+0xc0>
     4be:	0e 94 ef 01 	call	0x3de	; 0x3de <INPUT_Read>
     4c2:	82 33       	cpi	r24, 0x32	; 50
     4c4:	19 f4       	brne	.+6      	; 0x4cc <OptionsTask+0xb4>
     4c6:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
     4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <OptionsTask+0xc0>
     4cc:	0e 94 ef 01 	call	0x3de	; 0x3de <INPUT_Read>
     4d0:	83 33       	cpi	r24, 0x33	; 51
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <OptionsTask+0xc0>
     4d4:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
     4d8:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_clearDis>
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_GoTo>
     4e4:	8c ed       	ldi	r24, 0xDC	; 220
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_sendStr>
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_GoTo>
     4f4:	0e 94 ef 01 	call	0x3de	; 0x3de <INPUT_Read>
     4f8:	81 33       	cpi	r24, 0x31	; 49
     4fa:	31 f4       	brne	.+12     	; 0x508 <OptionsTask+0xf0>
     4fc:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LIGHTING_Start>
     506:	09 c0       	rjmp	.+18     	; 0x51a <OptionsTask+0x102>
     508:	0e 94 ef 01 	call	0x3de	; 0x3de <INPUT_Read>
     50c:	82 33       	cpi	r24, 0x32	; 50
     50e:	29 f4       	brne	.+10     	; 0x51a <OptionsTask+0x102>
     510:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LIGHTING_Start>
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_GoTo>
     522:	0e 94 b5 01 	call	0x36a	; 0x36a <TEMP_Check>
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_GoTo>
     52e:	86 eb       	ldi	r24, 0xB6	; 182
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_sendStr>
     536:	0e 94 ef 01 	call	0x3de	; 0x3de <INPUT_Read>
     53a:	0e 94 ef 01 	call	0x3de	; 0x3de <INPUT_Read>
     53e:	81 33       	cpi	r24, 0x31	; 49
     540:	11 f4       	brne	.+4      	; 0x546 <OptionsTask+0x12e>
     542:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
     546:	84 ef       	ldi	r24, 0xF4	; 244
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <vTaskDelay>
     54e:	69 cf       	rjmp	.-302    	; 0x422 <OptionsTask+0xa>

00000550 <HOLD_Start>:
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	86 e1       	ldi	r24, 0x16	; 22
     554:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     558:	8a e3       	ldi	r24, 0x3A	; 58
     55a:	8a 95       	dec	r24
     55c:	f1 f7       	brne	.-4      	; 0x55a <HOLD_Start+0xa>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <HOLD_Start+0x10>
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	86 e1       	ldi	r24, 0x16	; 22
     564:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
     568:	08 95       	ret

0000056a <HOLD_Retrun>:
     56a:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <dis>
     56e:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <dis+0x1>
     572:	08 95       	ret

00000574 <DOORCONTROL_Start>:
     574:	83 ef       	ldi	r24, 0xF3	; 243
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 23 18 	call	0x3046	; 0x3046 <TIMER1_setOcr>
     57c:	0e 94 a8 02 	call	0x550	; 0x550 <HOLD_Start>
     580:	0e 94 b5 02 	call	0x56a	; 0x56a <HOLD_Retrun>
     584:	4f 97       	sbiw	r24, 0x1f	; 31
     586:	30 f0       	brcs	.+12     	; 0x594 <DOORCONTROL_Start+0x20>
     588:	87 e7       	ldi	r24, 0x77	; 119
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 23 18 	call	0x3046	; 0x3046 <TIMER1_setOcr>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	08 95       	ret
     594:	08 95       	ret

00000596 <DoorControlTask>:
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	1f 92       	push	r1
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <xQueue>
     5ae:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <xQueue+0x1>
     5b2:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueReceive>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	29 f4       	brne	.+10     	; 0x5c4 <DoorControlTask+0x2e>
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	11 f4       	brne	.+4      	; 0x5c4 <DoorControlTask+0x2e>
     5c0:	0e 94 ba 02 	call	0x574	; 0x574 <DOORCONTROL_Start>
     5c4:	8a ef       	ldi	r24, 0xFA	; 250
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <vTaskDelay>
     5cc:	e9 cf       	rjmp	.-46     	; 0x5a0 <DoorControlTask+0xa>

000005ce <CheckDataForUser>:
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <CheckDataForUser+0x8>
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <CheckDataForUser+0xa>
     5d8:	1f 92       	push	r1
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	10 c0       	rjmp	.+32     	; 0x602 <CheckDataForUser+0x34>
     5e2:	2f ef       	ldi	r18, 0xFF	; 255
     5e4:	81 ee       	ldi	r24, 0xE1	; 225
     5e6:	94 e0       	ldi	r25, 0x04	; 4
     5e8:	21 50       	subi	r18, 0x01	; 1
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	90 40       	sbci	r25, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <CheckDataForUser+0x1a>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <CheckDataForUser+0x24>
     5f2:	00 00       	nop
     5f4:	61 2f       	mov	r22, r17
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	ce 01       	movw	r24, r28
     5fa:	05 96       	adiw	r24, 0x05	; 5
     5fc:	0e 94 25 13 	call	0x264a	; 0x264a <EEPROM_ReadByteNACK>
     600:	1f 5f       	subi	r17, 0xFF	; 255
     602:	14 30       	cpi	r17, 0x04	; 4
     604:	70 f3       	brcs	.-36     	; 0x5e2 <CheckDataForUser+0x14>
     606:	0e 94 83 13 	call	0x2706	; 0x2706 <KPD_read>
     60a:	18 2f       	mov	r17, r24
     60c:	88 37       	cpi	r24, 0x78	; 120
     60e:	51 f0       	breq	.+20     	; 0x624 <CheckDataForUser+0x56>
     610:	0e 94 83 13 	call	0x2706	; 0x2706 <KPD_read>
     614:	88 37       	cpi	r24, 0x78	; 120
     616:	e1 f7       	brne	.-8      	; 0x610 <CheckDataForUser+0x42>
     618:	81 2f       	mov	r24, r17
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	c0 97       	sbiw	r24, 0x30	; 48
     61e:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <LCD_sendNum>
     622:	0b c0       	rjmp	.+22     	; 0x63a <CheckDataForUser+0x6c>
     624:	88 37       	cpi	r24, 0x78	; 120
     626:	49 f0       	breq	.+18     	; 0x63a <CheckDataForUser+0x6c>
     628:	0e 94 83 13 	call	0x2706	; 0x2706 <KPD_read>
     62c:	88 37       	cpi	r24, 0x78	; 120
     62e:	e1 f7       	brne	.-8      	; 0x628 <CheckDataForUser+0x5a>
     630:	81 2f       	mov	r24, r17
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	c0 97       	sbiw	r24, 0x30	; 48
     636:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <LCD_sendNum>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	08 95       	ret

0000064e <LoginTask>:
     64e:	0e 94 87 00 	call	0x10e	; 0x10e <CheckPasswordAdmin>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	49 f4       	brne	.+18     	; 0x668 <LoginTask+0x1a>
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <LoginEventGroup>
     65e:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <LoginEventGroup+0x1>
     662:	0e 94 48 04 	call	0x890	; 0x890 <xEventGroupSetBits>
     666:	f3 cf       	rjmp	.-26     	; 0x64e <LoginTask>
     668:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CheckDataForUser>
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	79 f7       	brne	.-34     	; 0x64e <LoginTask>
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <LoginEventGroup>
     678:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <LoginEventGroup+0x1>
     67c:	0e 94 39 04 	call	0x872	; 0x872 <xEventGroupClearBits>
     680:	e6 cf       	rjmp	.-52     	; 0x64e <LoginTask>

00000682 <source_code>:
}


//Source Code
int source_code()
{
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	2a 97       	sbiw	r28, 0x0a	; 10
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
	TaskHandle_t xHandle1;
	TaskHandle_t xHandle2;
	TaskHandle_t xHandle3;
	TaskHandle_t xHandle4;
	TaskHandle_t xHandle5;
	LoginEventGroup = xEventGroupCreate();
     696:	0e 94 b4 03 	call	0x768	; 0x768 <xEventGroupCreate>
     69a:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <LoginEventGroup+0x1>
     69e:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <LoginEventGroup>
	xQueue = xQueueCreate( 10, sizeof( u8 ) );
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	8a e0       	ldi	r24, 0x0A	; 10
     6a8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericCreate>
     6ac:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <xQueue+0x1>
     6b0:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <xQueue>
	xTaskCreate(Code_APPInitDriversTask,NULL,100,NULL,3,&xHandle1);
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	7c 01       	movw	r14, r24
     6ba:	03 e0       	ldi	r16, 0x03	; 3
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	44 e6       	ldi	r20, 0x64	; 100
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	87 e5       	ldi	r24, 0x57	; 87
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 2f 0b 	call	0x165e	; 0x165e <xTaskCreate>
	xTaskCreate(UARTInputTask,NULL,100,NULL,2,&xHandle2);
     6d0:	ce 01       	movw	r24, r28
     6d2:	03 96       	adiw	r24, 0x03	; 3
     6d4:	7c 01       	movw	r14, r24
     6d6:	02 e0       	ldi	r16, 0x02	; 2
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	44 e6       	ldi	r20, 0x64	; 100
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	8a e6       	ldi	r24, 0x6A	; 106
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 2f 0b 	call	0x165e	; 0x165e <xTaskCreate>
	xTaskCreate(LoginTask,NULL,100,NULL,1,&xHandle3);
     6ec:	ce 01       	movw	r24, r28
     6ee:	05 96       	adiw	r24, 0x05	; 5
     6f0:	7c 01       	movw	r14, r24
     6f2:	01 e0       	ldi	r16, 0x01	; 1
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	44 e6       	ldi	r20, 0x64	; 100
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	87 e2       	ldi	r24, 0x27	; 39
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 2f 0b 	call	0x165e	; 0x165e <xTaskCreate>
	xTaskCreate(OptionsTask,NULL,100,NULL,1,&xHandle4);
     708:	ce 01       	movw	r24, r28
     70a:	07 96       	adiw	r24, 0x07	; 7
     70c:	7c 01       	movw	r14, r24
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	44 e6       	ldi	r20, 0x64	; 100
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	8c e0       	ldi	r24, 0x0C	; 12
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 2f 0b 	call	0x165e	; 0x165e <xTaskCreate>
	xTaskCreate(DoorControlTask,NULL,100,NULL,1,&xHandle5);
     722:	ce 01       	movw	r24, r28
     724:	09 96       	adiw	r24, 0x09	; 9
     726:	7c 01       	movw	r14, r24
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	44 e6       	ldi	r20, 0x64	; 100
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	8b ec       	ldi	r24, 0xCB	; 203
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	0e 94 2f 0b 	call	0x165e	; 0x165e <xTaskCreate>
	vTaskStartScheduler();
     73c:	0e 94 88 0b 	call	0x1710	; 0x1710 <vTaskStartScheduler>
     740:	ff cf       	rjmp	.-2      	; 0x740 <source_code+0xbe>

00000742 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     742:	41 11       	cpse	r20, r1
     744:	06 c0       	rjmp	.+12     	; 0x752 <prvTestWaitCondition+0x10>
     746:	68 23       	and	r22, r24
     748:	79 23       	and	r23, r25
     74a:	67 2b       	or	r22, r23
     74c:	49 f4       	brne	.+18     	; 0x760 <prvTestWaitCondition+0x1e>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	08 95       	ret
     752:	86 23       	and	r24, r22
     754:	97 23       	and	r25, r23
     756:	68 17       	cp	r22, r24
     758:	79 07       	cpc	r23, r25
     75a:	21 f0       	breq	.+8      	; 0x764 <prvTestWaitCondition+0x22>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	08 95       	ret
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	08 95       	ret
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	08 95       	ret

00000768 <xEventGroupCreate>:
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	8b e0       	ldi	r24, 0x0B	; 11
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 ac 04 	call	0x958	; 0x958 <pvPortMalloc>
     774:	ec 01       	movw	r28, r24
     776:	00 97       	sbiw	r24, 0x00	; 0
     778:	31 f0       	breq	.+12     	; 0x786 <xEventGroupCreate+0x1e>
     77a:	fc 01       	movw	r30, r24
     77c:	11 92       	st	Z+, r1
     77e:	11 92       	st	Z+, r1
     780:	cf 01       	movw	r24, r30
     782:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
     786:	ce 01       	movw	r24, r28
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <xEventGroupWaitBits>:
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	7c 01       	movw	r14, r24
     7a4:	5b 01       	movw	r10, r22
     7a6:	c4 2e       	mov	r12, r20
     7a8:	d2 2e       	mov	r13, r18
     7aa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <vTaskSuspendAll>
     7ae:	f7 01       	movw	r30, r14
     7b0:	c0 81       	ld	r28, Z
     7b2:	d1 81       	ldd	r29, Z+1	; 0x01
     7b4:	4d 2d       	mov	r20, r13
     7b6:	b5 01       	movw	r22, r10
     7b8:	ce 01       	movw	r24, r28
     7ba:	0e 94 a1 03 	call	0x742	; 0x742 <prvTestWaitCondition>
     7be:	88 23       	and	r24, r24
     7c0:	69 f0       	breq	.+26     	; 0x7dc <xEventGroupWaitBits+0x4e>
     7c2:	cc 20       	and	r12, r12
     7c4:	09 f1       	breq	.+66     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7c6:	c5 01       	movw	r24, r10
     7c8:	80 95       	com	r24
     7ca:	90 95       	com	r25
     7cc:	8c 23       	and	r24, r28
     7ce:	9d 23       	and	r25, r29
     7d0:	f7 01       	movw	r30, r14
     7d2:	91 83       	std	Z+1, r25	; 0x01
     7d4:	80 83       	st	Z, r24
     7d6:	00 e0       	ldi	r16, 0x00	; 0
     7d8:	10 e0       	ldi	r17, 0x00	; 0
     7da:	18 c0       	rjmp	.+48     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7dc:	01 15       	cp	r16, r1
     7de:	11 05       	cpc	r17, r1
     7e0:	a9 f0       	breq	.+42     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7e2:	c1 10       	cpse	r12, r1
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <xEventGroupWaitBits+0x5e>
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <xEventGroupWaitBits+0x62>
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	71 e0       	ldi	r23, 0x01	; 1
     7f0:	d1 10       	cpse	r13, r1
     7f2:	74 60       	ori	r23, 0x04	; 4
     7f4:	6a 29       	or	r22, r10
     7f6:	7b 29       	or	r23, r11
     7f8:	a8 01       	movw	r20, r16
     7fa:	c7 01       	movw	r24, r14
     7fc:	02 96       	adiw	r24, 0x02	; 2
     7fe:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <vTaskPlaceOnUnorderedEventList>
     802:	c0 e0       	ldi	r28, 0x00	; 0
     804:	d0 e0       	ldi	r29, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
     810:	01 2b       	or	r16, r17
     812:	19 f1       	breq	.+70     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     814:	81 11       	cpse	r24, r1
     816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     818:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
     81c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <uxTaskResetEventItemValue>
     820:	ec 01       	movw	r28, r24
     822:	91 fd       	sbrc	r25, 1
     824:	19 c0       	rjmp	.+50     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	0f 92       	push	r0
     82c:	f7 01       	movw	r30, r14
     82e:	c0 81       	ld	r28, Z
     830:	d1 81       	ldd	r29, Z+1	; 0x01
     832:	4d 2d       	mov	r20, r13
     834:	b5 01       	movw	r22, r10
     836:	ce 01       	movw	r24, r28
     838:	0e 94 a1 03 	call	0x742	; 0x742 <prvTestWaitCondition>
     83c:	88 23       	and	r24, r24
     83e:	51 f0       	breq	.+20     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     840:	cc 20       	and	r12, r12
     842:	41 f0       	breq	.+16     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     844:	b5 01       	movw	r22, r10
     846:	60 95       	com	r22
     848:	70 95       	com	r23
     84a:	6c 23       	and	r22, r28
     84c:	7d 23       	and	r23, r29
     84e:	f7 01       	movw	r30, r14
     850:	71 83       	std	Z+1, r23	; 0x01
     852:	60 83       	st	Z, r22
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	dd 27       	eor	r29, r29
     85a:	ce 01       	movw	r24, r28
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	af 90       	pop	r10
     870:	08 95       	ret

00000872 <xEventGroupClearBits>:
     872:	fc 01       	movw	r30, r24
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	0f 92       	push	r0
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	60 95       	com	r22
     880:	70 95       	com	r23
     882:	68 23       	and	r22, r24
     884:	79 23       	and	r23, r25
     886:	71 83       	std	Z+1, r23	; 0x01
     888:	60 83       	st	Z, r22
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	08 95       	ret

00000890 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	7c 01       	movw	r14, r24
     8a2:	8b 01       	movw	r16, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8a4:	ec 01       	movw	r28, r24
     8a6:	25 96       	adiw	r28, 0x05	; 5
    vTaskSuspendAll();
     8a8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     8ac:	d7 01       	movw	r26, r14
     8ae:	17 96       	adiw	r26, 0x07	; 7
     8b0:	ed 91       	ld	r30, X+
     8b2:	fc 91       	ld	r31, X
     8b4:	18 97       	sbiw	r26, 0x08	; 8

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     8b6:	8d 91       	ld	r24, X+
     8b8:	9c 91       	ld	r25, X
     8ba:	11 97       	sbiw	r26, 0x01	; 1
     8bc:	08 2b       	or	r16, r24
     8be:	19 2b       	or	r17, r25
     8c0:	0d 93       	st	X+, r16
     8c2:	1c 93       	st	X, r17
{
    ListItem_t * pxListItem;
    ListItem_t * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     8c4:	00 e0       	ldi	r16, 0x00	; 0
     8c6:	10 e0       	ldi	r17, 0x00	; 0

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8c8:	2d c0       	rjmp	.+90     	; 0x924 <xEventGroupSetBits+0x94>
        {
            pxNext = listGET_NEXT( pxListItem );
     8ca:	c2 80       	ldd	r12, Z+2	; 0x02
     8cc:	d3 80       	ldd	r13, Z+3	; 0x03
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     8d2:	9c 01       	movw	r18, r24
     8d4:	33 27       	eor	r19, r19

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     8d6:	92 fd       	sbrc	r25, 2
     8d8:	09 c0       	rjmp	.+18     	; 0x8ec <xEventGroupSetBits+0x5c>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     8da:	d7 01       	movw	r26, r14
     8dc:	4d 91       	ld	r20, X+
     8de:	5c 91       	ld	r21, X
     8e0:	42 23       	and	r20, r18
     8e2:	53 23       	and	r21, r19
     8e4:	45 2b       	or	r20, r21
     8e6:	61 f4       	brne	.+24     	; 0x900 <xEventGroupSetBits+0x70>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	0d c0       	rjmp	.+26     	; 0x906 <xEventGroupSetBits+0x76>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     8ec:	d7 01       	movw	r26, r14
     8ee:	4d 91       	ld	r20, X+
     8f0:	5c 91       	ld	r21, X
     8f2:	42 23       	and	r20, r18
     8f4:	53 23       	and	r21, r19
     8f6:	24 17       	cp	r18, r20
     8f8:	35 07       	cpc	r19, r21
     8fa:	21 f0       	breq	.+8      	; 0x904 <xEventGroupSetBits+0x74>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <xEventGroupSetBits+0x76>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	01 c0       	rjmp	.+2      	; 0x906 <xEventGroupSetBits+0x76>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     904:	41 e0       	ldi	r20, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     906:	44 23       	and	r20, r20
     908:	59 f0       	breq	.+22     	; 0x920 <xEventGroupSetBits+0x90>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     90a:	90 ff       	sbrs	r25, 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <xEventGroupSetBits+0x82>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     90e:	02 2b       	or	r16, r18
     910:	13 2b       	or	r17, r19
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     912:	d7 01       	movw	r26, r14
     914:	6d 91       	ld	r22, X+
     916:	7c 91       	ld	r23, X
     918:	72 60       	ori	r23, 0x02	; 2
     91a:	cf 01       	movw	r24, r30
     91c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     920:	ec 2d       	mov	r30, r12
     922:	fd 2d       	mov	r31, r13

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     924:	ec 17       	cp	r30, r28
     926:	fd 07       	cpc	r31, r29
     928:	81 f6       	brne	.-96     	; 0x8ca <xEventGroupSetBits+0x3a>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     92a:	00 95       	com	r16
     92c:	10 95       	com	r17
     92e:	f7 01       	movw	r30, r14
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	08 23       	and	r16, r24
     936:	19 23       	and	r17, r25
     938:	11 83       	std	Z+1, r17	; 0x01
     93a:	00 83       	st	Z, r16
    }
    ( void ) xTaskResumeAll();
     93c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
}
     940:	d7 01       	movw	r26, r14
     942:	8d 91       	ld	r24, X+
     944:	9c 91       	ld	r25, X
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	08 95       	ret

00000958 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
     95e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     962:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pucAlignedHeap.2112>
     966:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <pucAlignedHeap.2112+0x1>
     96a:	89 2b       	or	r24, r25
     96c:	31 f4       	brne	.+12     	; 0x97a <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     96e:	86 e1       	ldi	r24, 0x16	; 22
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <pucAlignedHeap.2112+0x1>
     976:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pucAlignedHeap.2112>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     97a:	20 97       	sbiw	r28, 0x00	; 0
     97c:	c9 f0       	breq	.+50     	; 0x9b0 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     97e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <xNextFreeByte>
     982:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <xNextFreeByte+0x1>
     986:	9e 01       	movw	r18, r28
     988:	28 0f       	add	r18, r24
     98a:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     98c:	2f 33       	cpi	r18, 0x3F	; 63
     98e:	46 e0       	ldi	r20, 0x06	; 6
     990:	34 07       	cpc	r19, r20
     992:	88 f4       	brcc	.+34     	; 0x9b6 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     994:	82 17       	cp	r24, r18
     996:	93 07       	cpc	r25, r19
     998:	88 f4       	brcc	.+34     	; 0x9bc <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     99a:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <pucAlignedHeap.2112>
     99e:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <pucAlignedHeap.2112+0x1>
     9a2:	c8 0f       	add	r28, r24
     9a4:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     9a6:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <xNextFreeByte+0x1>
     9aa:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <xNextFreeByte>
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <pvPortMalloc+0x68>
     9b6:	c0 e0       	ldi	r28, 0x00	; 0
     9b8:	d0 e0       	ldi	r29, 0x00	; 0
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <pvPortMalloc+0x68>
     9bc:	c0 e0       	ldi	r28, 0x00	; 0
     9be:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     9c0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     9c4:	ce 01       	movw	r24, r28
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     9cc:	08 95       	ret

000009ce <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     9ce:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9d0:	03 96       	adiw	r24, 0x03	; 3
     9d2:	92 83       	std	Z+2, r25	; 0x02
     9d4:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     9d6:	2f ef       	ldi	r18, 0xFF	; 255
     9d8:	3f ef       	ldi	r19, 0xFF	; 255
     9da:	34 83       	std	Z+4, r19	; 0x04
     9dc:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9de:	96 83       	std	Z+6, r25	; 0x06
     9e0:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9e2:	90 87       	std	Z+8, r25	; 0x08
     9e4:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     9e6:	10 82       	st	Z, r1
     9e8:	08 95       	ret

000009ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     9ea:	fc 01       	movw	r30, r24
     9ec:	11 86       	std	Z+9, r1	; 0x09
     9ee:	10 86       	std	Z+8, r1	; 0x08
     9f0:	08 95       	ret

000009f2 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	9c 01       	movw	r18, r24
     9f8:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     9fa:	dc 01       	movw	r26, r24
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	cd 91       	ld	r28, X+
     a00:	dc 91       	ld	r29, X
     a02:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     a04:	d3 83       	std	Z+3, r29	; 0x03
     a06:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a08:	8c 81       	ldd	r24, Y+4	; 0x04
     a0a:	9d 81       	ldd	r25, Y+5	; 0x05
     a0c:	95 83       	std	Z+5, r25	; 0x05
     a0e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     a10:	8c 81       	ldd	r24, Y+4	; 0x04
     a12:	9d 81       	ldd	r25, Y+5	; 0x05
     a14:	dc 01       	movw	r26, r24
     a16:	13 96       	adiw	r26, 0x03	; 3
     a18:	7c 93       	st	X, r23
     a1a:	6e 93       	st	-X, r22
     a1c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     a1e:	7d 83       	std	Y+5, r23	; 0x05
     a20:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     a22:	31 87       	std	Z+9, r19	; 0x09
     a24:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     a26:	f9 01       	movw	r30, r18
     a28:	80 81       	ld	r24, Z
     a2a:	8f 5f       	subi	r24, 0xFF	; 255
     a2c:	80 83       	st	Z, r24
}
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a3a:	48 81       	ld	r20, Y
     a3c:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a3e:	4f 3f       	cpi	r20, 0xFF	; 255
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	52 07       	cpc	r21, r18
     a44:	21 f4       	brne	.+8      	; 0xa4e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a46:	fc 01       	movw	r30, r24
     a48:	a7 81       	ldd	r26, Z+7	; 0x07
     a4a:	b0 85       	ldd	r27, Z+8	; 0x08
     a4c:	0d c0       	rjmp	.+26     	; 0xa68 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a4e:	dc 01       	movw	r26, r24
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <vListInsert+0x22>
     a54:	df 01       	movw	r26, r30
     a56:	12 96       	adiw	r26, 0x02	; 2
     a58:	ed 91       	ld	r30, X+
     a5a:	fc 91       	ld	r31, X
     a5c:	13 97       	sbiw	r26, 0x03	; 3
     a5e:	20 81       	ld	r18, Z
     a60:	31 81       	ldd	r19, Z+1	; 0x01
     a62:	42 17       	cp	r20, r18
     a64:	53 07       	cpc	r21, r19
     a66:	b0 f7       	brcc	.-20     	; 0xa54 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a68:	12 96       	adiw	r26, 0x02	; 2
     a6a:	ed 91       	ld	r30, X+
     a6c:	fc 91       	ld	r31, X
     a6e:	13 97       	sbiw	r26, 0x03	; 3
     a70:	fb 83       	std	Y+3, r31	; 0x03
     a72:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a74:	d5 83       	std	Z+5, r29	; 0x05
     a76:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     a78:	bd 83       	std	Y+5, r27	; 0x05
     a7a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     a7c:	13 96       	adiw	r26, 0x03	; 3
     a7e:	dc 93       	st	X, r29
     a80:	ce 93       	st	-X, r28
     a82:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a84:	99 87       	std	Y+9, r25	; 0x09
     a86:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     a88:	fc 01       	movw	r30, r24
     a8a:	20 81       	ld	r18, Z
     a8c:	2f 5f       	subi	r18, 0xFF	; 255
     a8e:	20 83       	st	Z, r18
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a9c:	a0 85       	ldd	r26, Z+8	; 0x08
     a9e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     aa0:	c2 81       	ldd	r28, Z+2	; 0x02
     aa2:	d3 81       	ldd	r29, Z+3	; 0x03
     aa4:	84 81       	ldd	r24, Z+4	; 0x04
     aa6:	95 81       	ldd	r25, Z+5	; 0x05
     aa8:	9d 83       	std	Y+5, r25	; 0x05
     aaa:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     aac:	c4 81       	ldd	r28, Z+4	; 0x04
     aae:	d5 81       	ldd	r29, Z+5	; 0x05
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	9b 83       	std	Y+3, r25	; 0x03
     ab6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ab8:	11 96       	adiw	r26, 0x01	; 1
     aba:	8d 91       	ld	r24, X+
     abc:	9c 91       	ld	r25, X
     abe:	12 97       	sbiw	r26, 0x02	; 2
     ac0:	e8 17       	cp	r30, r24
     ac2:	f9 07       	cpc	r31, r25
     ac4:	31 f4       	brne	.+12     	; 0xad2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ac6:	84 81       	ldd	r24, Z+4	; 0x04
     ac8:	95 81       	ldd	r25, Z+5	; 0x05
     aca:	12 96       	adiw	r26, 0x02	; 2
     acc:	9c 93       	st	X, r25
     ace:	8e 93       	st	-X, r24
     ad0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ad2:	11 86       	std	Z+9, r1	; 0x09
     ad4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     ad6:	8c 91       	ld	r24, X
     ad8:	81 50       	subi	r24, 0x01	; 1
     ada:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     adc:	8c 91       	ld	r24, X
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     ae4:	1b bc       	out	0x2b, r1	; 43
     ae6:	89 ef       	ldi	r24, 0xF9	; 249
     ae8:	8a bd       	out	0x2a, r24	; 42
     aea:	8b e0       	ldi	r24, 0x0B	; 11
     aec:	8e bd       	out	0x2e, r24	; 46
     aee:	89 b7       	in	r24, 0x39	; 57
     af0:	80 61       	ori	r24, 0x10	; 16
     af2:	89 bf       	out	0x39, r24	; 57
     af4:	08 95       	ret

00000af6 <pxPortInitialiseStack>:
     af6:	31 e1       	ldi	r19, 0x11	; 17
     af8:	fc 01       	movw	r30, r24
     afa:	30 83       	st	Z, r19
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	22 e2       	ldi	r18, 0x22	; 34
     b00:	20 83       	st	Z, r18
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	a3 e3       	ldi	r26, 0x33	; 51
     b06:	a0 83       	st	Z, r26
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	60 83       	st	Z, r22
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	70 83       	st	Z, r23
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	10 82       	st	Z, r1
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	60 e8       	ldi	r22, 0x80	; 128
     b18:	60 83       	st	Z, r22
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	10 82       	st	Z, r1
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	60 83       	st	Z, r22
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	63 e0       	ldi	r22, 0x03	; 3
     b28:	60 83       	st	Z, r22
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	64 e0       	ldi	r22, 0x04	; 4
     b2e:	60 83       	st	Z, r22
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	65 e0       	ldi	r22, 0x05	; 5
     b34:	60 83       	st	Z, r22
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	66 e0       	ldi	r22, 0x06	; 6
     b3a:	60 83       	st	Z, r22
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	60 83       	st	Z, r22
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	68 e0       	ldi	r22, 0x08	; 8
     b46:	60 83       	st	Z, r22
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	69 e0       	ldi	r22, 0x09	; 9
     b4c:	60 83       	st	Z, r22
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	60 e1       	ldi	r22, 0x10	; 16
     b52:	60 83       	st	Z, r22
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	30 83       	st	Z, r19
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	32 e1       	ldi	r19, 0x12	; 18
     b5c:	30 83       	st	Z, r19
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	33 e1       	ldi	r19, 0x13	; 19
     b62:	30 83       	st	Z, r19
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	34 e1       	ldi	r19, 0x14	; 20
     b68:	30 83       	st	Z, r19
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	35 e1       	ldi	r19, 0x15	; 21
     b6e:	30 83       	st	Z, r19
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	36 e1       	ldi	r19, 0x16	; 22
     b74:	30 83       	st	Z, r19
     b76:	31 97       	sbiw	r30, 0x01	; 1
     b78:	37 e1       	ldi	r19, 0x17	; 23
     b7a:	30 83       	st	Z, r19
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	38 e1       	ldi	r19, 0x18	; 24
     b80:	30 83       	st	Z, r19
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	39 e1       	ldi	r19, 0x19	; 25
     b86:	30 83       	st	Z, r19
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	30 e2       	ldi	r19, 0x20	; 32
     b8c:	30 83       	st	Z, r19
     b8e:	31 97       	sbiw	r30, 0x01	; 1
     b90:	31 e2       	ldi	r19, 0x21	; 33
     b92:	30 83       	st	Z, r19
     b94:	31 97       	sbiw	r30, 0x01	; 1
     b96:	20 83       	st	Z, r18
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	23 e2       	ldi	r18, 0x23	; 35
     b9c:	20 83       	st	Z, r18
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	40 83       	st	Z, r20
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	50 83       	st	Z, r21
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	26 e2       	ldi	r18, 0x26	; 38
     baa:	20 83       	st	Z, r18
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	27 e2       	ldi	r18, 0x27	; 39
     bb0:	20 83       	st	Z, r18
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	28 e2       	ldi	r18, 0x28	; 40
     bb6:	20 83       	st	Z, r18
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	29 e2       	ldi	r18, 0x29	; 41
     bbc:	20 83       	st	Z, r18
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	20 e3       	ldi	r18, 0x30	; 48
     bc2:	20 83       	st	Z, r18
     bc4:	31 97       	sbiw	r30, 0x01	; 1
     bc6:	21 e3       	ldi	r18, 0x31	; 49
     bc8:	20 83       	st	Z, r18
     bca:	86 97       	sbiw	r24, 0x26	; 38
     bcc:	08 95       	ret

00000bce <xPortStartScheduler>:
     bce:	0e 94 72 05 	call	0xae4	; 0xae4 <prvSetupTimerInterrupt>
     bd2:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
     bd6:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
     bda:	cd 91       	ld	r28, X+
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	dd 91       	ld	r29, X+
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	bf 91       	pop	r27
     bec:	af 91       	pop	r26
     bee:	9f 91       	pop	r25
     bf0:	8f 91       	pop	r24
     bf2:	7f 91       	pop	r23
     bf4:	6f 91       	pop	r22
     bf6:	5f 91       	pop	r21
     bf8:	4f 91       	pop	r20
     bfa:	3f 91       	pop	r19
     bfc:	2f 91       	pop	r18
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	9f 90       	pop	r9
     c10:	8f 90       	pop	r8
     c12:	7f 90       	pop	r7
     c14:	6f 90       	pop	r6
     c16:	5f 90       	pop	r5
     c18:	4f 90       	pop	r4
     c1a:	3f 90       	pop	r3
     c1c:	2f 90       	pop	r2
     c1e:	1f 90       	pop	r1
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	08 95       	ret
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	08 95       	ret

00000c2c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	0f 92       	push	r0
     c34:	1f 92       	push	r1
     c36:	11 24       	eor	r1, r1
     c38:	2f 92       	push	r2
     c3a:	3f 92       	push	r3
     c3c:	4f 92       	push	r4
     c3e:	5f 92       	push	r5
     c40:	6f 92       	push	r6
     c42:	7f 92       	push	r7
     c44:	8f 92       	push	r8
     c46:	9f 92       	push	r9
     c48:	af 92       	push	r10
     c4a:	bf 92       	push	r11
     c4c:	cf 92       	push	r12
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	2f 93       	push	r18
     c5a:	3f 93       	push	r19
     c5c:	4f 93       	push	r20
     c5e:	5f 93       	push	r21
     c60:	6f 93       	push	r22
     c62:	7f 93       	push	r23
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	af 93       	push	r26
     c6a:	bf 93       	push	r27
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
     c74:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
     c78:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
     c7c:	0d b6       	in	r0, 0x3d	; 61
     c7e:	0d 92       	st	X+, r0
     c80:	0e b6       	in	r0, 0x3e	; 62
     c82:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     c84:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     c88:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
     c8c:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
     c90:	cd 91       	ld	r28, X+
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	dd 91       	ld	r29, X+
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	ff 91       	pop	r31
     c9a:	ef 91       	pop	r30
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	9f 90       	pop	r9
     cc6:	8f 90       	pop	r8
     cc8:	7f 90       	pop	r7
     cca:	6f 90       	pop	r6
     ccc:	5f 90       	pop	r5
     cce:	4f 90       	pop	r4
     cd0:	3f 90       	pop	r3
     cd2:	2f 90       	pop	r2
     cd4:	1f 90       	pop	r1
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0

	asm volatile ( "ret" );
     cdc:	08 95       	ret

00000cde <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	0f 92       	push	r0
     ce6:	1f 92       	push	r1
     ce8:	11 24       	eor	r1, r1
     cea:	2f 92       	push	r2
     cec:	3f 92       	push	r3
     cee:	4f 92       	push	r4
     cf0:	5f 92       	push	r5
     cf2:	6f 92       	push	r6
     cf4:	7f 92       	push	r7
     cf6:	8f 92       	push	r8
     cf8:	9f 92       	push	r9
     cfa:	af 92       	push	r10
     cfc:	bf 92       	push	r11
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ef 93       	push	r30
     d24:	ff 93       	push	r31
     d26:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
     d2a:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
     d2e:	0d b6       	in	r0, 0x3d	; 61
     d30:	0d 92       	st	X+, r0
     d32:	0e b6       	in	r0, 0x3e	; 62
     d34:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     d36:	0e 94 c8 0b 	call	0x1790	; 0x1790 <xTaskIncrementTick>
     d3a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     d3c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     d40:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
     d44:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
     d48:	cd 91       	ld	r28, X+
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	dd 91       	ld	r29, X+
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	9f 90       	pop	r9
     d7e:	8f 90       	pop	r8
     d80:	7f 90       	pop	r7
     d82:	6f 90       	pop	r6
     d84:	5f 90       	pop	r5
     d86:	4f 90       	pop	r4
     d88:	3f 90       	pop	r3
     d8a:	2f 90       	pop	r2
     d8c:	1f 90       	pop	r1
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d94:	08 95       	ret

00000d96 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     d96:	0e 94 6f 06 	call	0xcde	; 0xcde <vPortYieldFromTick>
		asm volatile ( "reti" );
     d9a:	18 95       	reti

00000d9c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	0f 92       	push	r0
     da2:	fc 01       	movw	r30, r24
     da4:	82 8d       	ldd	r24, Z+26	; 0x1a
     da6:	81 11       	cpse	r24, r1
     da8:	02 c0       	rjmp	.+4      	; 0xdae <prvIsQueueEmpty+0x12>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <prvIsQueueEmpty+0x14>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	08 95       	ret

00000db6 <prvIsQueueFull>:
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	0f 92       	push	r0
     dbc:	fc 01       	movw	r30, r24
     dbe:	22 8d       	ldd	r18, Z+26	; 0x1a
     dc0:	83 8d       	ldd	r24, Z+27	; 0x1b
     dc2:	28 13       	cpse	r18, r24
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <prvIsQueueFull+0x14>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <prvIsQueueFull+0x16>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	08 95       	ret

00000dd2 <prvCopyDataToQueue>:
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
     ddc:	04 2f       	mov	r16, r20
     dde:	1a 8d       	ldd	r17, Y+26	; 0x1a
     de0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     de2:	44 23       	and	r20, r20
     de4:	b9 f1       	breq	.+110    	; 0xe54 <prvCopyDataToQueue+0x82>
     de6:	01 11       	cpse	r16, r1
     de8:	16 c0       	rjmp	.+44     	; 0xe16 <prvCopyDataToQueue+0x44>
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	9b 81       	ldd	r25, Y+3	; 0x03
     df0:	0e 94 9f 1a 	call	0x353e	; 0x353e <memcpy>
     df4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	82 0f       	add	r24, r18
     dfc:	91 1d       	adc	r25, r1
     dfe:	9b 83       	std	Y+3, r25	; 0x03
     e00:	8a 83       	std	Y+2, r24	; 0x02
     e02:	2c 81       	ldd	r18, Y+4	; 0x04
     e04:	3d 81       	ldd	r19, Y+5	; 0x05
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	20 f1       	brcs	.+72     	; 0xe54 <prvCopyDataToQueue+0x82>
     e0c:	88 81       	ld	r24, Y
     e0e:	99 81       	ldd	r25, Y+1	; 0x01
     e10:	9b 83       	std	Y+3, r25	; 0x03
     e12:	8a 83       	std	Y+2, r24	; 0x02
     e14:	1f c0       	rjmp	.+62     	; 0xe54 <prvCopyDataToQueue+0x82>
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	8e 81       	ldd	r24, Y+6	; 0x06
     e1a:	9f 81       	ldd	r25, Y+7	; 0x07
     e1c:	0e 94 9f 1a 	call	0x353e	; 0x353e <memcpy>
     e20:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	91 95       	neg	r25
     e26:	81 95       	neg	r24
     e28:	91 09       	sbc	r25, r1
     e2a:	2e 81       	ldd	r18, Y+6	; 0x06
     e2c:	3f 81       	ldd	r19, Y+7	; 0x07
     e2e:	28 0f       	add	r18, r24
     e30:	39 1f       	adc	r19, r25
     e32:	3f 83       	std	Y+7, r19	; 0x07
     e34:	2e 83       	std	Y+6, r18	; 0x06
     e36:	48 81       	ld	r20, Y
     e38:	59 81       	ldd	r21, Y+1	; 0x01
     e3a:	24 17       	cp	r18, r20
     e3c:	35 07       	cpc	r19, r21
     e3e:	30 f4       	brcc	.+12     	; 0xe4c <prvCopyDataToQueue+0x7a>
     e40:	2c 81       	ldd	r18, Y+4	; 0x04
     e42:	3d 81       	ldd	r19, Y+5	; 0x05
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	9f 83       	std	Y+7, r25	; 0x07
     e4a:	8e 83       	std	Y+6, r24	; 0x06
     e4c:	02 30       	cpi	r16, 0x02	; 2
     e4e:	11 f4       	brne	.+4      	; 0xe54 <prvCopyDataToQueue+0x82>
     e50:	11 11       	cpse	r17, r1
     e52:	11 50       	subi	r17, 0x01	; 1
     e54:	1f 5f       	subi	r17, 0xFF	; 255
     e56:	1a 8f       	std	Y+26, r17	; 0x1a
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <prvCopyDataFromQueue>:
     e64:	fc 01       	movw	r30, r24
     e66:	44 8d       	ldd	r20, Z+28	; 0x1c
     e68:	44 23       	and	r20, r20
     e6a:	a9 f0       	breq	.+42     	; 0xe96 <prvCopyDataFromQueue+0x32>
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	26 81       	ldd	r18, Z+6	; 0x06
     e70:	37 81       	ldd	r19, Z+7	; 0x07
     e72:	24 0f       	add	r18, r20
     e74:	35 1f       	adc	r19, r21
     e76:	37 83       	std	Z+7, r19	; 0x07
     e78:	26 83       	std	Z+6, r18	; 0x06
     e7a:	84 81       	ldd	r24, Z+4	; 0x04
     e7c:	95 81       	ldd	r25, Z+5	; 0x05
     e7e:	28 17       	cp	r18, r24
     e80:	39 07       	cpc	r19, r25
     e82:	20 f0       	brcs	.+8      	; 0xe8c <prvCopyDataFromQueue+0x28>
     e84:	80 81       	ld	r24, Z
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	97 83       	std	Z+7, r25	; 0x07
     e8a:	86 83       	std	Z+6, r24	; 0x06
     e8c:	cb 01       	movw	r24, r22
     e8e:	66 81       	ldd	r22, Z+6	; 0x06
     e90:	77 81       	ldd	r23, Z+7	; 0x07
     e92:	0e 94 9f 1a 	call	0x353e	; 0x353e <memcpy>
     e96:	08 95       	ret

00000e98 <prvUnlockQueue>:
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	ec 01       	movw	r28, r24
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	0f 92       	push	r0
     ea6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <prvUnlockQueue+0x28>
     eaa:	89 89       	ldd	r24, Y+17	; 0x11
     eac:	88 23       	and	r24, r24
     eae:	51 f0       	breq	.+20     	; 0xec4 <prvUnlockQueue+0x2c>
     eb0:	ce 01       	movw	r24, r28
     eb2:	41 96       	adiw	r24, 0x11	; 17
     eb4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xTaskRemoveFromEventList>
     eb8:	81 11       	cpse	r24, r1
     eba:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <vTaskMissedYield>
     ebe:	11 50       	subi	r17, 0x01	; 1
     ec0:	11 16       	cp	r1, r17
     ec2:	9c f3       	brlt	.-26     	; 0xeaa <prvUnlockQueue+0x12>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	8e 8f       	std	Y+30, r24	; 0x1e
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	0f 92       	push	r0
     ed2:	1d 8d       	ldd	r17, Y+29	; 0x1d
     ed4:	0b c0       	rjmp	.+22     	; 0xeec <prvUnlockQueue+0x54>
     ed6:	88 85       	ldd	r24, Y+8	; 0x08
     ed8:	88 23       	and	r24, r24
     eda:	51 f0       	breq	.+20     	; 0xef0 <prvUnlockQueue+0x58>
     edc:	ce 01       	movw	r24, r28
     ede:	08 96       	adiw	r24, 0x08	; 8
     ee0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xTaskRemoveFromEventList>
     ee4:	81 11       	cpse	r24, r1
     ee6:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <vTaskMissedYield>
     eea:	11 50       	subi	r17, 0x01	; 1
     eec:	11 16       	cp	r1, r17
     eee:	9c f3       	brlt	.-26     	; 0xed6 <prvUnlockQueue+0x3e>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	8d 8f       	std	Y+29, r24	; 0x1d
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	08 95       	ret

00000f00 <xQueueGenericReset>:
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	fc 01       	movw	r30, r24
     f0a:	36 2f       	mov	r19, r22
     f0c:	89 2b       	or	r24, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <xQueueGenericReset+0x12>
     f10:	4d c0       	rjmp	.+154    	; 0xfac <xQueueGenericReset+0xac>
     f12:	23 8d       	ldd	r18, Z+27	; 0x1b
     f14:	22 23       	and	r18, r18
     f16:	09 f4       	brne	.+2      	; 0xf1a <xQueueGenericReset+0x1a>
     f18:	4b c0       	rjmp	.+150    	; 0xfb0 <xQueueGenericReset+0xb0>
     f1a:	02 2f       	mov	r16, r18
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	b8 01       	movw	r22, r16
     f24:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__udivmodhi4>
     f28:	44 8d       	ldd	r20, Z+28	; 0x1c
     f2a:	84 2f       	mov	r24, r20
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	68 17       	cp	r22, r24
     f30:	79 07       	cpc	r23, r25
     f32:	08 f4       	brcc	.+2      	; 0xf36 <xQueueGenericReset+0x36>
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <xQueueGenericReset+0xb4>
     f36:	ef 01       	movw	r28, r30
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	0f 92       	push	r0
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	fb 01       	movw	r30, r22
     f44:	24 9f       	mul	r18, r20
     f46:	e0 0d       	add	r30, r0
     f48:	f1 1d       	adc	r31, r1
     f4a:	11 24       	eor	r1, r1
     f4c:	fd 83       	std	Y+5, r31	; 0x05
     f4e:	ec 83       	std	Y+4, r30	; 0x04
     f50:	1a 8e       	std	Y+26, r1	; 0x1a
     f52:	7b 83       	std	Y+3, r23	; 0x03
     f54:	6a 83       	std	Y+2, r22	; 0x02
     f56:	01 50       	subi	r16, 0x01	; 1
     f58:	11 09       	sbc	r17, r1
     f5a:	80 9f       	mul	r24, r16
     f5c:	a0 01       	movw	r20, r0
     f5e:	81 9f       	mul	r24, r17
     f60:	50 0d       	add	r21, r0
     f62:	90 9f       	mul	r25, r16
     f64:	50 0d       	add	r21, r0
     f66:	11 24       	eor	r1, r1
     f68:	cb 01       	movw	r24, r22
     f6a:	84 0f       	add	r24, r20
     f6c:	95 1f       	adc	r25, r21
     f6e:	9f 83       	std	Y+7, r25	; 0x07
     f70:	8e 83       	std	Y+6, r24	; 0x06
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	8d 8f       	std	Y+29, r24	; 0x1d
     f76:	8e 8f       	std	Y+30, r24	; 0x1e
     f78:	31 11       	cpse	r19, r1
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <xQueueGenericReset+0x94>
     f7c:	88 85       	ldd	r24, Y+8	; 0x08
     f7e:	88 23       	and	r24, r24
     f80:	89 f0       	breq	.+34     	; 0xfa4 <xQueueGenericReset+0xa4>
     f82:	ce 01       	movw	r24, r28
     f84:	08 96       	adiw	r24, 0x08	; 8
     f86:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xTaskRemoveFromEventList>
     f8a:	88 23       	and	r24, r24
     f8c:	59 f0       	breq	.+22     	; 0xfa4 <xQueueGenericReset+0xa4>
     f8e:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <xQueueGenericReset+0xa4>
     f94:	ce 01       	movw	r24, r28
     f96:	08 96       	adiw	r24, 0x08	; 8
     f98:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
     f9c:	ce 01       	movw	r24, r28
     f9e:	41 96       	adiw	r24, 0x11	; 17
     fa0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <xQueueGenericReset+0xb6>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <xQueueGenericReset+0xb6>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <xQueueGenericReset+0xb6>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <prvInitialiseNewQueue>:
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	f8 01       	movw	r30, r16
     fc6:	61 11       	cpse	r22, r1
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <prvInitialiseNewQueue+0x10>
     fca:	11 83       	std	Z+1, r17	; 0x01
     fcc:	00 83       	st	Z, r16
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <prvInitialiseNewQueue+0x14>
     fd0:	51 83       	std	Z+1, r21	; 0x01
     fd2:	40 83       	st	Z, r20
     fd4:	83 8f       	std	Z+27, r24	; 0x1b
     fd6:	64 8f       	std	Z+28, r22	; 0x1c
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	cf 01       	movw	r24, r30
     fdc:	0e 94 80 07 	call	0xf00	; 0xf00 <xQueueGenericReset>
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <xQueueGenericCreate>:
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	38 2f       	mov	r19, r24
     ff6:	e6 2f       	mov	r30, r22
     ff8:	88 23       	and	r24, r24
     ffa:	29 f1       	breq	.+74     	; 0x1046 <xQueueGenericCreate+0x60>
     ffc:	68 2f       	mov	r22, r24
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__udivmodhi4>
    1008:	8e 2f       	mov	r24, r30
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	68 17       	cp	r22, r24
    100e:	79 07       	cpc	r23, r25
    1010:	e8 f0       	brcs	.+58     	; 0x104c <xQueueGenericCreate+0x66>
    1012:	3e 9f       	mul	r19, r30
    1014:	c0 01       	movw	r24, r0
    1016:	11 24       	eor	r1, r1
    1018:	81 3e       	cpi	r24, 0xE1	; 225
    101a:	2f ef       	ldi	r18, 0xFF	; 255
    101c:	92 07       	cpc	r25, r18
    101e:	c8 f4       	brcc	.+50     	; 0x1052 <xQueueGenericCreate+0x6c>
    1020:	d4 2e       	mov	r13, r20
    1022:	de 2f       	mov	r29, r30
    1024:	c3 2f       	mov	r28, r19
    1026:	4f 96       	adiw	r24, 0x1f	; 31
    1028:	0e 94 ac 04 	call	0x958	; 0x958 <pvPortMalloc>
    102c:	7c 01       	movw	r14, r24
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	91 f0       	breq	.+36     	; 0x1056 <xQueueGenericCreate+0x70>
    1032:	8c 01       	movw	r16, r24
    1034:	2d 2d       	mov	r18, r13
    1036:	ac 01       	movw	r20, r24
    1038:	41 5e       	subi	r20, 0xE1	; 225
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	6d 2f       	mov	r22, r29
    103e:	8c 2f       	mov	r24, r28
    1040:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <prvInitialiseNewQueue>
    1044:	08 c0       	rjmp	.+16     	; 0x1056 <xQueueGenericCreate+0x70>
    1046:	e1 2c       	mov	r14, r1
    1048:	f1 2c       	mov	r15, r1
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <xQueueGenericCreate+0x70>
    104c:	e1 2c       	mov	r14, r1
    104e:	f1 2c       	mov	r15, r1
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <xQueueGenericCreate+0x70>
    1052:	e1 2c       	mov	r14, r1
    1054:	f1 2c       	mov	r15, r1
    1056:	c7 01       	movw	r24, r14
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	08 95       	ret

00001068 <xQueueGenericSend>:
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	00 d0       	rcall	.+0      	; 0x107a <xQueueGenericSend+0x12>
    107a:	00 d0       	rcall	.+0      	; 0x107c <xQueueGenericSend+0x14>
    107c:	1f 92       	push	r1
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	8c 01       	movw	r16, r24
    1084:	7b 01       	movw	r14, r22
    1086:	5d 83       	std	Y+5, r21	; 0x05
    1088:	4c 83       	std	Y+4, r20	; 0x04
    108a:	c2 2e       	mov	r12, r18
    108c:	d1 2c       	mov	r13, r1
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	0f 92       	push	r0
    1094:	f8 01       	movw	r30, r16
    1096:	92 8d       	ldd	r25, Z+26	; 0x1a
    1098:	83 8d       	ldd	r24, Z+27	; 0x1b
    109a:	98 17       	cp	r25, r24
    109c:	18 f0       	brcs	.+6      	; 0x10a4 <xQueueGenericSend+0x3c>
    109e:	f2 e0       	ldi	r31, 0x02	; 2
    10a0:	cf 12       	cpse	r12, r31
    10a2:	19 c0       	rjmp	.+50     	; 0x10d6 <xQueueGenericSend+0x6e>
    10a4:	4c 2d       	mov	r20, r12
    10a6:	b7 01       	movw	r22, r14
    10a8:	c8 01       	movw	r24, r16
    10aa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <prvCopyDataToQueue>
    10ae:	f8 01       	movw	r30, r16
    10b0:	91 89       	ldd	r25, Z+17	; 0x11
    10b2:	99 23       	and	r25, r25
    10b4:	49 f0       	breq	.+18     	; 0x10c8 <xQueueGenericSend+0x60>
    10b6:	c8 01       	movw	r24, r16
    10b8:	41 96       	adiw	r24, 0x11	; 17
    10ba:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xTaskRemoveFromEventList>
    10be:	88 23       	and	r24, r24
    10c0:	31 f0       	breq	.+12     	; 0x10ce <xQueueGenericSend+0x66>
    10c2:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <xQueueGenericSend+0x66>
    10c8:	81 11       	cpse	r24, r1
    10ca:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	4d c0       	rjmp	.+154    	; 0x1170 <xQueueGenericSend+0x108>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	89 2b       	or	r24, r25
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <xQueueGenericSend+0x7e>
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	45 c0       	rjmp	.+138    	; 0x1170 <xQueueGenericSend+0x108>
    10e6:	d1 10       	cpse	r13, r1
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <xQueueGenericSend+0x8e>
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	0e 94 86 10 	call	0x210c	; 0x210c <vTaskInternalSetTimeOutState>
    10f2:	dd 24       	eor	r13, r13
    10f4:	d3 94       	inc	r13
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <vTaskSuspendAll>
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	0f 92       	push	r0
    1104:	f8 01       	movw	r30, r16
    1106:	85 8d       	ldd	r24, Z+29	; 0x1d
    1108:	8f 3f       	cpi	r24, 0xFF	; 255
    110a:	09 f4       	brne	.+2      	; 0x110e <xQueueGenericSend+0xa6>
    110c:	15 8e       	std	Z+29, r1	; 0x1d
    110e:	f8 01       	movw	r30, r16
    1110:	86 8d       	ldd	r24, Z+30	; 0x1e
    1112:	8f 3f       	cpi	r24, 0xFF	; 255
    1114:	09 f4       	brne	.+2      	; 0x1118 <xQueueGenericSend+0xb0>
    1116:	16 8e       	std	Z+30, r1	; 0x1e
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	be 01       	movw	r22, r28
    111e:	6c 5f       	subi	r22, 0xFC	; 252
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 91 10 	call	0x2122	; 0x2122 <xTaskCheckForTimeOut>
    112a:	81 11       	cpse	r24, r1
    112c:	1b c0       	rjmp	.+54     	; 0x1164 <xQueueGenericSend+0xfc>
    112e:	c8 01       	movw	r24, r16
    1130:	0e 94 db 06 	call	0xdb6	; 0xdb6 <prvIsQueueFull>
    1134:	88 23       	and	r24, r24
    1136:	81 f0       	breq	.+32     	; 0x1158 <xQueueGenericSend+0xf0>
    1138:	6c 81       	ldd	r22, Y+4	; 0x04
    113a:	7d 81       	ldd	r23, Y+5	; 0x05
    113c:	c8 01       	movw	r24, r16
    113e:	08 96       	adiw	r24, 0x08	; 8
    1140:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vTaskPlaceOnEventList>
    1144:	c8 01       	movw	r24, r16
    1146:	0e 94 4c 07 	call	0xe98	; 0xe98 <prvUnlockQueue>
    114a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    114e:	81 11       	cpse	r24, r1
    1150:	9e cf       	rjmp	.-196    	; 0x108e <xQueueGenericSend+0x26>
    1152:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    1156:	9b cf       	rjmp	.-202    	; 0x108e <xQueueGenericSend+0x26>
    1158:	c8 01       	movw	r24, r16
    115a:	0e 94 4c 07 	call	0xe98	; 0xe98 <prvUnlockQueue>
    115e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    1162:	95 cf       	rjmp	.-214    	; 0x108e <xQueueGenericSend+0x26>
    1164:	c8 01       	movw	r24, r16
    1166:	0e 94 4c 07 	call	0xe98	; 0xe98 <prvUnlockQueue>
    116a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	08 95       	ret

0000118c <xQueueReceive>:
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	00 d0       	rcall	.+0      	; 0x119e <xQueueReceive+0x12>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <xQueueReceive+0x14>
    11a0:	1f 92       	push	r1
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8c 01       	movw	r16, r24
    11a8:	6b 01       	movw	r12, r22
    11aa:	5d 83       	std	Y+5, r21	; 0x05
    11ac:	4c 83       	std	Y+4, r20	; 0x04
    11ae:	e1 2c       	mov	r14, r1
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	0f 92       	push	r0
    11b6:	f8 01       	movw	r30, r16
    11b8:	f2 8c       	ldd	r15, Z+26	; 0x1a
    11ba:	ff 20       	and	r15, r15
    11bc:	a9 f0       	breq	.+42     	; 0x11e8 <xQueueReceive+0x5c>
    11be:	b6 01       	movw	r22, r12
    11c0:	c8 01       	movw	r24, r16
    11c2:	0e 94 32 07 	call	0xe64	; 0xe64 <prvCopyDataFromQueue>
    11c6:	fa 94       	dec	r15
    11c8:	f8 01       	movw	r30, r16
    11ca:	f2 8e       	std	Z+26, r15	; 0x1a
    11cc:	80 85       	ldd	r24, Z+8	; 0x08
    11ce:	88 23       	and	r24, r24
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <xQueueReceive+0x54>
    11d2:	c8 01       	movw	r24, r16
    11d4:	08 96       	adiw	r24, 0x08	; 8
    11d6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <xTaskRemoveFromEventList>
    11da:	81 11       	cpse	r24, r1
    11dc:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	53 c0       	rjmp	.+166    	; 0x128e <xQueueReceive+0x102>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	89 2b       	or	r24, r25
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <xQueueReceive+0x6c>
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	4b c0       	rjmp	.+150    	; 0x128e <xQueueReceive+0x102>
    11f8:	e1 10       	cpse	r14, r1
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <xQueueReceive+0x7c>
    11fc:	ce 01       	movw	r24, r28
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	0e 94 86 10 	call	0x210c	; 0x210c <vTaskInternalSetTimeOutState>
    1204:	ee 24       	eor	r14, r14
    1206:	e3 94       	inc	r14
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <vTaskSuspendAll>
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	0f 92       	push	r0
    1216:	f8 01       	movw	r30, r16
    1218:	85 8d       	ldd	r24, Z+29	; 0x1d
    121a:	8f 3f       	cpi	r24, 0xFF	; 255
    121c:	09 f4       	brne	.+2      	; 0x1220 <xQueueReceive+0x94>
    121e:	15 8e       	std	Z+29, r1	; 0x1d
    1220:	f8 01       	movw	r30, r16
    1222:	86 8d       	ldd	r24, Z+30	; 0x1e
    1224:	8f 3f       	cpi	r24, 0xFF	; 255
    1226:	09 f4       	brne	.+2      	; 0x122a <xQueueReceive+0x9e>
    1228:	16 8e       	std	Z+30, r1	; 0x1e
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	be 01       	movw	r22, r28
    1230:	6c 5f       	subi	r22, 0xFC	; 252
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 91 10 	call	0x2122	; 0x2122 <xTaskCheckForTimeOut>
    123c:	81 11       	cpse	r24, r1
    123e:	1b c0       	rjmp	.+54     	; 0x1276 <xQueueReceive+0xea>
    1240:	c8 01       	movw	r24, r16
    1242:	0e 94 ce 06 	call	0xd9c	; 0xd9c <prvIsQueueEmpty>
    1246:	88 23       	and	r24, r24
    1248:	81 f0       	breq	.+32     	; 0x126a <xQueueReceive+0xde>
    124a:	6c 81       	ldd	r22, Y+4	; 0x04
    124c:	7d 81       	ldd	r23, Y+5	; 0x05
    124e:	c8 01       	movw	r24, r16
    1250:	41 96       	adiw	r24, 0x11	; 17
    1252:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vTaskPlaceOnEventList>
    1256:	c8 01       	movw	r24, r16
    1258:	0e 94 4c 07 	call	0xe98	; 0xe98 <prvUnlockQueue>
    125c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    1260:	81 11       	cpse	r24, r1
    1262:	a6 cf       	rjmp	.-180    	; 0x11b0 <xQueueReceive+0x24>
    1264:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    1268:	a3 cf       	rjmp	.-186    	; 0x11b0 <xQueueReceive+0x24>
    126a:	c8 01       	movw	r24, r16
    126c:	0e 94 4c 07 	call	0xe98	; 0xe98 <prvUnlockQueue>
    1270:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    1274:	9d cf       	rjmp	.-198    	; 0x11b0 <xQueueReceive+0x24>
    1276:	c8 01       	movw	r24, r16
    1278:	0e 94 4c 07 	call	0xe98	; 0xe98 <prvUnlockQueue>
    127c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    1280:	c8 01       	movw	r24, r16
    1282:	0e 94 ce 06 	call	0xd9c	; 0xd9c <prvIsQueueEmpty>
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <xQueueReceive+0x100>
    128a:	92 cf       	rjmp	.-220    	; 0x11b0 <xQueueReceive+0x24>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	08 95       	ret

000012aa <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	0f 92       	push	r0
    12b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ba:	09 f4       	brne	.+2      	; 0x12be <vQueueWaitForMessageRestricted+0x14>
    12bc:	1d 8e       	std	Y+29, r1	; 0x1d
    12be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c0:	8f 3f       	cpi	r24, 0xFF	; 255
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <vQueueWaitForMessageRestricted+0x1c>
    12c4:	1e 8e       	std	Y+30, r1	; 0x1e
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    12ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12cc:	81 11       	cpse	r24, r1
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    12d0:	ce 01       	movw	r24, r28
    12d2:	41 96       	adiw	r24, 0x11	; 17
    12d4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    12d8:	ce 01       	movw	r24, r28
    12da:	0e 94 4c 07 	call	0xe98	; 0xe98 <prvUnlockQueue>
    }
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <prvResetNextTaskUnblockTime>:
                xReturn = taskSCHEDULER_SUSPENDED;
            }
        }

        return xReturn;
    }
    12e4:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <pxDelayedTaskList>
    12e8:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    12ec:	80 81       	ld	r24, Z
    12ee:	81 11       	cpse	r24, r1
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <prvResetNextTaskUnblockTime+0x1c>
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	9f ef       	ldi	r25, 0xFF	; 255
    12f6:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <xNextTaskUnblockTime+0x1>
    12fa:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <xNextTaskUnblockTime>
    12fe:	08 95       	ret
    1300:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <pxDelayedTaskList>
    1304:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    1308:	05 80       	ldd	r0, Z+5	; 0x05
    130a:	f6 81       	ldd	r31, Z+6	; 0x06
    130c:	e0 2d       	mov	r30, r0
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <xNextTaskUnblockTime+0x1>
    1316:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <xNextTaskUnblockTime>
    131a:	08 95       	ret

0000131c <prvInitialiseNewTask>:
    131c:	6f 92       	push	r6
    131e:	7f 92       	push	r7
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	4c 01       	movw	r8, r24
    133c:	f5 01       	movw	r30, r10
    133e:	87 89       	ldd	r24, Z+23	; 0x17
    1340:	90 8d       	ldd	r25, Z+24	; 0x18
    1342:	21 50       	subi	r18, 0x01	; 1
    1344:	31 09       	sbc	r19, r1
    1346:	3c 01       	movw	r6, r24
    1348:	62 0e       	add	r6, r18
    134a:	73 1e       	adc	r7, r19
    134c:	61 15       	cp	r22, r1
    134e:	71 05       	cpc	r23, r1
    1350:	89 f4       	brne	.+34     	; 0x1374 <prvInitialiseNewTask+0x58>
    1352:	15 c0       	rjmp	.+42     	; 0x137e <prvInitialiseNewTask+0x62>
    1354:	82 2f       	mov	r24, r18
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	fb 01       	movw	r30, r22
    135a:	e8 0f       	add	r30, r24
    135c:	f9 1f       	adc	r31, r25
    135e:	30 81       	ld	r19, Z
    1360:	d5 01       	movw	r26, r10
    1362:	a8 0f       	add	r26, r24
    1364:	b9 1f       	adc	r27, r25
    1366:	59 96       	adiw	r26, 0x19	; 25
    1368:	3c 93       	st	X, r19
    136a:	80 81       	ld	r24, Z
    136c:	88 23       	and	r24, r24
    136e:	29 f0       	breq	.+10     	; 0x137a <prvInitialiseNewTask+0x5e>
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <prvInitialiseNewTask+0x5a>
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	28 30       	cpi	r18, 0x08	; 8
    1378:	68 f3       	brcs	.-38     	; 0x1354 <prvInitialiseNewTask+0x38>
    137a:	f5 01       	movw	r30, r10
    137c:	10 a2       	std	Z+32, r1	; 0x20
    137e:	f3 e0       	ldi	r31, 0x03	; 3
    1380:	fe 15       	cp	r31, r14
    1382:	20 f4       	brcc	.+8      	; 0x138c <prvInitialiseNewTask+0x70>
    1384:	0f 2e       	mov	r0, r31
    1386:	f3 e0       	ldi	r31, 0x03	; 3
    1388:	ef 2e       	mov	r14, r31
    138a:	f0 2d       	mov	r31, r0
    138c:	f5 01       	movw	r30, r10
    138e:	e6 8a       	std	Z+22, r14	; 0x16
    1390:	c5 01       	movw	r24, r10
    1392:	02 96       	adiw	r24, 0x02	; 2
    1394:	0e 94 f5 04 	call	0x9ea	; 0x9ea <vListInitialiseItem>
    1398:	c5 01       	movw	r24, r10
    139a:	0c 96       	adiw	r24, 0x0c	; 12
    139c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <vListInitialiseItem>
    13a0:	f5 01       	movw	r30, r10
    13a2:	b1 86       	std	Z+9, r11	; 0x09
    13a4:	a0 86       	std	Z+8, r10	; 0x08
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	8e 19       	sub	r24, r14
    13ac:	91 09       	sbc	r25, r1
    13ae:	95 87       	std	Z+13, r25	; 0x0d
    13b0:	84 87       	std	Z+12, r24	; 0x0c
    13b2:	b3 8a       	std	Z+19, r11	; 0x13
    13b4:	a2 8a       	std	Z+18, r10	; 0x12
    13b6:	a8 01       	movw	r20, r16
    13b8:	b4 01       	movw	r22, r8
    13ba:	c3 01       	movw	r24, r6
    13bc:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <pxPortInitialiseStack>
    13c0:	f5 01       	movw	r30, r10
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
    13c6:	c1 14       	cp	r12, r1
    13c8:	d1 04       	cpc	r13, r1
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <prvInitialiseNewTask+0xb6>
    13cc:	f6 01       	movw	r30, r12
    13ce:	b1 82       	std	Z+1, r11	; 0x01
    13d0:	a0 82       	st	Z, r10
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	9f 90       	pop	r9
    13e6:	8f 90       	pop	r8
    13e8:	7f 90       	pop	r7
    13ea:	6f 90       	pop	r6
    13ec:	08 95       	ret

000013ee <prvIdleTask>:
    13ee:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <pxReadyTasksLists>
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	e0 f3       	brcs	.-8      	; 0x13ee <prvIdleTask>
    13f6:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    13fa:	f9 cf       	rjmp	.-14     	; 0x13ee <prvIdleTask>

000013fc <prvInitialiseTaskLists>:
    13fc:	cf 93       	push	r28
    13fe:	c0 e0       	ldi	r28, 0x00	; 0
    1400:	10 c0       	rjmp	.+32     	; 0x1422 <prvInitialiseTaskLists+0x26>
    1402:	8c 2f       	mov	r24, r28
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9c 01       	movw	r18, r24
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	82 0f       	add	r24, r18
    1416:	93 1f       	adc	r25, r19
    1418:	83 57       	subi	r24, 0x73	; 115
    141a:	98 4f       	sbci	r25, 0xF8	; 248
    141c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
    1420:	cf 5f       	subi	r28, 0xFF	; 255
    1422:	c4 30       	cpi	r28, 0x04	; 4
    1424:	70 f3       	brcs	.-36     	; 0x1402 <prvInitialiseTaskLists+0x6>
    1426:	84 e8       	ldi	r24, 0x84	; 132
    1428:	97 e0       	ldi	r25, 0x07	; 7
    142a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
    142e:	8b e7       	ldi	r24, 0x7B	; 123
    1430:	97 e0       	ldi	r25, 0x07	; 7
    1432:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
    1436:	8e e6       	ldi	r24, 0x6E	; 110
    1438:	97 e0       	ldi	r25, 0x07	; 7
    143a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
    143e:	85 e6       	ldi	r24, 0x65	; 101
    1440:	97 e0       	ldi	r25, 0x07	; 7
    1442:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
    1446:	84 e8       	ldi	r24, 0x84	; 132
    1448:	97 e0       	ldi	r25, 0x07	; 7
    144a:	90 93 7a 07 	sts	0x077A, r25	; 0x80077a <pxDelayedTaskList+0x1>
    144e:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <pxDelayedTaskList>
    1452:	8b e7       	ldi	r24, 0x7B	; 123
    1454:	97 e0       	ldi	r25, 0x07	; 7
    1456:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <pxOverflowDelayedTaskList+0x1>
    145a:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <pxOverflowDelayedTaskList>
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <prvAddNewTaskToReadyList>:
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	ec 01       	movw	r28, r24
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	0f 92       	push	r0
    146e:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <uxCurrentNumberOfTasks>
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <uxCurrentNumberOfTasks>
    1478:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    147c:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1480:	89 2b       	or	r24, r25
    1482:	59 f4       	brne	.+22     	; 0x149a <prvAddNewTaskToReadyList+0x38>
    1484:	d0 93 b2 07 	sts	0x07B2, r29	; 0x8007b2 <pxCurrentTCB+0x1>
    1488:	c0 93 b1 07 	sts	0x07B1, r28	; 0x8007b1 <pxCurrentTCB>
    148c:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <uxCurrentNumberOfTasks>
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	99 f4       	brne	.+38     	; 0x14ba <prvAddNewTaskToReadyList+0x58>
    1494:	0e 94 fe 09 	call	0x13fc	; 0x13fc <prvInitialiseTaskLists>
    1498:	10 c0       	rjmp	.+32     	; 0x14ba <prvAddNewTaskToReadyList+0x58>
    149a:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xSchedulerRunning>
    149e:	81 11       	cpse	r24, r1
    14a0:	0c c0       	rjmp	.+24     	; 0x14ba <prvAddNewTaskToReadyList+0x58>
    14a2:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    14a6:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    14aa:	96 89       	ldd	r25, Z+22	; 0x16
    14ac:	8e 89       	ldd	r24, Y+22	; 0x16
    14ae:	89 17       	cp	r24, r25
    14b0:	20 f0       	brcs	.+8      	; 0x14ba <prvAddNewTaskToReadyList+0x58>
    14b2:	d0 93 b2 07 	sts	0x07B2, r29	; 0x8007b2 <pxCurrentTCB+0x1>
    14b6:	c0 93 b1 07 	sts	0x07B1, r28	; 0x8007b1 <pxCurrentTCB>
    14ba:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxTaskNumber>
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxTaskNumber>
    14c4:	8e 89       	ldd	r24, Y+22	; 0x16
    14c6:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <uxTopReadyPriority>
    14ca:	98 17       	cp	r25, r24
    14cc:	10 f4       	brcc	.+4      	; 0x14d2 <prvAddNewTaskToReadyList+0x70>
    14ce:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <uxTopReadyPriority>
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	fc 01       	movw	r30, r24
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	8e 0f       	add	r24, r30
    14e4:	9f 1f       	adc	r25, r31
    14e6:	fc 01       	movw	r30, r24
    14e8:	e3 57       	subi	r30, 0x73	; 115
    14ea:	f8 4f       	sbci	r31, 0xF8	; 248
    14ec:	01 80       	ldd	r0, Z+1	; 0x01
    14ee:	f2 81       	ldd	r31, Z+2	; 0x02
    14f0:	e0 2d       	mov	r30, r0
    14f2:	fd 83       	std	Y+5, r31	; 0x05
    14f4:	ec 83       	std	Y+4, r30	; 0x04
    14f6:	84 81       	ldd	r24, Z+4	; 0x04
    14f8:	95 81       	ldd	r25, Z+5	; 0x05
    14fa:	9f 83       	std	Y+7, r25	; 0x07
    14fc:	8e 83       	std	Y+6, r24	; 0x06
    14fe:	a4 81       	ldd	r26, Z+4	; 0x04
    1500:	b5 81       	ldd	r27, Z+5	; 0x05
    1502:	ce 01       	movw	r24, r28
    1504:	02 96       	adiw	r24, 0x02	; 2
    1506:	13 96       	adiw	r26, 0x03	; 3
    1508:	9c 93       	st	X, r25
    150a:	8e 93       	st	-X, r24
    150c:	12 97       	sbiw	r26, 0x02	; 2
    150e:	95 83       	std	Z+5, r25	; 0x05
    1510:	84 83       	std	Z+4, r24	; 0x04
    1512:	ee 89       	ldd	r30, Y+22	; 0x16
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	cf 01       	movw	r24, r30
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	e8 0f       	add	r30, r24
    1526:	f9 1f       	adc	r31, r25
    1528:	e3 57       	subi	r30, 0x73	; 115
    152a:	f8 4f       	sbci	r31, 0xF8	; 248
    152c:	fb 87       	std	Y+11, r31	; 0x0b
    152e:	ea 87       	std	Y+10, r30	; 0x0a
    1530:	80 81       	ld	r24, Z
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	80 83       	st	Z, r24
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xSchedulerRunning>
    153e:	88 23       	and	r24, r24
    1540:	51 f0       	breq	.+20     	; 0x1556 <prvAddNewTaskToReadyList+0xf4>
    1542:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1546:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    154a:	96 89       	ldd	r25, Z+22	; 0x16
    154c:	8e 89       	ldd	r24, Y+22	; 0x16
    154e:	98 17       	cp	r25, r24
    1550:	10 f4       	brcc	.+4      	; 0x1556 <prvAddNewTaskToReadyList+0xf4>
    1552:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <prvAddCurrentTaskToDelayedList>:
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	ec 01       	movw	r28, r24
    1568:	f6 2e       	mov	r15, r22
    156a:	00 91 62 07 	lds	r16, 0x0762	; 0x800762 <xTickCount>
    156e:	10 91 63 07 	lds	r17, 0x0763	; 0x800763 <xTickCount+0x1>
    1572:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1576:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    157a:	02 96       	adiw	r24, 0x02	; 2
    157c:	0e 94 4b 05 	call	0xa96	; 0xa96 <uxListRemove>
    1580:	cf 3f       	cpi	r28, 0xFF	; 255
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	d8 07       	cpc	r29, r24
    1586:	b1 f5       	brne	.+108    	; 0x15f4 <prvAddCurrentTaskToDelayedList+0x98>
    1588:	ff 20       	and	r15, r15
    158a:	a1 f1       	breq	.+104    	; 0x15f4 <prvAddCurrentTaskToDelayedList+0x98>
    158c:	e5 e6       	ldi	r30, 0x65	; 101
    158e:	f7 e0       	ldi	r31, 0x07	; 7
    1590:	a1 81       	ldd	r26, Z+1	; 0x01
    1592:	b2 81       	ldd	r27, Z+2	; 0x02
    1594:	c0 91 b1 07 	lds	r28, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1598:	d0 91 b2 07 	lds	r29, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    159c:	bd 83       	std	Y+5, r27	; 0x05
    159e:	ac 83       	std	Y+4, r26	; 0x04
    15a0:	c0 91 b1 07 	lds	r28, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    15a4:	d0 91 b2 07 	lds	r29, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    15a8:	14 96       	adiw	r26, 0x04	; 4
    15aa:	8d 91       	ld	r24, X+
    15ac:	9c 91       	ld	r25, X
    15ae:	15 97       	sbiw	r26, 0x05	; 5
    15b0:	9f 83       	std	Y+7, r25	; 0x07
    15b2:	8e 83       	std	Y+6, r24	; 0x06
    15b4:	14 96       	adiw	r26, 0x04	; 4
    15b6:	cd 91       	ld	r28, X+
    15b8:	dc 91       	ld	r29, X
    15ba:	15 97       	sbiw	r26, 0x05	; 5
    15bc:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    15c0:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    15c4:	02 96       	adiw	r24, 0x02	; 2
    15c6:	9b 83       	std	Y+3, r25	; 0x03
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    15ce:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    15d2:	02 96       	adiw	r24, 0x02	; 2
    15d4:	15 96       	adiw	r26, 0x05	; 5
    15d6:	9c 93       	st	X, r25
    15d8:	8e 93       	st	-X, r24
    15da:	14 97       	sbiw	r26, 0x04	; 4
    15dc:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    15e0:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    15e4:	1b 96       	adiw	r26, 0x0b	; 11
    15e6:	fc 93       	st	X, r31
    15e8:	ee 93       	st	-X, r30
    15ea:	1a 97       	sbiw	r26, 0x0a	; 10
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	80 83       	st	Z, r24
    15f2:	2f c0       	rjmp	.+94     	; 0x1652 <prvAddCurrentTaskToDelayedList+0xf6>
    15f4:	c0 0f       	add	r28, r16
    15f6:	d1 1f       	adc	r29, r17
    15f8:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    15fc:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1600:	d3 83       	std	Z+3, r29	; 0x03
    1602:	c2 83       	std	Z+2, r28	; 0x02
    1604:	c0 17       	cp	r28, r16
    1606:	d1 07       	cpc	r29, r17
    1608:	68 f4       	brcc	.+26     	; 0x1624 <prvAddCurrentTaskToDelayedList+0xc8>
    160a:	60 91 b1 07 	lds	r22, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    160e:	70 91 b2 07 	lds	r23, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1612:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <pxOverflowDelayedTaskList>
    1616:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <pxOverflowDelayedTaskList+0x1>
    161a:	6e 5f       	subi	r22, 0xFE	; 254
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	0e 94 1a 05 	call	0xa34	; 0xa34 <vListInsert>
    1622:	17 c0       	rjmp	.+46     	; 0x1652 <prvAddCurrentTaskToDelayedList+0xf6>
    1624:	60 91 b1 07 	lds	r22, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1628:	70 91 b2 07 	lds	r23, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    162c:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    1630:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    1634:	6e 5f       	subi	r22, 0xFE	; 254
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	0e 94 1a 05 	call	0xa34	; 0xa34 <vListInsert>
    163c:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <xNextTaskUnblockTime>
    1640:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <xNextTaskUnblockTime+0x1>
    1644:	c8 17       	cp	r28, r24
    1646:	d9 07       	cpc	r29, r25
    1648:	20 f4       	brcc	.+8      	; 0x1652 <prvAddCurrentTaskToDelayedList+0xf6>
    164a:	d0 93 5a 07 	sts	0x075A, r29	; 0x80075a <xNextTaskUnblockTime+0x1>
    164e:	c0 93 59 07 	sts	0x0759, r28	; 0x800759 <xNextTaskUnblockTime>
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	08 95       	ret

0000165e <xTaskCreate>:
    165e:	2f 92       	push	r2
    1660:	3f 92       	push	r3
    1662:	4f 92       	push	r4
    1664:	5f 92       	push	r5
    1666:	6f 92       	push	r6
    1668:	7f 92       	push	r7
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	3c 01       	movw	r6, r24
    1684:	1b 01       	movw	r2, r22
    1686:	5a 01       	movw	r10, r20
    1688:	29 01       	movw	r4, r18
    168a:	ca 01       	movw	r24, r20
    168c:	0e 94 ac 04 	call	0x958	; 0x958 <pvPortMalloc>
    1690:	6c 01       	movw	r12, r24
    1692:	89 2b       	or	r24, r25
    1694:	99 f0       	breq	.+38     	; 0x16bc <xTaskCreate+0x5e>
    1696:	86 e2       	ldi	r24, 0x26	; 38
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 ac 04 	call	0x958	; 0x958 <pvPortMalloc>
    169e:	ec 01       	movw	r28, r24
    16a0:	89 2b       	or	r24, r25
    16a2:	41 f0       	breq	.+16     	; 0x16b4 <xTaskCreate+0x56>
    16a4:	86 e2       	ldi	r24, 0x26	; 38
    16a6:	fe 01       	movw	r30, r28
    16a8:	11 92       	st	Z+, r1
    16aa:	8a 95       	dec	r24
    16ac:	e9 f7       	brne	.-6      	; 0x16a8 <xTaskCreate+0x4a>
    16ae:	d8 8e       	std	Y+24, r13	; 0x18
    16b0:	cf 8a       	std	Y+23, r12	; 0x17
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <xTaskCreate+0x62>
    16b4:	c6 01       	movw	r24, r12
    16b6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vPortFree>
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <xTaskCreate+0x62>
    16bc:	c0 e0       	ldi	r28, 0x00	; 0
    16be:	d0 e0       	ldi	r29, 0x00	; 0
    16c0:	20 97       	sbiw	r28, 0x00	; 0
    16c2:	91 f0       	breq	.+36     	; 0x16e8 <xTaskCreate+0x8a>
    16c4:	95 01       	movw	r18, r10
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	81 2c       	mov	r8, r1
    16cc:	91 2c       	mov	r9, r1
    16ce:	5e 01       	movw	r10, r28
    16d0:	67 01       	movw	r12, r14
    16d2:	e0 2e       	mov	r14, r16
    16d4:	82 01       	movw	r16, r4
    16d6:	b1 01       	movw	r22, r2
    16d8:	c3 01       	movw	r24, r6
    16da:	0e 94 8e 09 	call	0x131c	; 0x131c <prvInitialiseNewTask>
    16de:	ce 01       	movw	r24, r28
    16e0:	0e 94 31 0a 	call	0x1462	; 0x1462 <prvAddNewTaskToReadyList>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <xTaskCreate+0x8c>
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	9f 90       	pop	r9
    1700:	8f 90       	pop	r8
    1702:	7f 90       	pop	r7
    1704:	6f 90       	pop	r6
    1706:	5f 90       	pop	r5
    1708:	4f 90       	pop	r4
    170a:	3f 90       	pop	r3
    170c:	2f 90       	pop	r2
    170e:	08 95       	ret

00001710 <vTaskStartScheduler>:
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	0f 2e       	mov	r0, r31
    1718:	f7 e5       	ldi	r31, 0x57	; 87
    171a:	ef 2e       	mov	r14, r31
    171c:	f7 e0       	ldi	r31, 0x07	; 7
    171e:	ff 2e       	mov	r15, r31
    1720:	f0 2d       	mov	r31, r0
    1722:	00 e0       	ldi	r16, 0x00	; 0
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	45 e5       	ldi	r20, 0x55	; 85
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	66 ef       	ldi	r22, 0xF6	; 246
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	87 ef       	ldi	r24, 0xF7	; 247
    1732:	99 e0       	ldi	r25, 0x09	; 9
    1734:	0e 94 2f 0b 	call	0x165e	; 0x165e <xTaskCreate>
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	11 f4       	brne	.+4      	; 0x1740 <vTaskStartScheduler+0x30>
    173c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <xTimerCreateTimerTask>
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	81 f4       	brne	.+32     	; 0x1764 <vTaskStartScheduler+0x54>
    1744:	f8 94       	cli
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	9f ef       	ldi	r25, 0xFF	; 255
    174a:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <xNextTaskUnblockTime+0x1>
    174e:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <xNextTaskUnblockTime>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <xSchedulerRunning>
    1758:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <xTickCount+0x1>
    175c:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <xTickCount>
    1760:	0e 94 e7 05 	call	0xbce	; 0xbce <xPortStartScheduler>
    1764:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	08 95       	ret

00001770 <vTaskSuspendAll>:
    1770:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxSchedulerSuspended>
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <uxSchedulerSuspended>
    177a:	08 95       	ret

0000177c <xTaskGetTickCount>:
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	0f 92       	push	r0
    1782:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <xTickCount>
    1786:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <xTickCount+0x1>
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	08 95       	ret

00001790 <xTaskIncrementTick>:
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxSchedulerSuspended>
    179c:	81 11       	cpse	r24, r1
    179e:	01 c1       	rjmp	.+514    	; 0x19a2 <xTaskIncrementTick+0x212>
    17a0:	c0 91 62 07 	lds	r28, 0x0762	; 0x800762 <xTickCount>
    17a4:	d0 91 63 07 	lds	r29, 0x0763	; 0x800763 <xTickCount+0x1>
    17a8:	8e 01       	movw	r16, r28
    17aa:	0f 5f       	subi	r16, 0xFF	; 255
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	10 93 63 07 	sts	0x0763, r17	; 0x800763 <xTickCount+0x1>
    17b2:	00 93 62 07 	sts	0x0762, r16	; 0x800762 <xTickCount>
    17b6:	01 15       	cp	r16, r1
    17b8:	11 05       	cpc	r17, r1
    17ba:	b9 f4       	brne	.+46     	; 0x17ea <xTaskIncrementTick+0x5a>
    17bc:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    17c0:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    17c4:	20 91 77 07 	lds	r18, 0x0777	; 0x800777 <pxOverflowDelayedTaskList>
    17c8:	30 91 78 07 	lds	r19, 0x0778	; 0x800778 <pxOverflowDelayedTaskList+0x1>
    17cc:	30 93 7a 07 	sts	0x077A, r19	; 0x80077a <pxDelayedTaskList+0x1>
    17d0:	20 93 79 07 	sts	0x0779, r18	; 0x800779 <pxDelayedTaskList>
    17d4:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <pxOverflowDelayedTaskList+0x1>
    17d8:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <pxOverflowDelayedTaskList>
    17dc:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xNumOfOverflows>
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <xNumOfOverflows>
    17e6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <prvResetNextTaskUnblockTime>
    17ea:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <xNextTaskUnblockTime>
    17ee:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <xNextTaskUnblockTime+0x1>
    17f2:	08 17       	cp	r16, r24
    17f4:	19 07       	cpc	r17, r25
    17f6:	20 f4       	brcc	.+8      	; 0x1800 <xTaskIncrementTick+0x70>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	b8 c0       	rjmp	.+368    	; 0x196c <xTaskIncrementTick+0x1dc>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <xTaskIncrementTick+0x72>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <pxDelayedTaskList>
    1806:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    180a:	90 81       	ld	r25, Z
    180c:	91 11       	cpse	r25, r1
    180e:	07 c0       	rjmp	.+14     	; 0x181e <xTaskIncrementTick+0x8e>
    1810:	2f ef       	ldi	r18, 0xFF	; 255
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	30 93 5a 07 	sts	0x075A, r19	; 0x80075a <xNextTaskUnblockTime+0x1>
    1818:	20 93 59 07 	sts	0x0759, r18	; 0x800759 <xNextTaskUnblockTime>
    181c:	a7 c0       	rjmp	.+334    	; 0x196c <xTaskIncrementTick+0x1dc>
    181e:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <pxDelayedTaskList>
    1822:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    1826:	05 80       	ldd	r0, Z+5	; 0x05
    1828:	f6 81       	ldd	r31, Z+6	; 0x06
    182a:	e0 2d       	mov	r30, r0
    182c:	06 80       	ldd	r0, Z+6	; 0x06
    182e:	f7 81       	ldd	r31, Z+7	; 0x07
    1830:	e0 2d       	mov	r30, r0
    1832:	22 81       	ldd	r18, Z+2	; 0x02
    1834:	33 81       	ldd	r19, Z+3	; 0x03
    1836:	02 17       	cp	r16, r18
    1838:	13 07       	cpc	r17, r19
    183a:	28 f4       	brcc	.+10     	; 0x1846 <xTaskIncrementTick+0xb6>
    183c:	30 93 5a 07 	sts	0x075A, r19	; 0x80075a <xNextTaskUnblockTime+0x1>
    1840:	20 93 59 07 	sts	0x0759, r18	; 0x800759 <xNextTaskUnblockTime>
    1844:	93 c0       	rjmp	.+294    	; 0x196c <xTaskIncrementTick+0x1dc>
    1846:	a2 85       	ldd	r26, Z+10	; 0x0a
    1848:	b3 85       	ldd	r27, Z+11	; 0x0b
    184a:	24 81       	ldd	r18, Z+4	; 0x04
    184c:	35 81       	ldd	r19, Z+5	; 0x05
    184e:	46 81       	ldd	r20, Z+6	; 0x06
    1850:	57 81       	ldd	r21, Z+7	; 0x07
    1852:	e9 01       	movw	r28, r18
    1854:	5d 83       	std	Y+5, r21	; 0x05
    1856:	4c 83       	std	Y+4, r20	; 0x04
    1858:	26 81       	ldd	r18, Z+6	; 0x06
    185a:	37 81       	ldd	r19, Z+7	; 0x07
    185c:	44 81       	ldd	r20, Z+4	; 0x04
    185e:	55 81       	ldd	r21, Z+5	; 0x05
    1860:	e9 01       	movw	r28, r18
    1862:	5b 83       	std	Y+3, r21	; 0x03
    1864:	4a 83       	std	Y+2, r20	; 0x02
    1866:	11 96       	adiw	r26, 0x01	; 1
    1868:	2d 91       	ld	r18, X+
    186a:	3c 91       	ld	r19, X
    186c:	12 97       	sbiw	r26, 0x02	; 2
    186e:	af 01       	movw	r20, r30
    1870:	4e 5f       	subi	r20, 0xFE	; 254
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	24 17       	cp	r18, r20
    1876:	35 07       	cpc	r19, r21
    1878:	31 f4       	brne	.+12     	; 0x1886 <xTaskIncrementTick+0xf6>
    187a:	26 81       	ldd	r18, Z+6	; 0x06
    187c:	37 81       	ldd	r19, Z+7	; 0x07
    187e:	12 96       	adiw	r26, 0x02	; 2
    1880:	3c 93       	st	X, r19
    1882:	2e 93       	st	-X, r18
    1884:	11 97       	sbiw	r26, 0x01	; 1
    1886:	13 86       	std	Z+11, r1	; 0x0b
    1888:	12 86       	std	Z+10, r1	; 0x0a
    188a:	9c 91       	ld	r25, X
    188c:	91 50       	subi	r25, 0x01	; 1
    188e:	9c 93       	st	X, r25
    1890:	a4 89       	ldd	r26, Z+20	; 0x14
    1892:	b5 89       	ldd	r27, Z+21	; 0x15
    1894:	10 97       	sbiw	r26, 0x00	; 0
    1896:	19 f1       	breq	.+70     	; 0x18de <xTaskIncrementTick+0x14e>
    1898:	26 85       	ldd	r18, Z+14	; 0x0e
    189a:	37 85       	ldd	r19, Z+15	; 0x0f
    189c:	60 89       	ldd	r22, Z+16	; 0x10
    189e:	71 89       	ldd	r23, Z+17	; 0x11
    18a0:	e9 01       	movw	r28, r18
    18a2:	7d 83       	std	Y+5, r23	; 0x05
    18a4:	6c 83       	std	Y+4, r22	; 0x04
    18a6:	20 89       	ldd	r18, Z+16	; 0x10
    18a8:	31 89       	ldd	r19, Z+17	; 0x11
    18aa:	66 85       	ldd	r22, Z+14	; 0x0e
    18ac:	77 85       	ldd	r23, Z+15	; 0x0f
    18ae:	e9 01       	movw	r28, r18
    18b0:	7b 83       	std	Y+3, r23	; 0x03
    18b2:	6a 83       	std	Y+2, r22	; 0x02
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	6d 91       	ld	r22, X+
    18b8:	7c 91       	ld	r23, X
    18ba:	12 97       	sbiw	r26, 0x02	; 2
    18bc:	9f 01       	movw	r18, r30
    18be:	24 5f       	subi	r18, 0xF4	; 244
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	62 17       	cp	r22, r18
    18c4:	73 07       	cpc	r23, r19
    18c6:	31 f4       	brne	.+12     	; 0x18d4 <xTaskIncrementTick+0x144>
    18c8:	20 89       	ldd	r18, Z+16	; 0x10
    18ca:	31 89       	ldd	r19, Z+17	; 0x11
    18cc:	12 96       	adiw	r26, 0x02	; 2
    18ce:	3c 93       	st	X, r19
    18d0:	2e 93       	st	-X, r18
    18d2:	11 97       	sbiw	r26, 0x01	; 1
    18d4:	15 8a       	std	Z+21, r1	; 0x15
    18d6:	14 8a       	std	Z+20, r1	; 0x14
    18d8:	9c 91       	ld	r25, X
    18da:	91 50       	subi	r25, 0x01	; 1
    18dc:	9c 93       	st	X, r25
    18de:	26 89       	ldd	r18, Z+22	; 0x16
    18e0:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <uxTopReadyPriority>
    18e4:	92 17       	cp	r25, r18
    18e6:	10 f4       	brcc	.+4      	; 0x18ec <xTaskIncrementTick+0x15c>
    18e8:	20 93 61 07 	sts	0x0761, r18	; 0x800761 <uxTopReadyPriority>
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	d9 01       	movw	r26, r18
    18f0:	aa 0f       	add	r26, r26
    18f2:	bb 1f       	adc	r27, r27
    18f4:	aa 0f       	add	r26, r26
    18f6:	bb 1f       	adc	r27, r27
    18f8:	aa 0f       	add	r26, r26
    18fa:	bb 1f       	adc	r27, r27
    18fc:	2a 0f       	add	r18, r26
    18fe:	3b 1f       	adc	r19, r27
    1900:	d9 01       	movw	r26, r18
    1902:	a3 57       	subi	r26, 0x73	; 115
    1904:	b8 4f       	sbci	r27, 0xF8	; 248
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	0d 90       	ld	r0, X+
    190a:	bc 91       	ld	r27, X
    190c:	a0 2d       	mov	r26, r0
    190e:	b5 83       	std	Z+5, r27	; 0x05
    1910:	a4 83       	std	Z+4, r26	; 0x04
    1912:	14 96       	adiw	r26, 0x04	; 4
    1914:	2d 91       	ld	r18, X+
    1916:	3c 91       	ld	r19, X
    1918:	15 97       	sbiw	r26, 0x05	; 5
    191a:	37 83       	std	Z+7, r19	; 0x07
    191c:	26 83       	std	Z+6, r18	; 0x06
    191e:	14 96       	adiw	r26, 0x04	; 4
    1920:	2d 91       	ld	r18, X+
    1922:	3c 91       	ld	r19, X
    1924:	15 97       	sbiw	r26, 0x05	; 5
    1926:	e9 01       	movw	r28, r18
    1928:	5b 83       	std	Y+3, r21	; 0x03
    192a:	4a 83       	std	Y+2, r20	; 0x02
    192c:	15 96       	adiw	r26, 0x05	; 5
    192e:	5c 93       	st	X, r21
    1930:	4e 93       	st	-X, r20
    1932:	14 97       	sbiw	r26, 0x04	; 4
    1934:	a6 89       	ldd	r26, Z+22	; 0x16
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	9d 01       	movw	r18, r26
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	22 0f       	add	r18, r18
    1940:	33 1f       	adc	r19, r19
    1942:	22 0f       	add	r18, r18
    1944:	33 1f       	adc	r19, r19
    1946:	a2 0f       	add	r26, r18
    1948:	b3 1f       	adc	r27, r19
    194a:	a3 57       	subi	r26, 0x73	; 115
    194c:	b8 4f       	sbci	r27, 0xF8	; 248
    194e:	b3 87       	std	Z+11, r27	; 0x0b
    1950:	a2 87       	std	Z+10, r26	; 0x0a
    1952:	9c 91       	ld	r25, X
    1954:	9f 5f       	subi	r25, 0xFF	; 255
    1956:	9c 93       	st	X, r25
    1958:	26 89       	ldd	r18, Z+22	; 0x16
    195a:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    195e:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1962:	96 89       	ldd	r25, Z+22	; 0x16
    1964:	92 17       	cp	r25, r18
    1966:	08 f4       	brcc	.+2      	; 0x196a <xTaskIncrementTick+0x1da>
    1968:	49 cf       	rjmp	.-366    	; 0x17fc <xTaskIncrementTick+0x6c>
    196a:	4b cf       	rjmp	.-362    	; 0x1802 <xTaskIncrementTick+0x72>
    196c:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1970:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1974:	26 89       	ldd	r18, Z+22	; 0x16
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	f9 01       	movw	r30, r18
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	2e 0f       	add	r18, r30
    1988:	3f 1f       	adc	r19, r31
    198a:	f9 01       	movw	r30, r18
    198c:	e3 57       	subi	r30, 0x73	; 115
    198e:	f8 4f       	sbci	r31, 0xF8	; 248
    1990:	90 81       	ld	r25, Z
    1992:	92 30       	cpi	r25, 0x02	; 2
    1994:	08 f0       	brcs	.+2      	; 0x1998 <xTaskIncrementTick+0x208>
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xYieldPending>
    199c:	91 11       	cpse	r25, r1
    199e:	0c c0       	rjmp	.+24     	; 0x19b8 <xTaskIncrementTick+0x228>
    19a0:	0c c0       	rjmp	.+24     	; 0x19ba <xTaskIncrementTick+0x22a>
    19a2:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <xPendedTicks>
    19a6:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <xPendedTicks+0x1>
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <xPendedTicks+0x1>
    19b0:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <xPendedTicks>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <xTaskIncrementTick+0x22a>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <xTaskResumeAll>:
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	0f 92       	push	r0
    19ce:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxSchedulerSuspended>
    19d2:	81 50       	subi	r24, 0x01	; 1
    19d4:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <uxSchedulerSuspended>
    19d8:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxSchedulerSuspended>
    19dc:	81 11       	cpse	r24, r1
    19de:	bf c0       	rjmp	.+382    	; 0x1b5e <xTaskResumeAll+0x19a>
    19e0:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <uxCurrentNumberOfTasks>
    19e4:	81 11       	cpse	r24, r1
    19e6:	96 c0       	rjmp	.+300    	; 0x1b14 <xTaskResumeAll+0x150>
    19e8:	bd c0       	rjmp	.+378    	; 0x1b64 <xTaskResumeAll+0x1a0>
    19ea:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <xPendingReadyList+0x5>
    19ee:	f0 91 74 07 	lds	r31, 0x0774	; 0x800774 <xPendingReadyList+0x6>
    19f2:	06 80       	ldd	r0, Z+6	; 0x06
    19f4:	f7 81       	ldd	r31, Z+7	; 0x07
    19f6:	e0 2d       	mov	r30, r0
    19f8:	a4 89       	ldd	r26, Z+20	; 0x14
    19fa:	b5 89       	ldd	r27, Z+21	; 0x15
    19fc:	c6 85       	ldd	r28, Z+14	; 0x0e
    19fe:	d7 85       	ldd	r29, Z+15	; 0x0f
    1a00:	80 89       	ldd	r24, Z+16	; 0x10
    1a02:	91 89       	ldd	r25, Z+17	; 0x11
    1a04:	9d 83       	std	Y+5, r25	; 0x05
    1a06:	8c 83       	std	Y+4, r24	; 0x04
    1a08:	c0 89       	ldd	r28, Z+16	; 0x10
    1a0a:	d1 89       	ldd	r29, Z+17	; 0x11
    1a0c:	86 85       	ldd	r24, Z+14	; 0x0e
    1a0e:	97 85       	ldd	r25, Z+15	; 0x0f
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	11 96       	adiw	r26, 0x01	; 1
    1a16:	2d 91       	ld	r18, X+
    1a18:	3c 91       	ld	r19, X
    1a1a:	12 97       	sbiw	r26, 0x02	; 2
    1a1c:	cf 01       	movw	r24, r30
    1a1e:	0c 96       	adiw	r24, 0x0c	; 12
    1a20:	28 17       	cp	r18, r24
    1a22:	39 07       	cpc	r19, r25
    1a24:	31 f4       	brne	.+12     	; 0x1a32 <xTaskResumeAll+0x6e>
    1a26:	80 89       	ldd	r24, Z+16	; 0x10
    1a28:	91 89       	ldd	r25, Z+17	; 0x11
    1a2a:	12 96       	adiw	r26, 0x02	; 2
    1a2c:	9c 93       	st	X, r25
    1a2e:	8e 93       	st	-X, r24
    1a30:	11 97       	sbiw	r26, 0x01	; 1
    1a32:	15 8a       	std	Z+21, r1	; 0x15
    1a34:	14 8a       	std	Z+20, r1	; 0x14
    1a36:	8c 91       	ld	r24, X
    1a38:	81 50       	subi	r24, 0x01	; 1
    1a3a:	8c 93       	st	X, r24
    1a3c:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a3e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1a40:	c4 81       	ldd	r28, Z+4	; 0x04
    1a42:	d5 81       	ldd	r29, Z+5	; 0x05
    1a44:	86 81       	ldd	r24, Z+6	; 0x06
    1a46:	97 81       	ldd	r25, Z+7	; 0x07
    1a48:	9d 83       	std	Y+5, r25	; 0x05
    1a4a:	8c 83       	std	Y+4, r24	; 0x04
    1a4c:	c6 81       	ldd	r28, Z+6	; 0x06
    1a4e:	d7 81       	ldd	r29, Z+7	; 0x07
    1a50:	84 81       	ldd	r24, Z+4	; 0x04
    1a52:	95 81       	ldd	r25, Z+5	; 0x05
    1a54:	9b 83       	std	Y+3, r25	; 0x03
    1a56:	8a 83       	std	Y+2, r24	; 0x02
    1a58:	11 96       	adiw	r26, 0x01	; 1
    1a5a:	8d 91       	ld	r24, X+
    1a5c:	9c 91       	ld	r25, X
    1a5e:	12 97       	sbiw	r26, 0x02	; 2
    1a60:	9f 01       	movw	r18, r30
    1a62:	2e 5f       	subi	r18, 0xFE	; 254
    1a64:	3f 4f       	sbci	r19, 0xFF	; 255
    1a66:	82 17       	cp	r24, r18
    1a68:	93 07       	cpc	r25, r19
    1a6a:	31 f4       	brne	.+12     	; 0x1a78 <xTaskResumeAll+0xb4>
    1a6c:	86 81       	ldd	r24, Z+6	; 0x06
    1a6e:	97 81       	ldd	r25, Z+7	; 0x07
    1a70:	12 96       	adiw	r26, 0x02	; 2
    1a72:	9c 93       	st	X, r25
    1a74:	8e 93       	st	-X, r24
    1a76:	11 97       	sbiw	r26, 0x01	; 1
    1a78:	13 86       	std	Z+11, r1	; 0x0b
    1a7a:	12 86       	std	Z+10, r1	; 0x0a
    1a7c:	8c 91       	ld	r24, X
    1a7e:	81 50       	subi	r24, 0x01	; 1
    1a80:	8c 93       	st	X, r24
    1a82:	86 89       	ldd	r24, Z+22	; 0x16
    1a84:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <uxTopReadyPriority>
    1a88:	98 17       	cp	r25, r24
    1a8a:	10 f4       	brcc	.+4      	; 0x1a90 <xTaskResumeAll+0xcc>
    1a8c:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <uxTopReadyPriority>
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	dc 01       	movw	r26, r24
    1a94:	aa 0f       	add	r26, r26
    1a96:	bb 1f       	adc	r27, r27
    1a98:	aa 0f       	add	r26, r26
    1a9a:	bb 1f       	adc	r27, r27
    1a9c:	aa 0f       	add	r26, r26
    1a9e:	bb 1f       	adc	r27, r27
    1aa0:	8a 0f       	add	r24, r26
    1aa2:	9b 1f       	adc	r25, r27
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	a3 57       	subi	r26, 0x73	; 115
    1aa8:	b8 4f       	sbci	r27, 0xF8	; 248
    1aaa:	11 96       	adiw	r26, 0x01	; 1
    1aac:	0d 90       	ld	r0, X+
    1aae:	bc 91       	ld	r27, X
    1ab0:	a0 2d       	mov	r26, r0
    1ab2:	b5 83       	std	Z+5, r27	; 0x05
    1ab4:	a4 83       	std	Z+4, r26	; 0x04
    1ab6:	14 96       	adiw	r26, 0x04	; 4
    1ab8:	8d 91       	ld	r24, X+
    1aba:	9c 91       	ld	r25, X
    1abc:	15 97       	sbiw	r26, 0x05	; 5
    1abe:	97 83       	std	Z+7, r25	; 0x07
    1ac0:	86 83       	std	Z+6, r24	; 0x06
    1ac2:	14 96       	adiw	r26, 0x04	; 4
    1ac4:	cd 91       	ld	r28, X+
    1ac6:	dc 91       	ld	r29, X
    1ac8:	15 97       	sbiw	r26, 0x05	; 5
    1aca:	3b 83       	std	Y+3, r19	; 0x03
    1acc:	2a 83       	std	Y+2, r18	; 0x02
    1ace:	15 96       	adiw	r26, 0x05	; 5
    1ad0:	3c 93       	st	X, r19
    1ad2:	2e 93       	st	-X, r18
    1ad4:	14 97       	sbiw	r26, 0x04	; 4
    1ad6:	a6 89       	ldd	r26, Z+22	; 0x16
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	cd 01       	movw	r24, r26
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	a8 0f       	add	r26, r24
    1aea:	b9 1f       	adc	r27, r25
    1aec:	a3 57       	subi	r26, 0x73	; 115
    1aee:	b8 4f       	sbci	r27, 0xF8	; 248
    1af0:	b3 87       	std	Z+11, r27	; 0x0b
    1af2:	a2 87       	std	Z+10, r26	; 0x0a
    1af4:	8c 91       	ld	r24, X
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	8c 93       	st	X, r24
    1afa:	96 89       	ldd	r25, Z+22	; 0x16
    1afc:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1b00:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1b04:	56 96       	adiw	r26, 0x16	; 22
    1b06:	8c 91       	ld	r24, X
    1b08:	98 17       	cp	r25, r24
    1b0a:	30 f0       	brcs	.+12     	; 0x1b18 <xTaskResumeAll+0x154>
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <xYieldPending>
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <xTaskResumeAll+0x154>
    1b14:	e0 e0       	ldi	r30, 0x00	; 0
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xPendingReadyList>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	65 cf       	rjmp	.-310    	; 0x19ea <xTaskResumeAll+0x26>
    1b20:	ef 2b       	or	r30, r31
    1b22:	11 f0       	breq	.+4      	; 0x1b28 <xTaskResumeAll+0x164>
    1b24:	0e 94 72 09 	call	0x12e4	; 0x12e4 <prvResetNextTaskUnblockTime>
    1b28:	c0 91 5e 07 	lds	r28, 0x075E	; 0x80075e <xPendedTicks>
    1b2c:	d0 91 5f 07 	lds	r29, 0x075F	; 0x80075f <xPendedTicks+0x1>
    1b30:	20 97       	sbiw	r28, 0x00	; 0
    1b32:	69 f0       	breq	.+26     	; 0x1b4e <xTaskResumeAll+0x18a>
    1b34:	0e 94 c8 0b 	call	0x1790	; 0x1790 <xTaskIncrementTick>
    1b38:	88 23       	and	r24, r24
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <xTaskResumeAll+0x17e>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <xYieldPending>
    1b42:	21 97       	sbiw	r28, 0x01	; 1
    1b44:	b9 f7       	brne	.-18     	; 0x1b34 <xTaskResumeAll+0x170>
    1b46:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <xPendedTicks+0x1>
    1b4a:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <xPendedTicks>
    1b4e:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <xYieldPending>
    1b52:	88 23       	and	r24, r24
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <xTaskResumeAll+0x19e>
    1b56:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <xTaskResumeAll+0x1a0>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <xTaskResumeAll+0x1a0>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <vTaskDelay>:
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ec 01       	movw	r28, r24
    1b74:	89 2b       	or	r24, r25
    1b76:	49 f0       	breq	.+18     	; 0x1b8a <vTaskDelay+0x1c>
    1b78:	0e 94 b8 0b 	call	0x1770	; 0x1770 <vTaskSuspendAll>
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	ce 01       	movw	r24, r28
    1b80:	0e 94 ae 0a 	call	0x155c	; 0x155c <prvAddCurrentTaskToDelayedList>
    1b84:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <vTaskDelay+0x1e>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <vTaskDelay+0x26>
    1b90:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <vTaskSwitchContext>:
    1b9a:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxSchedulerSuspended>
    1b9e:	88 23       	and	r24, r24
    1ba0:	21 f0       	breq	.+8      	; 0x1baa <vTaskSwitchContext+0x10>
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <xYieldPending>
    1ba8:	08 95       	ret
    1baa:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <xYieldPending>
    1bae:	20 91 61 07 	lds	r18, 0x0761	; 0x800761 <uxTopReadyPriority>
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <vTaskSwitchContext+0x1c>
    1bb4:	21 50       	subi	r18, 0x01	; 1
    1bb6:	82 2f       	mov	r24, r18
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	fc 01       	movw	r30, r24
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	e8 0f       	add	r30, r24
    1bca:	f9 1f       	adc	r31, r25
    1bcc:	e3 57       	subi	r30, 0x73	; 115
    1bce:	f8 4f       	sbci	r31, 0xF8	; 248
    1bd0:	30 81       	ld	r19, Z
    1bd2:	33 23       	and	r19, r19
    1bd4:	79 f3       	breq	.-34     	; 0x1bb4 <vTaskSwitchContext+0x1a>
    1bd6:	ac 01       	movw	r20, r24
    1bd8:	44 0f       	add	r20, r20
    1bda:	55 1f       	adc	r21, r21
    1bdc:	44 0f       	add	r20, r20
    1bde:	55 1f       	adc	r21, r21
    1be0:	44 0f       	add	r20, r20
    1be2:	55 1f       	adc	r21, r21
    1be4:	48 0f       	add	r20, r24
    1be6:	59 1f       	adc	r21, r25
    1be8:	df 01       	movw	r26, r30
    1bea:	01 80       	ldd	r0, Z+1	; 0x01
    1bec:	f2 81       	ldd	r31, Z+2	; 0x02
    1bee:	e0 2d       	mov	r30, r0
    1bf0:	02 80       	ldd	r0, Z+2	; 0x02
    1bf2:	f3 81       	ldd	r31, Z+3	; 0x03
    1bf4:	e0 2d       	mov	r30, r0
    1bf6:	12 96       	adiw	r26, 0x02	; 2
    1bf8:	fc 93       	st	X, r31
    1bfa:	ee 93       	st	-X, r30
    1bfc:	11 97       	sbiw	r26, 0x01	; 1
    1bfe:	40 57       	subi	r20, 0x70	; 112
    1c00:	58 4f       	sbci	r21, 0xF8	; 248
    1c02:	e4 17       	cp	r30, r20
    1c04:	f5 07       	cpc	r31, r21
    1c06:	29 f4       	brne	.+10     	; 0x1c12 <vTaskSwitchContext+0x78>
    1c08:	42 81       	ldd	r20, Z+2	; 0x02
    1c0a:	53 81       	ldd	r21, Z+3	; 0x03
    1c0c:	fd 01       	movw	r30, r26
    1c0e:	52 83       	std	Z+2, r21	; 0x02
    1c10:	41 83       	std	Z+1, r20	; 0x01
    1c12:	fc 01       	movw	r30, r24
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	ee 0f       	add	r30, r30
    1c1a:	ff 1f       	adc	r31, r31
    1c1c:	ee 0f       	add	r30, r30
    1c1e:	ff 1f       	adc	r31, r31
    1c20:	8e 0f       	add	r24, r30
    1c22:	9f 1f       	adc	r25, r31
    1c24:	fc 01       	movw	r30, r24
    1c26:	e3 57       	subi	r30, 0x73	; 115
    1c28:	f8 4f       	sbci	r31, 0xF8	; 248
    1c2a:	01 80       	ldd	r0, Z+1	; 0x01
    1c2c:	f2 81       	ldd	r31, Z+2	; 0x02
    1c2e:	e0 2d       	mov	r30, r0
    1c30:	86 81       	ldd	r24, Z+6	; 0x06
    1c32:	97 81       	ldd	r25, Z+7	; 0x07
    1c34:	90 93 b2 07 	sts	0x07B2, r25	; 0x8007b2 <pxCurrentTCB+0x1>
    1c38:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <pxCurrentTCB>
    1c3c:	20 93 61 07 	sts	0x0761, r18	; 0x800761 <uxTopReadyPriority>
    1c40:	08 95       	ret

00001c42 <vTaskSuspend>:
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	0f 92       	push	r0
    1c52:	89 2b       	or	r24, r25
    1c54:	21 f4       	brne	.+8      	; 0x1c5e <vTaskSuspend+0x1c>
    1c56:	c0 91 b1 07 	lds	r28, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1c5a:	d0 91 b2 07 	lds	r29, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1c5e:	8e 01       	movw	r16, r28
    1c60:	0e 5f       	subi	r16, 0xFE	; 254
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	c8 01       	movw	r24, r16
    1c66:	0e 94 4b 05 	call	0xa96	; 0xa96 <uxListRemove>
    1c6a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c6c:	9d 89       	ldd	r25, Y+21	; 0x15
    1c6e:	89 2b       	or	r24, r25
    1c70:	21 f0       	breq	.+8      	; 0x1c7a <vTaskSuspend+0x38>
    1c72:	ce 01       	movw	r24, r28
    1c74:	0c 96       	adiw	r24, 0x0c	; 12
    1c76:	0e 94 4b 05 	call	0xa96	; 0xa96 <uxListRemove>
    1c7a:	b8 01       	movw	r22, r16
    1c7c:	85 e6       	ldi	r24, 0x65	; 101
    1c7e:	97 e0       	ldi	r25, 0x07	; 7
    1c80:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <vTaskSuspend+0x64>
    1c88:	28 2f       	mov	r18, r24
    1c8a:	08 2e       	mov	r0, r24
    1c8c:	00 0c       	add	r0, r0
    1c8e:	33 0b       	sbc	r19, r19
    1c90:	fe 01       	movw	r30, r28
    1c92:	e2 0f       	add	r30, r18
    1c94:	f3 1f       	adc	r31, r19
    1c96:	95 a1       	ldd	r25, Z+37	; 0x25
    1c98:	91 30       	cpi	r25, 0x01	; 1
    1c9a:	21 f4       	brne	.+8      	; 0x1ca4 <vTaskSuspend+0x62>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	15 a2       	std	Z+37, r1	; 0x25
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	18 16       	cp	r1, r24
    1ca8:	7c f7       	brge	.-34     	; 0x1c88 <vTaskSuspend+0x46>
    1caa:	0f 90       	pop	r0
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xSchedulerRunning>
    1cb2:	88 23       	and	r24, r24
    1cb4:	39 f0       	breq	.+14     	; 0x1cc4 <vTaskSuspend+0x82>
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	0f 92       	push	r0
    1cbc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <prvResetNextTaskUnblockTime>
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1cc8:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1ccc:	c8 17       	cp	r28, r24
    1cce:	d9 07       	cpc	r29, r25
    1cd0:	a1 f4       	brne	.+40     	; 0x1cfa <vTaskSuspend+0xb8>
    1cd2:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <xSchedulerRunning>
    1cd6:	88 23       	and	r24, r24
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <vTaskSuspend+0x9e>
    1cda:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    1cde:	0d c0       	rjmp	.+26     	; 0x1cfa <vTaskSuspend+0xb8>
    1ce0:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <xSuspendedTaskList>
    1ce4:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <uxCurrentNumberOfTasks>
    1ce8:	98 13       	cpse	r25, r24
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <vTaskSuspend+0xb4>
    1cec:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <pxCurrentTCB+0x1>
    1cf0:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <pxCurrentTCB>
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <vTaskSuspend+0xb8>
    1cf6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <vTaskSwitchContext>
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <vTaskPlaceOnEventList>:
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	eb 01       	movw	r28, r22
    1d0a:	60 91 b1 07 	lds	r22, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1d0e:	70 91 b2 07 	lds	r23, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1d12:	64 5f       	subi	r22, 0xF4	; 244
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	0e 94 1a 05 	call	0xa34	; 0xa34 <vListInsert>
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	0e 94 ae 0a 	call	0x155c	; 0x155c <prvAddCurrentTaskToDelayedList>
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	08 95       	ret

00001d28 <vTaskPlaceOnUnorderedEventList>:
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1d32:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1d36:	70 68       	ori	r23, 0x80	; 128
    1d38:	1d 96       	adiw	r26, 0x0d	; 13
    1d3a:	7c 93       	st	X, r23
    1d3c:	6e 93       	st	-X, r22
    1d3e:	1c 97       	sbiw	r26, 0x0c	; 12
    1d40:	a1 81       	ldd	r26, Z+1	; 0x01
    1d42:	b2 81       	ldd	r27, Z+2	; 0x02
    1d44:	c0 91 b1 07 	lds	r28, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1d48:	d0 91 b2 07 	lds	r29, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1d4c:	bf 87       	std	Y+15, r27	; 0x0f
    1d4e:	ae 87       	std	Y+14, r26	; 0x0e
    1d50:	c0 91 b1 07 	lds	r28, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1d54:	d0 91 b2 07 	lds	r29, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1d58:	14 96       	adiw	r26, 0x04	; 4
    1d5a:	8d 91       	ld	r24, X+
    1d5c:	9c 91       	ld	r25, X
    1d5e:	15 97       	sbiw	r26, 0x05	; 5
    1d60:	99 8b       	std	Y+17, r25	; 0x11
    1d62:	88 8b       	std	Y+16, r24	; 0x10
    1d64:	14 96       	adiw	r26, 0x04	; 4
    1d66:	cd 91       	ld	r28, X+
    1d68:	dc 91       	ld	r29, X
    1d6a:	15 97       	sbiw	r26, 0x05	; 5
    1d6c:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1d70:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1d74:	24 5f       	subi	r18, 0xF4	; 244
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	3b 83       	std	Y+3, r19	; 0x03
    1d7a:	2a 83       	std	Y+2, r18	; 0x02
    1d7c:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1d80:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1d84:	24 5f       	subi	r18, 0xF4	; 244
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	15 96       	adiw	r26, 0x05	; 5
    1d8a:	3c 93       	st	X, r19
    1d8c:	2e 93       	st	-X, r18
    1d8e:	14 97       	sbiw	r26, 0x04	; 4
    1d90:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1d94:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1d98:	55 96       	adiw	r26, 0x15	; 21
    1d9a:	fc 93       	st	X, r31
    1d9c:	ee 93       	st	-X, r30
    1d9e:	54 97       	sbiw	r26, 0x14	; 20
    1da0:	90 81       	ld	r25, Z
    1da2:	9f 5f       	subi	r25, 0xFF	; 255
    1da4:	90 83       	st	Z, r25
    1da6:	61 e0       	ldi	r22, 0x01	; 1
    1da8:	ca 01       	movw	r24, r20
    1daa:	0e 94 ae 0a 	call	0x155c	; 0x155c <prvAddCurrentTaskToDelayedList>
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <vTaskPlaceOnEventListRestricted>:
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	8b 01       	movw	r16, r22
    1dc0:	a1 81       	ldd	r26, Z+1	; 0x01
    1dc2:	b2 81       	ldd	r27, Z+2	; 0x02
    1dc4:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1dc8:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1dcc:	ec 01       	movw	r28, r24
    1dce:	bf 87       	std	Y+15, r27	; 0x0f
    1dd0:	ae 87       	std	Y+14, r26	; 0x0e
    1dd2:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1dd6:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1dda:	14 96       	adiw	r26, 0x04	; 4
    1ddc:	2d 91       	ld	r18, X+
    1dde:	3c 91       	ld	r19, X
    1de0:	15 97       	sbiw	r26, 0x05	; 5
    1de2:	ec 01       	movw	r28, r24
    1de4:	39 8b       	std	Y+17, r19	; 0x11
    1de6:	28 8b       	std	Y+16, r18	; 0x10
    1de8:	14 96       	adiw	r26, 0x04	; 4
    1dea:	8d 91       	ld	r24, X+
    1dec:	9c 91       	ld	r25, X
    1dee:	15 97       	sbiw	r26, 0x05	; 5
    1df0:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1df4:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1df8:	24 5f       	subi	r18, 0xF4	; 244
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	ec 01       	movw	r28, r24
    1dfe:	3b 83       	std	Y+3, r19	; 0x03
    1e00:	2a 83       	std	Y+2, r18	; 0x02
    1e02:	20 91 b1 07 	lds	r18, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1e06:	30 91 b2 07 	lds	r19, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1e0a:	24 5f       	subi	r18, 0xF4	; 244
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	15 96       	adiw	r26, 0x05	; 5
    1e10:	3c 93       	st	X, r19
    1e12:	2e 93       	st	-X, r18
    1e14:	14 97       	sbiw	r26, 0x04	; 4
    1e16:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1e1a:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1e1e:	55 96       	adiw	r26, 0x15	; 21
    1e20:	fc 93       	st	X, r31
    1e22:	ee 93       	st	-X, r30
    1e24:	54 97       	sbiw	r26, 0x14	; 20
    1e26:	90 81       	ld	r25, Z
    1e28:	9f 5f       	subi	r25, 0xFF	; 255
    1e2a:	90 83       	st	Z, r25
    1e2c:	44 23       	and	r20, r20
    1e2e:	11 f0       	breq	.+4      	; 0x1e34 <vTaskPlaceOnEventListRestricted+0x80>
    1e30:	0f ef       	ldi	r16, 0xFF	; 255
    1e32:	1f ef       	ldi	r17, 0xFF	; 255
    1e34:	64 2f       	mov	r22, r20
    1e36:	c8 01       	movw	r24, r16
    1e38:	0e 94 ae 0a 	call	0x155c	; 0x155c <prvAddCurrentTaskToDelayedList>
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	08 95       	ret

00001e46 <xTaskRemoveFromEventList>:
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	15 96       	adiw	r26, 0x05	; 5
    1e4e:	ed 91       	ld	r30, X+
    1e50:	fc 91       	ld	r31, X
    1e52:	16 97       	sbiw	r26, 0x06	; 6
    1e54:	06 80       	ldd	r0, Z+6	; 0x06
    1e56:	f7 81       	ldd	r31, Z+7	; 0x07
    1e58:	e0 2d       	mov	r30, r0
    1e5a:	a4 89       	ldd	r26, Z+20	; 0x14
    1e5c:	b5 89       	ldd	r27, Z+21	; 0x15
    1e5e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1e60:	d7 85       	ldd	r29, Z+15	; 0x0f
    1e62:	80 89       	ldd	r24, Z+16	; 0x10
    1e64:	91 89       	ldd	r25, Z+17	; 0x11
    1e66:	9d 83       	std	Y+5, r25	; 0x05
    1e68:	8c 83       	std	Y+4, r24	; 0x04
    1e6a:	c0 89       	ldd	r28, Z+16	; 0x10
    1e6c:	d1 89       	ldd	r29, Z+17	; 0x11
    1e6e:	86 85       	ldd	r24, Z+14	; 0x0e
    1e70:	97 85       	ldd	r25, Z+15	; 0x0f
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	8d 91       	ld	r24, X+
    1e7a:	9c 91       	ld	r25, X
    1e7c:	12 97       	sbiw	r26, 0x02	; 2
    1e7e:	9f 01       	movw	r18, r30
    1e80:	24 5f       	subi	r18, 0xF4	; 244
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	82 17       	cp	r24, r18
    1e86:	93 07       	cpc	r25, r19
    1e88:	31 f4       	brne	.+12     	; 0x1e96 <xTaskRemoveFromEventList+0x50>
    1e8a:	80 89       	ldd	r24, Z+16	; 0x10
    1e8c:	91 89       	ldd	r25, Z+17	; 0x11
    1e8e:	12 96       	adiw	r26, 0x02	; 2
    1e90:	9c 93       	st	X, r25
    1e92:	8e 93       	st	-X, r24
    1e94:	11 97       	sbiw	r26, 0x01	; 1
    1e96:	15 8a       	std	Z+21, r1	; 0x15
    1e98:	14 8a       	std	Z+20, r1	; 0x14
    1e9a:	8c 91       	ld	r24, X
    1e9c:	81 50       	subi	r24, 0x01	; 1
    1e9e:	8c 93       	st	X, r24
    1ea0:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxSchedulerSuspended>
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	60 c0       	rjmp	.+192    	; 0x1f68 <xTaskRemoveFromEventList+0x122>
    1ea8:	a2 85       	ldd	r26, Z+10	; 0x0a
    1eaa:	b3 85       	ldd	r27, Z+11	; 0x0b
    1eac:	c4 81       	ldd	r28, Z+4	; 0x04
    1eae:	d5 81       	ldd	r29, Z+5	; 0x05
    1eb0:	86 81       	ldd	r24, Z+6	; 0x06
    1eb2:	97 81       	ldd	r25, Z+7	; 0x07
    1eb4:	9d 83       	std	Y+5, r25	; 0x05
    1eb6:	8c 83       	std	Y+4, r24	; 0x04
    1eb8:	c6 81       	ldd	r28, Z+6	; 0x06
    1eba:	d7 81       	ldd	r29, Z+7	; 0x07
    1ebc:	84 81       	ldd	r24, Z+4	; 0x04
    1ebe:	95 81       	ldd	r25, Z+5	; 0x05
    1ec0:	9b 83       	std	Y+3, r25	; 0x03
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
    1ec4:	11 96       	adiw	r26, 0x01	; 1
    1ec6:	8d 91       	ld	r24, X+
    1ec8:	9c 91       	ld	r25, X
    1eca:	12 97       	sbiw	r26, 0x02	; 2
    1ecc:	9f 01       	movw	r18, r30
    1ece:	2e 5f       	subi	r18, 0xFE	; 254
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	82 17       	cp	r24, r18
    1ed4:	93 07       	cpc	r25, r19
    1ed6:	31 f4       	brne	.+12     	; 0x1ee4 <xTaskRemoveFromEventList+0x9e>
    1ed8:	86 81       	ldd	r24, Z+6	; 0x06
    1eda:	97 81       	ldd	r25, Z+7	; 0x07
    1edc:	12 96       	adiw	r26, 0x02	; 2
    1ede:	9c 93       	st	X, r25
    1ee0:	8e 93       	st	-X, r24
    1ee2:	11 97       	sbiw	r26, 0x01	; 1
    1ee4:	13 86       	std	Z+11, r1	; 0x0b
    1ee6:	12 86       	std	Z+10, r1	; 0x0a
    1ee8:	8c 91       	ld	r24, X
    1eea:	81 50       	subi	r24, 0x01	; 1
    1eec:	8c 93       	st	X, r24
    1eee:	86 89       	ldd	r24, Z+22	; 0x16
    1ef0:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <uxTopReadyPriority>
    1ef4:	98 17       	cp	r25, r24
    1ef6:	10 f4       	brcc	.+4      	; 0x1efc <xTaskRemoveFromEventList+0xb6>
    1ef8:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <uxTopReadyPriority>
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	dc 01       	movw	r26, r24
    1f00:	aa 0f       	add	r26, r26
    1f02:	bb 1f       	adc	r27, r27
    1f04:	aa 0f       	add	r26, r26
    1f06:	bb 1f       	adc	r27, r27
    1f08:	aa 0f       	add	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	8a 0f       	add	r24, r26
    1f0e:	9b 1f       	adc	r25, r27
    1f10:	dc 01       	movw	r26, r24
    1f12:	a3 57       	subi	r26, 0x73	; 115
    1f14:	b8 4f       	sbci	r27, 0xF8	; 248
    1f16:	11 96       	adiw	r26, 0x01	; 1
    1f18:	0d 90       	ld	r0, X+
    1f1a:	bc 91       	ld	r27, X
    1f1c:	a0 2d       	mov	r26, r0
    1f1e:	b5 83       	std	Z+5, r27	; 0x05
    1f20:	a4 83       	std	Z+4, r26	; 0x04
    1f22:	14 96       	adiw	r26, 0x04	; 4
    1f24:	8d 91       	ld	r24, X+
    1f26:	9c 91       	ld	r25, X
    1f28:	15 97       	sbiw	r26, 0x05	; 5
    1f2a:	97 83       	std	Z+7, r25	; 0x07
    1f2c:	86 83       	std	Z+6, r24	; 0x06
    1f2e:	14 96       	adiw	r26, 0x04	; 4
    1f30:	cd 91       	ld	r28, X+
    1f32:	dc 91       	ld	r29, X
    1f34:	15 97       	sbiw	r26, 0x05	; 5
    1f36:	3b 83       	std	Y+3, r19	; 0x03
    1f38:	2a 83       	std	Y+2, r18	; 0x02
    1f3a:	15 96       	adiw	r26, 0x05	; 5
    1f3c:	3c 93       	st	X, r19
    1f3e:	2e 93       	st	-X, r18
    1f40:	14 97       	sbiw	r26, 0x04	; 4
    1f42:	a6 89       	ldd	r26, Z+22	; 0x16
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	cd 01       	movw	r24, r26
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	a8 0f       	add	r26, r24
    1f56:	b9 1f       	adc	r27, r25
    1f58:	a3 57       	subi	r26, 0x73	; 115
    1f5a:	b8 4f       	sbci	r27, 0xF8	; 248
    1f5c:	b3 87       	std	Z+11, r27	; 0x0b
    1f5e:	a2 87       	std	Z+10, r26	; 0x0a
    1f60:	8c 91       	ld	r24, X
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	8c 93       	st	X, r24
    1f66:	1c c0       	rjmp	.+56     	; 0x1fa0 <xTaskRemoveFromEventList+0x15a>
    1f68:	4e e6       	ldi	r20, 0x6E	; 110
    1f6a:	57 e0       	ldi	r21, 0x07	; 7
    1f6c:	da 01       	movw	r26, r20
    1f6e:	11 96       	adiw	r26, 0x01	; 1
    1f70:	cd 91       	ld	r28, X+
    1f72:	dc 91       	ld	r29, X
    1f74:	12 97       	sbiw	r26, 0x02	; 2
    1f76:	d7 87       	std	Z+15, r29	; 0x0f
    1f78:	c6 87       	std	Z+14, r28	; 0x0e
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7e:	91 8b       	std	Z+17, r25	; 0x11
    1f80:	80 8b       	std	Z+16, r24	; 0x10
    1f82:	8c 81       	ldd	r24, Y+4	; 0x04
    1f84:	9d 81       	ldd	r25, Y+5	; 0x05
    1f86:	dc 01       	movw	r26, r24
    1f88:	13 96       	adiw	r26, 0x03	; 3
    1f8a:	3c 93       	st	X, r19
    1f8c:	2e 93       	st	-X, r18
    1f8e:	12 97       	sbiw	r26, 0x02	; 2
    1f90:	3d 83       	std	Y+5, r19	; 0x05
    1f92:	2c 83       	std	Y+4, r18	; 0x04
    1f94:	55 8b       	std	Z+21, r21	; 0x15
    1f96:	44 8b       	std	Z+20, r20	; 0x14
    1f98:	da 01       	movw	r26, r20
    1f9a:	8c 91       	ld	r24, X
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	8c 93       	st	X, r24
    1fa0:	96 89       	ldd	r25, Z+22	; 0x16
    1fa2:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    1fa6:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    1faa:	86 89       	ldd	r24, Z+22	; 0x16
    1fac:	89 17       	cp	r24, r25
    1fae:	20 f4       	brcc	.+8      	; 0x1fb8 <xTaskRemoveFromEventList+0x172>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <xYieldPending>
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <xTaskRemoveFromEventList+0x174>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <vTaskRemoveFromUnorderedEventList>:
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	70 68       	ori	r23, 0x80	; 128
    1fc8:	11 96       	adiw	r26, 0x01	; 1
    1fca:	7c 93       	st	X, r23
    1fcc:	6e 93       	st	-X, r22
    1fce:	16 96       	adiw	r26, 0x06	; 6
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	fc 91       	ld	r31, X
    1fd4:	17 97       	sbiw	r26, 0x07	; 7
    1fd6:	18 96       	adiw	r26, 0x08	; 8
    1fd8:	4d 91       	ld	r20, X+
    1fda:	5c 91       	ld	r21, X
    1fdc:	19 97       	sbiw	r26, 0x09	; 9
    1fde:	12 96       	adiw	r26, 0x02	; 2
    1fe0:	8d 91       	ld	r24, X+
    1fe2:	9c 91       	ld	r25, X
    1fe4:	13 97       	sbiw	r26, 0x03	; 3
    1fe6:	14 96       	adiw	r26, 0x04	; 4
    1fe8:	2d 91       	ld	r18, X+
    1fea:	3c 91       	ld	r19, X
    1fec:	15 97       	sbiw	r26, 0x05	; 5
    1fee:	ec 01       	movw	r28, r24
    1ff0:	3d 83       	std	Y+5, r19	; 0x05
    1ff2:	2c 83       	std	Y+4, r18	; 0x04
    1ff4:	14 96       	adiw	r26, 0x04	; 4
    1ff6:	8d 91       	ld	r24, X+
    1ff8:	9c 91       	ld	r25, X
    1ffa:	15 97       	sbiw	r26, 0x05	; 5
    1ffc:	12 96       	adiw	r26, 0x02	; 2
    1ffe:	2d 91       	ld	r18, X+
    2000:	3c 91       	ld	r19, X
    2002:	13 97       	sbiw	r26, 0x03	; 3
    2004:	ec 01       	movw	r28, r24
    2006:	3b 83       	std	Y+3, r19	; 0x03
    2008:	2a 83       	std	Y+2, r18	; 0x02
    200a:	ea 01       	movw	r28, r20
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	a8 17       	cp	r26, r24
    2012:	b9 07       	cpc	r27, r25
    2014:	31 f4       	brne	.+12     	; 0x2022 <vTaskRemoveFromUnorderedEventList+0x62>
    2016:	14 96       	adiw	r26, 0x04	; 4
    2018:	8d 91       	ld	r24, X+
    201a:	9c 91       	ld	r25, X
    201c:	15 97       	sbiw	r26, 0x05	; 5
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	19 96       	adiw	r26, 0x09	; 9
    2024:	1c 92       	st	X, r1
    2026:	1e 92       	st	-X, r1
    2028:	18 97       	sbiw	r26, 0x08	; 8
    202a:	da 01       	movw	r26, r20
    202c:	8c 91       	ld	r24, X
    202e:	81 50       	subi	r24, 0x01	; 1
    2030:	8c 93       	st	X, r24
    2032:	a2 85       	ldd	r26, Z+10	; 0x0a
    2034:	b3 85       	ldd	r27, Z+11	; 0x0b
    2036:	c4 81       	ldd	r28, Z+4	; 0x04
    2038:	d5 81       	ldd	r29, Z+5	; 0x05
    203a:	86 81       	ldd	r24, Z+6	; 0x06
    203c:	97 81       	ldd	r25, Z+7	; 0x07
    203e:	9d 83       	std	Y+5, r25	; 0x05
    2040:	8c 83       	std	Y+4, r24	; 0x04
    2042:	c6 81       	ldd	r28, Z+6	; 0x06
    2044:	d7 81       	ldd	r29, Z+7	; 0x07
    2046:	84 81       	ldd	r24, Z+4	; 0x04
    2048:	95 81       	ldd	r25, Z+5	; 0x05
    204a:	9b 83       	std	Y+3, r25	; 0x03
    204c:	8a 83       	std	Y+2, r24	; 0x02
    204e:	11 96       	adiw	r26, 0x01	; 1
    2050:	8d 91       	ld	r24, X+
    2052:	9c 91       	ld	r25, X
    2054:	12 97       	sbiw	r26, 0x02	; 2
    2056:	9f 01       	movw	r18, r30
    2058:	2e 5f       	subi	r18, 0xFE	; 254
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	82 17       	cp	r24, r18
    205e:	93 07       	cpc	r25, r19
    2060:	31 f4       	brne	.+12     	; 0x206e <vTaskRemoveFromUnorderedEventList+0xae>
    2062:	86 81       	ldd	r24, Z+6	; 0x06
    2064:	97 81       	ldd	r25, Z+7	; 0x07
    2066:	12 96       	adiw	r26, 0x02	; 2
    2068:	9c 93       	st	X, r25
    206a:	8e 93       	st	-X, r24
    206c:	11 97       	sbiw	r26, 0x01	; 1
    206e:	13 86       	std	Z+11, r1	; 0x0b
    2070:	12 86       	std	Z+10, r1	; 0x0a
    2072:	8c 91       	ld	r24, X
    2074:	81 50       	subi	r24, 0x01	; 1
    2076:	8c 93       	st	X, r24
    2078:	86 89       	ldd	r24, Z+22	; 0x16
    207a:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <uxTopReadyPriority>
    207e:	98 17       	cp	r25, r24
    2080:	10 f4       	brcc	.+4      	; 0x2086 <vTaskRemoveFromUnorderedEventList+0xc6>
    2082:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <uxTopReadyPriority>
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	dc 01       	movw	r26, r24
    208a:	aa 0f       	add	r26, r26
    208c:	bb 1f       	adc	r27, r27
    208e:	aa 0f       	add	r26, r26
    2090:	bb 1f       	adc	r27, r27
    2092:	aa 0f       	add	r26, r26
    2094:	bb 1f       	adc	r27, r27
    2096:	8a 0f       	add	r24, r26
    2098:	9b 1f       	adc	r25, r27
    209a:	dc 01       	movw	r26, r24
    209c:	a3 57       	subi	r26, 0x73	; 115
    209e:	b8 4f       	sbci	r27, 0xF8	; 248
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	0d 90       	ld	r0, X+
    20a4:	bc 91       	ld	r27, X
    20a6:	a0 2d       	mov	r26, r0
    20a8:	b5 83       	std	Z+5, r27	; 0x05
    20aa:	a4 83       	std	Z+4, r26	; 0x04
    20ac:	14 96       	adiw	r26, 0x04	; 4
    20ae:	8d 91       	ld	r24, X+
    20b0:	9c 91       	ld	r25, X
    20b2:	15 97       	sbiw	r26, 0x05	; 5
    20b4:	97 83       	std	Z+7, r25	; 0x07
    20b6:	86 83       	std	Z+6, r24	; 0x06
    20b8:	14 96       	adiw	r26, 0x04	; 4
    20ba:	cd 91       	ld	r28, X+
    20bc:	dc 91       	ld	r29, X
    20be:	15 97       	sbiw	r26, 0x05	; 5
    20c0:	3b 83       	std	Y+3, r19	; 0x03
    20c2:	2a 83       	std	Y+2, r18	; 0x02
    20c4:	15 96       	adiw	r26, 0x05	; 5
    20c6:	3c 93       	st	X, r19
    20c8:	2e 93       	st	-X, r18
    20ca:	14 97       	sbiw	r26, 0x04	; 4
    20cc:	a6 89       	ldd	r26, Z+22	; 0x16
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	cd 01       	movw	r24, r26
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	a8 0f       	add	r26, r24
    20e0:	b9 1f       	adc	r27, r25
    20e2:	a3 57       	subi	r26, 0x73	; 115
    20e4:	b8 4f       	sbci	r27, 0xF8	; 248
    20e6:	b3 87       	std	Z+11, r27	; 0x0b
    20e8:	a2 87       	std	Z+10, r26	; 0x0a
    20ea:	8c 91       	ld	r24, X
    20ec:	8f 5f       	subi	r24, 0xFF	; 255
    20ee:	8c 93       	st	X, r24
    20f0:	96 89       	ldd	r25, Z+22	; 0x16
    20f2:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    20f6:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    20fa:	86 89       	ldd	r24, Z+22	; 0x16
    20fc:	89 17       	cp	r24, r25
    20fe:	18 f4       	brcc	.+6      	; 0x2106 <vTaskRemoveFromUnorderedEventList+0x146>
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <xYieldPending>
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <vTaskInternalSetTimeOutState>:
    210c:	20 91 5c 07 	lds	r18, 0x075C	; 0x80075c <xNumOfOverflows>
    2110:	fc 01       	movw	r30, r24
    2112:	20 83       	st	Z, r18
    2114:	20 91 62 07 	lds	r18, 0x0762	; 0x800762 <xTickCount>
    2118:	30 91 63 07 	lds	r19, 0x0763	; 0x800763 <xTickCount+0x1>
    211c:	32 83       	std	Z+2, r19	; 0x02
    211e:	21 83       	std	Z+1, r18	; 0x01
    2120:	08 95       	ret

00002122 <xTaskCheckForTimeOut>:
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	0f 92       	push	r0
    212e:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <xTickCount>
    2132:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <xTickCount+0x1>
    2136:	dc 01       	movw	r26, r24
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	4d 91       	ld	r20, X+
    213c:	5c 91       	ld	r21, X
    213e:	12 97       	sbiw	r26, 0x02	; 2
    2140:	df 01       	movw	r26, r30
    2142:	a4 1b       	sub	r26, r20
    2144:	b5 0b       	sbc	r27, r21
    2146:	eb 01       	movw	r28, r22
    2148:	28 81       	ld	r18, Y
    214a:	39 81       	ldd	r19, Y+1	; 0x01
    214c:	2f 3f       	cpi	r18, 0xFF	; 255
    214e:	df ef       	ldi	r29, 0xFF	; 255
    2150:	3d 07       	cpc	r19, r29
    2152:	f9 f0       	breq	.+62     	; 0x2192 <xTaskCheckForTimeOut+0x70>
    2154:	ec 01       	movw	r28, r24
    2156:	18 81       	ld	r17, Y
    2158:	c0 91 5c 07 	lds	r28, 0x075C	; 0x80075c <xNumOfOverflows>
    215c:	1c 17       	cp	r17, r28
    215e:	41 f0       	breq	.+16     	; 0x2170 <xTaskCheckForTimeOut+0x4e>
    2160:	e4 17       	cp	r30, r20
    2162:	f5 07       	cpc	r31, r21
    2164:	28 f0       	brcs	.+10     	; 0x2170 <xTaskCheckForTimeOut+0x4e>
    2166:	fb 01       	movw	r30, r22
    2168:	11 82       	std	Z+1, r1	; 0x01
    216a:	10 82       	st	Z, r1
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	12 c0       	rjmp	.+36     	; 0x2194 <xTaskCheckForTimeOut+0x72>
    2170:	a2 17       	cp	r26, r18
    2172:	b3 07       	cpc	r27, r19
    2174:	48 f4       	brcc	.+18     	; 0x2188 <xTaskCheckForTimeOut+0x66>
    2176:	fb 01       	movw	r30, r22
    2178:	2a 1b       	sub	r18, r26
    217a:	3b 0b       	sbc	r19, r27
    217c:	31 83       	std	Z+1, r19	; 0x01
    217e:	20 83       	st	Z, r18
    2180:	0e 94 86 10 	call	0x210c	; 0x210c <vTaskInternalSetTimeOutState>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <xTaskCheckForTimeOut+0x72>
    2188:	db 01       	movw	r26, r22
    218a:	1d 92       	st	X+, r1
    218c:	1c 92       	st	X, r1
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <xTaskCheckForTimeOut+0x72>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	08 95       	ret

000021a0 <vTaskMissedYield>:
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <xYieldPending>
    21a6:	08 95       	ret

000021a8 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    21a8:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    21ac:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    21b0:	84 85       	ldd	r24, Z+12	; 0x0c
    21b2:	95 85       	ldd	r25, Z+13	; 0x0d

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21b4:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    21b8:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    21bc:	a0 91 b1 07 	lds	r26, 0x07B1	; 0x8007b1 <pxCurrentTCB>
    21c0:	b0 91 b2 07 	lds	r27, 0x07B2	; 0x8007b2 <pxCurrentTCB+0x1>
    21c4:	56 96       	adiw	r26, 0x16	; 22
    21c6:	4c 91       	ld	r20, X
    21c8:	24 e0       	ldi	r18, 0x04	; 4
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	24 1b       	sub	r18, r20
    21ce:	31 09       	sbc	r19, r1
    21d0:	35 87       	std	Z+13, r19	; 0x0d
    21d2:	24 87       	std	Z+12, r18	; 0x0c

    return uxReturn;
}
    21d4:	08 95       	ret

000021d6 <prvGetNextExpireTime>:
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    21d6:	dc 01       	movw	r26, r24
    21d8:	e0 91 bb 07 	lds	r30, 0x07BB	; 0x8007bb <pxCurrentTimerList>
    21dc:	f0 91 bc 07 	lds	r31, 0x07BC	; 0x8007bc <pxCurrentTimerList+0x1>
    21e0:	80 81       	ld	r24, Z
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	81 11       	cpse	r24, r1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 93       	st	X, r25
    21ea:	91 11       	cpse	r25, r1
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <prvGetNextExpireTime+0x24>
    21ee:	05 80       	ldd	r0, Z+5	; 0x05
    21f0:	f6 81       	ldd	r31, Z+6	; 0x06
    21f2:	e0 2d       	mov	r30, r0
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	08 95       	ret
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	08 95       	ret

00002200 <prvInsertTimerInActiveList>:
    2200:	fc 01       	movw	r30, r24
    2202:	73 83       	std	Z+3, r23	; 0x03
    2204:	62 83       	std	Z+2, r22	; 0x02
    2206:	91 87       	std	Z+9, r25	; 0x09
    2208:	80 87       	std	Z+8, r24	; 0x08
    220a:	46 17       	cp	r20, r22
    220c:	57 07       	cpc	r21, r23
    220e:	90 f0       	brcs	.+36     	; 0x2234 <prvInsertTimerInActiveList+0x34>
    2210:	42 1b       	sub	r20, r18
    2212:	53 0b       	sbc	r21, r19
    2214:	84 85       	ldd	r24, Z+12	; 0x0c
    2216:	95 85       	ldd	r25, Z+13	; 0x0d
    2218:	48 17       	cp	r20, r24
    221a:	59 07       	cpc	r21, r25
    221c:	e0 f4       	brcc	.+56     	; 0x2256 <prvInsertTimerInActiveList+0x56>
    221e:	bf 01       	movw	r22, r30
    2220:	6e 5f       	subi	r22, 0xFE	; 254
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <pxOverflowTimerList>
    2228:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <pxOverflowTimerList+0x1>
    222c:	0e 94 1a 05 	call	0xa34	; 0xa34 <vListInsert>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	08 95       	ret
    2234:	42 17       	cp	r20, r18
    2236:	53 07       	cpc	r21, r19
    2238:	18 f4       	brcc	.+6      	; 0x2240 <prvInsertTimerInActiveList+0x40>
    223a:	62 17       	cp	r22, r18
    223c:	73 07       	cpc	r23, r19
    223e:	68 f4       	brcc	.+26     	; 0x225a <prvInsertTimerInActiveList+0x5a>
    2240:	bf 01       	movw	r22, r30
    2242:	6e 5f       	subi	r22, 0xFE	; 254
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <pxCurrentTimerList>
    224a:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <pxCurrentTimerList+0x1>
    224e:	0e 94 1a 05 	call	0xa34	; 0xa34 <vListInsert>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	08 95       	ret
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	08 95       	ret
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	08 95       	ret

0000225e <prvReloadTimer>:
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
    226c:	8b 01       	movw	r16, r22
    226e:	7a 01       	movw	r14, r20
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <prvReloadTimer+0x24>
    2272:	8c 85       	ldd	r24, Y+12	; 0x0c
    2274:	9d 85       	ldd	r25, Y+13	; 0x0d
    2276:	08 0f       	add	r16, r24
    2278:	19 1f       	adc	r17, r25
    227a:	e8 89       	ldd	r30, Y+16	; 0x10
    227c:	f9 89       	ldd	r31, Y+17	; 0x11
    227e:	ce 01       	movw	r24, r28
    2280:	09 95       	icall
    2282:	6c 85       	ldd	r22, Y+12	; 0x0c
    2284:	7d 85       	ldd	r23, Y+13	; 0x0d
    2286:	60 0f       	add	r22, r16
    2288:	71 1f       	adc	r23, r17
    228a:	98 01       	movw	r18, r16
    228c:	a7 01       	movw	r20, r14
    228e:	ce 01       	movw	r24, r28
    2290:	0e 94 00 11 	call	0x2200	; 0x2200 <prvInsertTimerInActiveList>
    2294:	81 11       	cpse	r24, r1
    2296:	ed cf       	rjmp	.-38     	; 0x2272 <prvReloadTimer+0x14>
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	ff 90       	pop	r15
    22a2:	ef 90       	pop	r14
    22a4:	08 95       	ret

000022a6 <prvProcessExpiredTimer>:
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	8c 01       	movw	r16, r24
    22b4:	7b 01       	movw	r14, r22
    22b6:	e0 91 bb 07 	lds	r30, 0x07BB	; 0x8007bb <pxCurrentTimerList>
    22ba:	f0 91 bc 07 	lds	r31, 0x07BC	; 0x8007bc <pxCurrentTimerList+0x1>
    22be:	05 80       	ldd	r0, Z+5	; 0x05
    22c0:	f6 81       	ldd	r31, Z+6	; 0x06
    22c2:	e0 2d       	mov	r30, r0
    22c4:	c6 81       	ldd	r28, Z+6	; 0x06
    22c6:	d7 81       	ldd	r29, Z+7	; 0x07
    22c8:	ce 01       	movw	r24, r28
    22ca:	02 96       	adiw	r24, 0x02	; 2
    22cc:	0e 94 4b 05 	call	0xa96	; 0xa96 <uxListRemove>
    22d0:	8a 89       	ldd	r24, Y+18	; 0x12
    22d2:	82 ff       	sbrs	r24, 2
    22d4:	06 c0       	rjmp	.+12     	; 0x22e2 <prvProcessExpiredTimer+0x3c>
    22d6:	a7 01       	movw	r20, r14
    22d8:	b8 01       	movw	r22, r16
    22da:	ce 01       	movw	r24, r28
    22dc:	0e 94 2f 11 	call	0x225e	; 0x225e <prvReloadTimer>
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <prvProcessExpiredTimer+0x40>
    22e2:	8e 7f       	andi	r24, 0xFE	; 254
    22e4:	8a 8b       	std	Y+18, r24	; 0x12
    22e6:	e8 89       	ldd	r30, Y+16	; 0x10
    22e8:	f9 89       	ldd	r31, Y+17	; 0x11
    22ea:	ce 01       	movw	r24, r28
    22ec:	09 95       	icall
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	08 95       	ret

000022fc <prvSwitchTimerLists>:
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <prvSwitchTimerLists+0x14>
    22fe:	05 80       	ldd	r0, Z+5	; 0x05
    2300:	f6 81       	ldd	r31, Z+6	; 0x06
    2302:	e0 2d       	mov	r30, r0
    2304:	6f ef       	ldi	r22, 0xFF	; 255
    2306:	7f ef       	ldi	r23, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvProcessExpiredTimer>
    2310:	e0 91 bb 07 	lds	r30, 0x07BB	; 0x8007bb <pxCurrentTimerList>
    2314:	f0 91 bc 07 	lds	r31, 0x07BC	; 0x8007bc <pxCurrentTimerList+0x1>
    2318:	80 81       	ld	r24, Z
    231a:	81 11       	cpse	r24, r1
    231c:	f0 cf       	rjmp	.-32     	; 0x22fe <prvSwitchTimerLists+0x2>
    231e:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <pxOverflowTimerList>
    2322:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <pxOverflowTimerList+0x1>
    2326:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <pxCurrentTimerList+0x1>
    232a:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <pxCurrentTimerList>
    232e:	f0 93 ba 07 	sts	0x07BA, r31	; 0x8007ba <pxOverflowTimerList+0x1>
    2332:	e0 93 b9 07 	sts	0x07B9, r30	; 0x8007b9 <pxOverflowTimerList>
    2336:	08 95       	ret

00002338 <prvSampleTimeNow>:
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	8c 01       	movw	r16, r24
    2342:	0e 94 be 0b 	call	0x177c	; 0x177c <xTaskGetTickCount>
    2346:	ec 01       	movw	r28, r24
    2348:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <xLastTime.2428>
    234c:	90 91 b4 07 	lds	r25, 0x07B4	; 0x8007b4 <xLastTime.2428+0x1>
    2350:	c8 17       	cp	r28, r24
    2352:	d9 07       	cpc	r29, r25
    2354:	30 f4       	brcc	.+12     	; 0x2362 <prvSampleTimeNow+0x2a>
    2356:	0e 94 7e 11 	call	0x22fc	; 0x22fc <prvSwitchTimerLists>
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	f8 01       	movw	r30, r16
    235e:	80 83       	st	Z, r24
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <prvSampleTimeNow+0x2e>
    2362:	f8 01       	movw	r30, r16
    2364:	10 82       	st	Z, r1
    2366:	d0 93 b4 07 	sts	0x07B4, r29	; 0x8007b4 <xLastTime.2428+0x1>
    236a:	c0 93 b3 07 	sts	0x07B3, r28	; 0x8007b3 <xLastTime.2428>
    236e:	ce 01       	movw	r24, r28
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	08 95       	ret

0000237a <prvProcessTimerOrBlockTask>:
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	1f 92       	push	r1
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	7c 01       	movw	r14, r24
    2390:	16 2f       	mov	r17, r22
    2392:	0e 94 b8 0b 	call	0x1770	; 0x1770 <vTaskSuspendAll>
    2396:	ce 01       	movw	r24, r28
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvSampleTimeNow>
    239e:	6c 01       	movw	r12, r24
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	81 11       	cpse	r24, r1
    23a4:	27 c0       	rjmp	.+78     	; 0x23f4 <prvProcessTimerOrBlockTask+0x7a>
    23a6:	11 11       	cpse	r17, r1
    23a8:	0a c0       	rjmp	.+20     	; 0x23be <prvProcessTimerOrBlockTask+0x44>
    23aa:	ce 14       	cp	r12, r14
    23ac:	df 04       	cpc	r13, r15
    23ae:	38 f0       	brcs	.+14     	; 0x23be <prvProcessTimerOrBlockTask+0x44>
    23b0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    23b4:	b6 01       	movw	r22, r12
    23b6:	c7 01       	movw	r24, r14
    23b8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvProcessExpiredTimer>
    23bc:	1d c0       	rjmp	.+58     	; 0x23f8 <prvProcessTimerOrBlockTask+0x7e>
    23be:	11 23       	and	r17, r17
    23c0:	41 f0       	breq	.+16     	; 0x23d2 <prvProcessTimerOrBlockTask+0x58>
    23c2:	e0 91 b9 07 	lds	r30, 0x07B9	; 0x8007b9 <pxOverflowTimerList>
    23c6:	f0 91 ba 07 	lds	r31, 0x07BA	; 0x8007ba <pxOverflowTimerList+0x1>
    23ca:	80 81       	ld	r24, Z
    23cc:	11 e0       	ldi	r17, 0x01	; 1
    23ce:	81 11       	cpse	r24, r1
    23d0:	10 e0       	ldi	r17, 0x00	; 0
    23d2:	b7 01       	movw	r22, r14
    23d4:	6c 19       	sub	r22, r12
    23d6:	7d 09       	sbc	r23, r13
    23d8:	41 2f       	mov	r20, r17
    23da:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xTimerQueue>
    23de:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xTimerQueue+0x1>
    23e2:	0e 94 55 09 	call	0x12aa	; 0x12aa <vQueueWaitForMessageRestricted>
    23e6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    23ea:	81 11       	cpse	r24, r1
    23ec:	05 c0       	rjmp	.+10     	; 0x23f8 <prvProcessTimerOrBlockTask+0x7e>
    23ee:	0e 94 16 06 	call	0xc2c	; 0xc2c <vPortYield>
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <prvProcessTimerOrBlockTask+0x7e>
    23f4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <xTaskResumeAll>
    23f8:	0f 90       	pop	r0
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	ff 90       	pop	r15
    2402:	ef 90       	pop	r14
    2404:	df 90       	pop	r13
    2406:	cf 90       	pop	r12
    2408:	08 95       	ret

0000240a <prvProcessReceivedCommands>:
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	00 d0       	rcall	.+0      	; 0x2418 <prvProcessReceivedCommands+0xe>
    2418:	00 d0       	rcall	.+0      	; 0x241a <prvProcessReceivedCommands+0x10>
    241a:	00 d0       	rcall	.+0      	; 0x241c <prvProcessReceivedCommands+0x12>
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	7a c0       	rjmp	.+244    	; 0x2516 <prvProcessReceivedCommands+0x10c>
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	88 23       	and	r24, r24
    2426:	0c f4       	brge	.+2      	; 0x242a <prvProcessReceivedCommands+0x20>
    2428:	76 c0       	rjmp	.+236    	; 0x2516 <prvProcessReceivedCommands+0x10c>
    242a:	0c 81       	ldd	r16, Y+4	; 0x04
    242c:	1d 81       	ldd	r17, Y+5	; 0x05
    242e:	d8 01       	movw	r26, r16
    2430:	1a 96       	adiw	r26, 0x0a	; 10
    2432:	8d 91       	ld	r24, X+
    2434:	9c 91       	ld	r25, X
    2436:	1b 97       	sbiw	r26, 0x0b	; 11
    2438:	89 2b       	or	r24, r25
    243a:	21 f0       	breq	.+8      	; 0x2444 <prvProcessReceivedCommands+0x3a>
    243c:	c8 01       	movw	r24, r16
    243e:	02 96       	adiw	r24, 0x02	; 2
    2440:	0e 94 4b 05 	call	0xa96	; 0xa96 <uxListRemove>
    2444:	ce 01       	movw	r24, r28
    2446:	06 96       	adiw	r24, 0x06	; 6
    2448:	0e 94 9c 11 	call	0x2338	; 0x2338 <prvSampleTimeNow>
    244c:	7c 01       	movw	r14, r24
    244e:	e9 81       	ldd	r30, Y+1	; 0x01
    2450:	8e 2f       	mov	r24, r30
    2452:	ee 0f       	add	r30, r30
    2454:	99 0b       	sbc	r25, r25
    2456:	aa 0b       	sbc	r26, r26
    2458:	bb 0b       	sbc	r27, r27
    245a:	fc 01       	movw	r30, r24
    245c:	31 97       	sbiw	r30, 0x01	; 1
    245e:	e9 30       	cpi	r30, 0x09	; 9
    2460:	f1 05       	cpc	r31, r1
    2462:	08 f0       	brcs	.+2      	; 0x2466 <prvProcessReceivedCommands+0x5c>
    2464:	58 c0       	rjmp	.+176    	; 0x2516 <prvProcessReceivedCommands+0x10c>
    2466:	e6 5d       	subi	r30, 0xD6	; 214
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__tablejump2__>
    246e:	f8 01       	movw	r30, r16
    2470:	82 89       	ldd	r24, Z+18	; 0x12
    2472:	81 60       	ori	r24, 0x01	; 1
    2474:	82 8b       	std	Z+18, r24	; 0x12
    2476:	2a 81       	ldd	r18, Y+2	; 0x02
    2478:	3b 81       	ldd	r19, Y+3	; 0x03
    247a:	64 85       	ldd	r22, Z+12	; 0x0c
    247c:	75 85       	ldd	r23, Z+13	; 0x0d
    247e:	62 0f       	add	r22, r18
    2480:	73 1f       	adc	r23, r19
    2482:	a7 01       	movw	r20, r14
    2484:	c8 01       	movw	r24, r16
    2486:	0e 94 00 11 	call	0x2200	; 0x2200 <prvInsertTimerInActiveList>
    248a:	88 23       	and	r24, r24
    248c:	09 f4       	brne	.+2      	; 0x2490 <prvProcessReceivedCommands+0x86>
    248e:	43 c0       	rjmp	.+134    	; 0x2516 <prvProcessReceivedCommands+0x10c>
    2490:	d8 01       	movw	r26, r16
    2492:	52 96       	adiw	r26, 0x12	; 18
    2494:	8c 91       	ld	r24, X
    2496:	52 97       	sbiw	r26, 0x12	; 18
    2498:	82 ff       	sbrs	r24, 2
    249a:	0d c0       	rjmp	.+26     	; 0x24b6 <prvProcessReceivedCommands+0xac>
    249c:	6a 81       	ldd	r22, Y+2	; 0x02
    249e:	7b 81       	ldd	r23, Y+3	; 0x03
    24a0:	1c 96       	adiw	r26, 0x0c	; 12
    24a2:	8d 91       	ld	r24, X+
    24a4:	9c 91       	ld	r25, X
    24a6:	1d 97       	sbiw	r26, 0x0d	; 13
    24a8:	68 0f       	add	r22, r24
    24aa:	79 1f       	adc	r23, r25
    24ac:	a7 01       	movw	r20, r14
    24ae:	c8 01       	movw	r24, r16
    24b0:	0e 94 2f 11 	call	0x225e	; 0x225e <prvReloadTimer>
    24b4:	03 c0       	rjmp	.+6      	; 0x24bc <prvProcessReceivedCommands+0xb2>
    24b6:	8e 7f       	andi	r24, 0xFE	; 254
    24b8:	f8 01       	movw	r30, r16
    24ba:	82 8b       	std	Z+18, r24	; 0x12
    24bc:	d8 01       	movw	r26, r16
    24be:	50 96       	adiw	r26, 0x10	; 16
    24c0:	ed 91       	ld	r30, X+
    24c2:	fc 91       	ld	r31, X
    24c4:	51 97       	sbiw	r26, 0x11	; 17
    24c6:	c8 01       	movw	r24, r16
    24c8:	09 95       	icall
    24ca:	25 c0       	rjmp	.+74     	; 0x2516 <prvProcessReceivedCommands+0x10c>
    24cc:	f8 01       	movw	r30, r16
    24ce:	82 89       	ldd	r24, Z+18	; 0x12
    24d0:	8e 7f       	andi	r24, 0xFE	; 254
    24d2:	82 8b       	std	Z+18, r24	; 0x12
    24d4:	20 c0       	rjmp	.+64     	; 0x2516 <prvProcessReceivedCommands+0x10c>
    24d6:	d8 01       	movw	r26, r16
    24d8:	52 96       	adiw	r26, 0x12	; 18
    24da:	8c 91       	ld	r24, X
    24dc:	52 97       	sbiw	r26, 0x12	; 18
    24de:	81 60       	ori	r24, 0x01	; 1
    24e0:	52 96       	adiw	r26, 0x12	; 18
    24e2:	8c 93       	st	X, r24
    24e4:	52 97       	sbiw	r26, 0x12	; 18
    24e6:	6a 81       	ldd	r22, Y+2	; 0x02
    24e8:	7b 81       	ldd	r23, Y+3	; 0x03
    24ea:	1d 96       	adiw	r26, 0x0d	; 13
    24ec:	7c 93       	st	X, r23
    24ee:	6e 93       	st	-X, r22
    24f0:	1c 97       	sbiw	r26, 0x0c	; 12
    24f2:	6e 0d       	add	r22, r14
    24f4:	7f 1d       	adc	r23, r15
    24f6:	97 01       	movw	r18, r14
    24f8:	a7 01       	movw	r20, r14
    24fa:	c8 01       	movw	r24, r16
    24fc:	0e 94 00 11 	call	0x2200	; 0x2200 <prvInsertTimerInActiveList>
    2500:	0a c0       	rjmp	.+20     	; 0x2516 <prvProcessReceivedCommands+0x10c>
    2502:	f8 01       	movw	r30, r16
    2504:	82 89       	ldd	r24, Z+18	; 0x12
    2506:	81 fd       	sbrc	r24, 1
    2508:	04 c0       	rjmp	.+8      	; 0x2512 <prvProcessReceivedCommands+0x108>
    250a:	c8 01       	movw	r24, r16
    250c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vPortFree>
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <prvProcessReceivedCommands+0x10c>
    2512:	8e 7f       	andi	r24, 0xFE	; 254
    2514:	82 8b       	std	Z+18, r24	; 0x12
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	be 01       	movw	r22, r28
    251c:	6f 5f       	subi	r22, 0xFF	; 255
    251e:	7f 4f       	sbci	r23, 0xFF	; 255
    2520:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xTimerQueue>
    2524:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xTimerQueue+0x1>
    2528:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueReceive>
    252c:	81 11       	cpse	r24, r1
    252e:	79 cf       	rjmp	.-270    	; 0x2422 <prvProcessReceivedCommands+0x18>
    2530:	26 96       	adiw	r28, 0x06	; 6
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	ef 90       	pop	r14
    2548:	08 95       	ret

0000254a <prvTimerTask>:
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	1f 92       	push	r1
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	ce 01       	movw	r24, r28
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <prvGetNextExpireTime>
    255c:	69 81       	ldd	r22, Y+1	; 0x01
    255e:	0e 94 bd 11 	call	0x237a	; 0x237a <prvProcessTimerOrBlockTask>
    2562:	0e 94 05 12 	call	0x240a	; 0x240a <prvProcessReceivedCommands>
    2566:	f6 cf       	rjmp	.-20     	; 0x2554 <prvTimerTask+0xa>

00002568 <prvCheckForValidListAndQueue>:
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	0f 92       	push	r0
    256e:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xTimerQueue>
    2572:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xTimerQueue+0x1>
    2576:	89 2b       	or	r24, r25
    2578:	e9 f4       	brne	.+58     	; 0x25b4 <prvCheckForValidListAndQueue+0x4c>
    257a:	86 ec       	ldi	r24, 0xC6	; 198
    257c:	97 e0       	ldi	r25, 0x07	; 7
    257e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
    2582:	8d eb       	ldi	r24, 0xBD	; 189
    2584:	97 e0       	ldi	r25, 0x07	; 7
    2586:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialise>
    258a:	86 ec       	ldi	r24, 0xC6	; 198
    258c:	97 e0       	ldi	r25, 0x07	; 7
    258e:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <pxCurrentTimerList+0x1>
    2592:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <pxCurrentTimerList>
    2596:	8d eb       	ldi	r24, 0xBD	; 189
    2598:	97 e0       	ldi	r25, 0x07	; 7
    259a:	90 93 ba 07 	sts	0x07BA, r25	; 0x8007ba <pxOverflowTimerList+0x1>
    259e:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <pxOverflowTimerList>
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	65 e0       	ldi	r22, 0x05	; 5
    25a6:	8a e0       	ldi	r24, 0x0A	; 10
    25a8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <xQueueGenericCreate>
    25ac:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xTimerQueue+0x1>
    25b0:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xTimerQueue>
    25b4:	0f 90       	pop	r0
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	08 95       	ret

000025ba <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    25c0:	0e 94 b4 12 	call	0x2568	; 0x2568 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    25c4:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xTimerQueue>
    25c8:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xTimerQueue+0x1>
    25cc:	89 2b       	or	r24, r25
    25ce:	91 f0       	breq	.+36     	; 0x25f4 <xTimerCreateTimerTask+0x3a>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
    25d0:	0f 2e       	mov	r0, r31
    25d2:	f5 eb       	ldi	r31, 0xB5	; 181
    25d4:	ef 2e       	mov	r14, r31
    25d6:	f7 e0       	ldi	r31, 0x07	; 7
    25d8:	ff 2e       	mov	r15, r31
    25da:	f0 2d       	mov	r31, r0
    25dc:	01 e0       	ldi	r16, 0x01	; 1
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	44 e6       	ldi	r20, 0x64	; 100
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	6b ef       	ldi	r22, 0xFB	; 251
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	85 ea       	ldi	r24, 0xA5	; 165
    25ec:	92 e1       	ldi	r25, 0x12	; 18
    25ee:	0e 94 2f 0b 	call	0x165e	; 0x165e <xTaskCreate>
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <xTimerCreateTimerTask+0x3c>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    25f4:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	ef 90       	pop	r14
    25fc:	08 95       	ret

000025fe <EEPROM_Init>:
 */ 

#include "EEPROM_INT.h"

void EEPROM_Init(){
	I2C_init(MASTER);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <I2C_init>
    2604:	08 95       	ret

00002606 <EEPROM_SendByte>:
}

void EEPROM_SendByte(u8 byte,u16 location){
		//Send Start
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    2606:	94 ea       	ldi	r25, 0xA4	; 164
    2608:	96 bf       	out	0x36, r25	; 54
		while (GET_BIT(TWCR,TWINT)==0);
    260a:	06 b6       	in	r0, 0x36	; 54
    260c:	07 fe       	sbrs	r0, 7
    260e:	fd cf       	rjmp	.-6      	; 0x260a <EEPROM_SendByte+0x4>
		
		//Send Location
		u8 varr = 0b10100000|(location>>7);
    2610:	9b 01       	movw	r18, r22
    2612:	22 0f       	add	r18, r18
    2614:	23 2f       	mov	r18, r19
    2616:	22 1f       	adc	r18, r18
    2618:	33 0b       	sbc	r19, r19
    261a:	31 95       	neg	r19
		CLEAR_BIT(varr,0);
    261c:	2e 7f       	andi	r18, 0xFE	; 254
    261e:	20 6a       	ori	r18, 0xA0	; 160
		TWDR = varr;
    2620:	23 b9       	out	0x03, r18	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
    2622:	94 e8       	ldi	r25, 0x84	; 132
    2624:	96 bf       	out	0x36, r25	; 54
		while (GET_BIT(TWCR,TWINT)==0);
    2626:	06 b6       	in	r0, 0x36	; 54
    2628:	07 fe       	sbrs	r0, 7
    262a:	fd cf       	rjmp	.-6      	; 0x2626 <EEPROM_SendByte+0x20>
		
		//Send the remainder of Location
		TWDR = (u8)location;
    262c:	63 b9       	out	0x03, r22	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
    262e:	94 e8       	ldi	r25, 0x84	; 132
    2630:	96 bf       	out	0x36, r25	; 54
		while (GET_BIT(TWCR,TWINT)==0);
    2632:	06 b6       	in	r0, 0x36	; 54
    2634:	07 fe       	sbrs	r0, 7
    2636:	fd cf       	rjmp	.-6      	; 0x2632 <EEPROM_SendByte+0x2c>
		
		//Send Data
		TWDR = byte;
    2638:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
    263a:	84 e8       	ldi	r24, 0x84	; 132
    263c:	86 bf       	out	0x36, r24	; 54
		while (GET_BIT(TWCR,TWINT)==0);
    263e:	06 b6       	in	r0, 0x36	; 54
    2640:	07 fe       	sbrs	r0, 7
    2642:	fd cf       	rjmp	.-6      	; 0x263e <EEPROM_SendByte+0x38>
		
		//Send Stop
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2644:	84 e9       	ldi	r24, 0x94	; 148
    2646:	86 bf       	out	0x36, r24	; 54
    2648:	08 95       	ret

0000264a <EEPROM_ReadByteNACK>:
}

void EEPROM_ReadByteNACK(u8* byte,u16 location){
	//Send Dummy Write Start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    264a:	24 ea       	ldi	r18, 0xA4	; 164
    264c:	26 bf       	out	0x36, r18	; 54
	while (GET_BIT(TWCR,TWINT)==0);
    264e:	06 b6       	in	r0, 0x36	; 54
    2650:	07 fe       	sbrs	r0, 7
    2652:	fd cf       	rjmp	.-6      	; 0x264e <EEPROM_ReadByteNACK+0x4>
	
	//Send Location
	u8 varr = 0b10100000|(location>>7);
    2654:	9b 01       	movw	r18, r22
    2656:	22 0f       	add	r18, r18
    2658:	23 2f       	mov	r18, r19
    265a:	22 1f       	adc	r18, r18
    265c:	33 0b       	sbc	r19, r19
    265e:	31 95       	neg	r19
    2660:	2e 7f       	andi	r18, 0xFE	; 254
	CLEAR_BIT(varr,0);
    2662:	32 2f       	mov	r19, r18
    2664:	30 6a       	ori	r19, 0xA0	; 160
	TWDR = varr;
    2666:	33 b9       	out	0x03, r19	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
    2668:	34 e8       	ldi	r19, 0x84	; 132
    266a:	36 bf       	out	0x36, r19	; 54
	while (GET_BIT(TWCR,TWINT)==0);
    266c:	06 b6       	in	r0, 0x36	; 54
    266e:	07 fe       	sbrs	r0, 7
    2670:	fd cf       	rjmp	.-6      	; 0x266c <EEPROM_ReadByteNACK+0x22>
	
	//Send the remainder of Location
	TWDR = (u8)location;
    2672:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
    2674:	34 e8       	ldi	r19, 0x84	; 132
    2676:	36 bf       	out	0x36, r19	; 54
	while (GET_BIT(TWCR,TWINT)==0);
    2678:	06 b6       	in	r0, 0x36	; 54
    267a:	07 fe       	sbrs	r0, 7
    267c:	fd cf       	rjmp	.-6      	; 0x2678 <EEPROM_ReadByteNACK+0x2e>
	
	//Send Start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    267e:	34 ea       	ldi	r19, 0xA4	; 164
    2680:	36 bf       	out	0x36, r19	; 54
	while (GET_BIT(TWCR,TWINT)==0);
    2682:	06 b6       	in	r0, 0x36	; 54
    2684:	07 fe       	sbrs	r0, 7
    2686:	fd cf       	rjmp	.-6      	; 0x2682 <EEPROM_ReadByteNACK+0x38>
	
	//Send Location
	SET_BIT(varr,0);
    2688:	21 6a       	ori	r18, 0xA1	; 161
	TWDR = varr;
    268a:	23 b9       	out	0x03, r18	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
    268c:	24 e8       	ldi	r18, 0x84	; 132
    268e:	26 bf       	out	0x36, r18	; 54
	while (GET_BIT(TWCR,TWINT)==0);
    2690:	06 b6       	in	r0, 0x36	; 54
    2692:	07 fe       	sbrs	r0, 7
    2694:	fd cf       	rjmp	.-6      	; 0x2690 <EEPROM_ReadByteNACK+0x46>
	
	//Read data
	TWCR = (1<<TWINT)|(1<<TWEN);
    2696:	24 e8       	ldi	r18, 0x84	; 132
    2698:	26 bf       	out	0x36, r18	; 54
	while (GET_BIT(TWCR,TWINT)==0);
    269a:	06 b6       	in	r0, 0x36	; 54
    269c:	07 fe       	sbrs	r0, 7
    269e:	fd cf       	rjmp	.-6      	; 0x269a <EEPROM_ReadByteNACK+0x50>
	*byte = TWDR;
    26a0:	23 b1       	in	r18, 0x03	; 3
    26a2:	fc 01       	movw	r30, r24
    26a4:	20 83       	st	Z, r18
	
	//Send Stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    26a6:	84 e9       	ldi	r24, 0x94	; 148
    26a8:	86 bf       	out	0x36, r24	; 54
    26aa:	08 95       	ret

000026ac <KPD_init>:
#include "KPD_INT.h"

//Initialize
void KPD_init()
{
	DIO_setPinDir(KPD_COL0, DIO_OUTPUT);
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	83 e1       	ldi	r24, 0x13	; 19
    26b0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	DIO_setPinDir(KPD_COL1, DIO_OUTPUT);
    26b4:	61 e0       	ldi	r22, 0x01	; 1
    26b6:	84 e1       	ldi	r24, 0x14	; 20
    26b8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	DIO_setPinDir(KPD_COL2, DIO_OUTPUT);
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	85 e1       	ldi	r24, 0x15	; 21
    26c0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	DIO_setPinDir(KPD_COL3, DIO_OUTPUT);
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	86 e1       	ldi	r24, 0x16	; 22
    26c8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	
	DIO_setPinDir(KPD_ROW0, DIO_INPUT);
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	8c e0       	ldi	r24, 0x0C	; 12
    26d0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW1, DIO_INPUT);
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	8d e0       	ldi	r24, 0x0D	; 13
    26d8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW2, DIO_INPUT);
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	8e e0       	ldi	r24, 0x0E	; 14
    26e0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW3, DIO_INPUT);
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	8f e0       	ldi	r24, 0x0F	; 15
    26e8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
	
	DIO_setPullUp(KPD_ROW0);
    26ec:	8c e0       	ldi	r24, 0x0C	; 12
    26ee:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW1);
    26f2:	8d e0       	ldi	r24, 0x0D	; 13
    26f4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW2);
    26f8:	8e e0       	ldi	r24, 0x0E	; 14
    26fa:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW3);
    26fe:	8f e0       	ldi	r24, 0x0F	; 15
    2700:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <DIO_setPullUp>
    2704:	08 95       	ret

00002706 <KPD_read>:
}

//Read
u8 KPD_read()
{
	DIO_setPinValue(KPD_COL0, DIO_LOW);
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	83 e1       	ldi	r24, 0x13	; 19
    270a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
    270e:	61 e0       	ldi	r22, 0x01	; 1
    2710:	84 e1       	ldi	r24, 0x14	; 20
    2712:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	85 e1       	ldi	r24, 0x15	; 21
    271a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	86 e1       	ldi	r24, 0x16	; 22
    2722:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
    2726:	8c e0       	ldi	r24, 0x0C	; 12
    2728:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    272c:	88 23       	and	r24, r24
    272e:	09 f4       	brne	.+2      	; 0x2732 <KPD_read+0x2c>
    2730:	87 c0       	rjmp	.+270    	; 0x2840 <KPD_read+0x13a>
	{
		return KPD_ROW0_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
    2732:	8d e0       	ldi	r24, 0x0D	; 13
    2734:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2738:	88 23       	and	r24, r24
    273a:	09 f4       	brne	.+2      	; 0x273e <KPD_read+0x38>
    273c:	83 c0       	rjmp	.+262    	; 0x2844 <KPD_read+0x13e>
	{
		return KPD_ROW1_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
    273e:	8e e0       	ldi	r24, 0x0E	; 14
    2740:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2744:	88 23       	and	r24, r24
    2746:	09 f4       	brne	.+2      	; 0x274a <KPD_read+0x44>
    2748:	7f c0       	rjmp	.+254    	; 0x2848 <KPD_read+0x142>
	{
		return KPD_ROW2_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
    274a:	8f e0       	ldi	r24, 0x0F	; 15
    274c:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2750:	88 23       	and	r24, r24
    2752:	09 f4       	brne	.+2      	; 0x2756 <KPD_read+0x50>
    2754:	7b c0       	rjmp	.+246    	; 0x284c <KPD_read+0x146>
	{
		return KPD_ROW3_COL0;
	}
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	83 e1       	ldi	r24, 0x13	; 19
    275a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_LOW);
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	84 e1       	ldi	r24, 0x14	; 20
    2762:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	85 e1       	ldi	r24, 0x15	; 21
    276a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	86 e1       	ldi	r24, 0x16	; 22
    2772:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
    2776:	8c e0       	ldi	r24, 0x0C	; 12
    2778:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    277c:	88 23       	and	r24, r24
    277e:	09 f4       	brne	.+2      	; 0x2782 <KPD_read+0x7c>
    2780:	67 c0       	rjmp	.+206    	; 0x2850 <KPD_read+0x14a>
	{
		return KPD_ROW0_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
    2782:	8d e0       	ldi	r24, 0x0D	; 13
    2784:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2788:	88 23       	and	r24, r24
    278a:	09 f4       	brne	.+2      	; 0x278e <KPD_read+0x88>
    278c:	63 c0       	rjmp	.+198    	; 0x2854 <KPD_read+0x14e>
	{
		return KPD_ROW1_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
    278e:	8e e0       	ldi	r24, 0x0E	; 14
    2790:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2794:	88 23       	and	r24, r24
    2796:	09 f4       	brne	.+2      	; 0x279a <KPD_read+0x94>
    2798:	5f c0       	rjmp	.+190    	; 0x2858 <KPD_read+0x152>
	{
		return KPD_ROW2_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
    279a:	8f e0       	ldi	r24, 0x0F	; 15
    279c:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    27a0:	88 23       	and	r24, r24
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <KPD_read+0xa0>
    27a4:	5b c0       	rjmp	.+182    	; 0x285c <KPD_read+0x156>
	{
		return KPD_ROW3_COL1;
	}
	
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
    27a6:	61 e0       	ldi	r22, 0x01	; 1
    27a8:	83 e1       	ldi	r24, 0x13	; 19
    27aa:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
    27ae:	61 e0       	ldi	r22, 0x01	; 1
    27b0:	84 e1       	ldi	r24, 0x14	; 20
    27b2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_LOW);
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	85 e1       	ldi	r24, 0x15	; 21
    27ba:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	86 e1       	ldi	r24, 0x16	; 22
    27c2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
    27c6:	8c e0       	ldi	r24, 0x0C	; 12
    27c8:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    27cc:	88 23       	and	r24, r24
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <KPD_read+0xcc>
    27d0:	47 c0       	rjmp	.+142    	; 0x2860 <KPD_read+0x15a>
	{
		return KPD_ROW0_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
    27d2:	8d e0       	ldi	r24, 0x0D	; 13
    27d4:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    27d8:	88 23       	and	r24, r24
    27da:	09 f4       	brne	.+2      	; 0x27de <KPD_read+0xd8>
    27dc:	43 c0       	rjmp	.+134    	; 0x2864 <KPD_read+0x15e>
	{
		return KPD_ROW1_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
    27de:	8e e0       	ldi	r24, 0x0E	; 14
    27e0:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    27e4:	88 23       	and	r24, r24
    27e6:	09 f4       	brne	.+2      	; 0x27ea <KPD_read+0xe4>
    27e8:	3f c0       	rjmp	.+126    	; 0x2868 <KPD_read+0x162>
	{
		return KPD_ROW2_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
    27ea:	8f e0       	ldi	r24, 0x0F	; 15
    27ec:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    27f0:	88 23       	and	r24, r24
    27f2:	e1 f1       	breq	.+120    	; 0x286c <KPD_read+0x166>
	{
		return KPD_ROW3_COL2;
	}
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	83 e1       	ldi	r24, 0x13	; 19
    27f8:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	84 e1       	ldi	r24, 0x14	; 20
    2800:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
    2804:	61 e0       	ldi	r22, 0x01	; 1
    2806:	85 e1       	ldi	r24, 0x15	; 21
    2808:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_LOW);
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	86 e1       	ldi	r24, 0x16	; 22
    2810:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
    2814:	8c e0       	ldi	r24, 0x0C	; 12
    2816:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    281a:	88 23       	and	r24, r24
    281c:	49 f1       	breq	.+82     	; 0x2870 <KPD_read+0x16a>
	{
		return KPD_ROW0_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
    281e:	8d e0       	ldi	r24, 0x0D	; 13
    2820:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2824:	88 23       	and	r24, r24
    2826:	31 f1       	breq	.+76     	; 0x2874 <KPD_read+0x16e>
	{
		return KPD_ROW1_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
    2828:	8e e0       	ldi	r24, 0x0E	; 14
    282a:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    282e:	88 23       	and	r24, r24
    2830:	19 f1       	breq	.+70     	; 0x2878 <KPD_read+0x172>
	{
		return KPD_ROW2_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
    2832:	8f e0       	ldi	r24, 0x0F	; 15
    2834:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2838:	81 11       	cpse	r24, r1
    283a:	20 c0       	rjmp	.+64     	; 0x287c <KPD_read+0x176>
	{
		return KPD_ROW3_COL3;
    283c:	8b e2       	ldi	r24, 0x2B	; 43
    283e:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL0;
    2840:	87 e3       	ldi	r24, 0x37	; 55
    2842:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL0;
    2844:	84 e3       	ldi	r24, 0x34	; 52
    2846:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL0;
    2848:	81 e3       	ldi	r24, 0x31	; 49
    284a:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL0;
    284c:	83 e6       	ldi	r24, 0x63	; 99
    284e:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL1;
    2850:	88 e3       	ldi	r24, 0x38	; 56
    2852:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL1;
    2854:	85 e3       	ldi	r24, 0x35	; 53
    2856:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL1;
    2858:	82 e3       	ldi	r24, 0x32	; 50
    285a:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL1;
    285c:	80 e3       	ldi	r24, 0x30	; 48
    285e:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_LOW);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL2;
    2860:	89 e3       	ldi	r24, 0x39	; 57
    2862:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL2;
    2864:	86 e3       	ldi	r24, 0x36	; 54
    2866:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL2;
    2868:	83 e3       	ldi	r24, 0x33	; 51
    286a:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL2;
    286c:	8d e3       	ldi	r24, 0x3D	; 61
    286e:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_LOW);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL3;
    2870:	8f e2       	ldi	r24, 0x2F	; 47
    2872:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL3;
    2874:	8a e2       	ldi	r24, 0x2A	; 42
    2876:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL3;
    2878:	8d e2       	ldi	r24, 0x2D	; 45
    287a:	08 95       	ret
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL3;
	}
	
	return KPD_UNPRESSED;
    287c:	88 e7       	ldi	r24, 0x78	; 120
    287e:	08 95       	ret

00002880 <LCD_Instruction>:
		LCD_sendCmd(0b00011100);
	}
	else if (direction==LCD_SHIFT_DIS_LIFT)
	{
		//Shift left
		LCD_sendCmd(0b00011000);
    2880:	81 11       	cpse	r24, r1
    2882:	09 c0       	rjmp	.+18     	; 0x2896 <LCD_Instruction+0x16>
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	8a e0       	ldi	r24, 0x0A	; 10
    2888:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	89 e0       	ldi	r24, 0x09	; 9
    2890:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2894:	08 95       	ret
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	41 f4       	brne	.+16     	; 0x28aa <LCD_Instruction+0x2a>
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	8a e0       	ldi	r24, 0x0A	; 10
    289e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	89 e0       	ldi	r24, 0x09	; 9
    28a6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    28aa:	08 95       	ret

000028ac <LCD_pulse>:
    28ac:	61 e0       	ldi	r22, 0x01	; 1
    28ae:	8b e0       	ldi	r24, 0x0B	; 11
    28b0:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    28b4:	8f e9       	ldi	r24, 0x9F	; 159
    28b6:	9f e0       	ldi	r25, 0x0F	; 15
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_pulse+0xc>
    28bc:	00 c0       	rjmp	.+0      	; 0x28be <LCD_pulse+0x12>
    28be:	00 00       	nop
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	8b e0       	ldi	r24, 0x0B	; 11
    28c4:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    28c8:	08 95       	ret

000028ca <LCD_sendData>:
    28ca:	cf 93       	push	r28
    28cc:	c8 2f       	mov	r28, r24
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_Instruction>
    28d4:	c4 fb       	bst	r28, 4
    28d6:	66 27       	eor	r22, r22
    28d8:	60 f9       	bld	r22, 0
    28da:	84 e0       	ldi	r24, 0x04	; 4
    28dc:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    28e0:	c5 fb       	bst	r28, 5
    28e2:	66 27       	eor	r22, r22
    28e4:	60 f9       	bld	r22, 0
    28e6:	85 e0       	ldi	r24, 0x05	; 5
    28e8:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    28ec:	c6 fb       	bst	r28, 6
    28ee:	66 27       	eor	r22, r22
    28f0:	60 f9       	bld	r22, 0
    28f2:	86 e0       	ldi	r24, 0x06	; 6
    28f4:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    28f8:	6c 2f       	mov	r22, r28
    28fa:	66 1f       	adc	r22, r22
    28fc:	66 27       	eor	r22, r22
    28fe:	66 1f       	adc	r22, r22
    2900:	87 e0       	ldi	r24, 0x07	; 7
    2902:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2906:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_pulse>
    290a:	6c 2f       	mov	r22, r28
    290c:	61 70       	andi	r22, 0x01	; 1
    290e:	84 e0       	ldi	r24, 0x04	; 4
    2910:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2914:	c1 fb       	bst	r28, 1
    2916:	66 27       	eor	r22, r22
    2918:	60 f9       	bld	r22, 0
    291a:	85 e0       	ldi	r24, 0x05	; 5
    291c:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2920:	c2 fb       	bst	r28, 2
    2922:	66 27       	eor	r22, r22
    2924:	60 f9       	bld	r22, 0
    2926:	86 e0       	ldi	r24, 0x06	; 6
    2928:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    292c:	c3 fb       	bst	r28, 3
    292e:	66 27       	eor	r22, r22
    2930:	60 f9       	bld	r22, 0
    2932:	87 e0       	ldi	r24, 0x07	; 7
    2934:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2938:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_pulse>
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <LCD_sendCmd>:
    2940:	cf 93       	push	r28
    2942:	c8 2f       	mov	r28, r24
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_Instruction>
    294a:	c4 fb       	bst	r28, 4
    294c:	66 27       	eor	r22, r22
    294e:	60 f9       	bld	r22, 0
    2950:	84 e0       	ldi	r24, 0x04	; 4
    2952:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2956:	c5 fb       	bst	r28, 5
    2958:	66 27       	eor	r22, r22
    295a:	60 f9       	bld	r22, 0
    295c:	85 e0       	ldi	r24, 0x05	; 5
    295e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2962:	c6 fb       	bst	r28, 6
    2964:	66 27       	eor	r22, r22
    2966:	60 f9       	bld	r22, 0
    2968:	86 e0       	ldi	r24, 0x06	; 6
    296a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    296e:	6c 2f       	mov	r22, r28
    2970:	66 1f       	adc	r22, r22
    2972:	66 27       	eor	r22, r22
    2974:	66 1f       	adc	r22, r22
    2976:	87 e0       	ldi	r24, 0x07	; 7
    2978:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    297c:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_pulse>
    2980:	6c 2f       	mov	r22, r28
    2982:	61 70       	andi	r22, 0x01	; 1
    2984:	84 e0       	ldi	r24, 0x04	; 4
    2986:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    298a:	c1 fb       	bst	r28, 1
    298c:	66 27       	eor	r22, r22
    298e:	60 f9       	bld	r22, 0
    2990:	85 e0       	ldi	r24, 0x05	; 5
    2992:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2996:	c2 fb       	bst	r28, 2
    2998:	66 27       	eor	r22, r22
    299a:	60 f9       	bld	r22, 0
    299c:	86 e0       	ldi	r24, 0x06	; 6
    299e:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    29a2:	c3 fb       	bst	r28, 3
    29a4:	66 27       	eor	r22, r22
    29a6:	60 f9       	bld	r22, 0
    29a8:	87 e0       	ldi	r24, 0x07	; 7
    29aa:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    29ae:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_pulse>
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <LCD_init>:
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	84 e0       	ldi	r24, 0x04	; 4
    29ba:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	85 e0       	ldi	r24, 0x05	; 5
    29c2:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	86 e0       	ldi	r24, 0x06	; 6
    29ca:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	87 e0       	ldi	r24, 0x07	; 7
    29d2:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	8b e0       	ldi	r24, 0x0B	; 11
    29da:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	8a e0       	ldi	r24, 0x0A	; 10
    29e2:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	89 e0       	ldi	r24, 0x09	; 9
    29ea:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <DIO_setPinDir>
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    29f4:	2f ef       	ldi	r18, 0xFF	; 255
    29f6:	86 e7       	ldi	r24, 0x76	; 118
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	21 50       	subi	r18, 0x01	; 1
    29fc:	80 40       	sbci	r24, 0x00	; 0
    29fe:	90 40       	sbci	r25, 0x00	; 0
    2a00:	e1 f7       	brne	.-8      	; 0x29fa <LCD_init+0x44>
    2a02:	00 c0       	rjmp	.+0      	; 0x2a04 <LCD_init+0x4e>
    2a04:	00 00       	nop
    2a06:	88 e2       	ldi	r24, 0x28	; 40
    2a08:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    2a0c:	8f e9       	ldi	r24, 0x9F	; 159
    2a0e:	9f e0       	ldi	r25, 0x0F	; 15
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_init+0x5a>
    2a14:	00 c0       	rjmp	.+0      	; 0x2a16 <LCD_init+0x60>
    2a16:	00 00       	nop
    2a18:	8f e0       	ldi	r24, 0x0F	; 15
    2a1a:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    2a1e:	8f e9       	ldi	r24, 0x9F	; 159
    2a20:	9f e0       	ldi	r25, 0x0F	; 15
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <LCD_init+0x6c>
    2a26:	00 c0       	rjmp	.+0      	; 0x2a28 <LCD_init+0x72>
    2a28:	00 00       	nop
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    2a30:	8f e3       	ldi	r24, 0x3F	; 63
    2a32:	9f e1       	ldi	r25, 0x1F	; 31
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_init+0x7e>
    2a38:	00 c0       	rjmp	.+0      	; 0x2a3a <LCD_init+0x84>
    2a3a:	00 00       	nop
    2a3c:	86 e0       	ldi	r24, 0x06	; 6
    2a3e:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    2a42:	08 95       	ret

00002a44 <LCD_clearDis>:
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    2a4a:	08 95       	ret

00002a4c <LCD_GoTo>:
    2a4c:	61 11       	cpse	r22, r1
    2a4e:	04 c0       	rjmp	.+8      	; 0x2a58 <LCD_GoTo+0xc>
    2a50:	80 58       	subi	r24, 0x80	; 128
    2a52:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    2a56:	08 95       	ret
    2a58:	61 30       	cpi	r22, 0x01	; 1
    2a5a:	19 f4       	brne	.+6      	; 0x2a62 <LCD_GoTo+0x16>
    2a5c:	80 54       	subi	r24, 0x40	; 64
    2a5e:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_sendCmd>
    2a62:	08 95       	ret

00002a64 <LCD_sendStr>:
	DIO_setPinValue(LCD_D7,GET_BIT(cmd,3));
	
	LCD_pulse();
}

void LCD_sendStr(u8* str){
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	8c 01       	movw	r16, r24
	u8 i=0;
    2a6c:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i]!='\0')
    2a6e:	03 c0       	rjmp	.+6      	; 0x2a76 <LCD_sendStr+0x12>
	{
		LCD_sendData(str[i]);
    2a70:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
		i++;
    2a74:	cf 5f       	subi	r28, 0xFF	; 255
	LCD_pulse();
}

void LCD_sendStr(u8* str){
	u8 i=0;
	while (str[i]!='\0')
    2a76:	f8 01       	movw	r30, r16
    2a78:	ec 0f       	add	r30, r28
    2a7a:	f1 1d       	adc	r31, r1
    2a7c:	80 81       	ld	r24, Z
    2a7e:	81 11       	cpse	r24, r1
    2a80:	f7 cf       	rjmp	.-18     	; 0x2a70 <LCD_sendStr+0xc>
	{
		LCD_sendData(str[i]);
		i++;
	}
	
}
    2a82:	cf 91       	pop	r28
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	08 95       	ret

00002a8a <LCD_sendNum>:

void LCD_sendNum(s32 num){
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	2a 97       	sbiw	r28, 0x0a	; 10
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	7c 01       	movw	r14, r24
	u8 arr_numbers[10] ;
	s8 i=0;	
	if(num==0){
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	21 f4       	brne	.+8      	; 0x2ab2 <LCD_sendNum+0x28>
		LCD_sendData('0');
    2aaa:	80 e3       	ldi	r24, 0x30	; 48
    2aac:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
    2ab0:	2c c0       	rjmp	.+88     	; 0x2b0a <LCD_sendNum+0x80>
		return;
	}
	else if (num<0)
    2ab2:	99 23       	and	r25, r25
    2ab4:	1c f4       	brge	.+6      	; 0x2abc <LCD_sendNum+0x32>
	{
		LCD_sendData('-');
    2ab6:	8d e2       	ldi	r24, 0x2D	; 45
    2ab8:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
		i++;
	}
	
}

void LCD_sendNum(s32 num){
    2abc:	10 e0       	ldi	r17, 0x00	; 0
    2abe:	12 c0       	rjmp	.+36     	; 0x2ae4 <LCD_sendNum+0x5a>
		LCD_sendData('-');
	}
	
	while (num>0)
	{
		arr_numbers[i]=(num%10)+48;
    2ac0:	c7 01       	movw	r24, r14
    2ac2:	6a e0       	ldi	r22, 0x0A	; 10
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	0e 94 85 1a 	call	0x350a	; 0x350a <__divmodhi4>
    2aca:	e1 e0       	ldi	r30, 0x01	; 1
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	ec 0f       	add	r30, r28
    2ad0:	fd 1f       	adc	r31, r29
    2ad2:	e1 0f       	add	r30, r17
    2ad4:	f1 1d       	adc	r31, r1
    2ad6:	17 fd       	sbrc	r17, 7
    2ad8:	fa 95       	dec	r31
    2ada:	80 5d       	subi	r24, 0xD0	; 208
    2adc:	80 83       	st	Z, r24
		num=num/10;
    2ade:	e6 2e       	mov	r14, r22
    2ae0:	f7 2e       	mov	r15, r23
		i++;
    2ae2:	1f 5f       	subi	r17, 0xFF	; 255
	else if (num<0)
	{
		LCD_sendData('-');
	}
	
	while (num>0)
    2ae4:	1e 14       	cp	r1, r14
    2ae6:	1f 04       	cpc	r1, r15
    2ae8:	5c f3       	brlt	.-42     	; 0x2ac0 <LCD_sendNum+0x36>
	{
		arr_numbers[i]=(num%10)+48;
		num=num/10;
		i++;
	}
	i--;
    2aea:	11 50       	subi	r17, 0x01	; 1
	while (i>=0)
    2aec:	0c c0       	rjmp	.+24     	; 0x2b06 <LCD_sendNum+0x7c>
	{
		LCD_sendData(arr_numbers[i]);
    2aee:	e1 e0       	ldi	r30, 0x01	; 1
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	ec 0f       	add	r30, r28
    2af4:	fd 1f       	adc	r31, r29
    2af6:	e1 0f       	add	r30, r17
    2af8:	f1 1d       	adc	r31, r1
    2afa:	17 fd       	sbrc	r17, 7
    2afc:	fa 95       	dec	r31
    2afe:	80 81       	ld	r24, Z
    2b00:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
		i--;
    2b04:	11 50       	subi	r17, 0x01	; 1
		arr_numbers[i]=(num%10)+48;
		num=num/10;
		i++;
	}
	i--;
	while (i>=0)
    2b06:	11 23       	and	r17, r17
    2b08:	94 f7       	brge	.-28     	; 0x2aee <LCD_sendNum+0x64>
	{
		LCD_sendData(arr_numbers[i]);
		i--;
	}
}
    2b0a:	2a 96       	adiw	r28, 0x0a	; 10
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	ff 90       	pop	r15
    2b1e:	ef 90       	pop	r14
    2b20:	08 95       	ret

00002b22 <LCD_sendFloatNum>:

void LCD_sendFloatNum(f32 num){
    2b22:	cf 92       	push	r12
    2b24:	df 92       	push	r13
    2b26:	ef 92       	push	r14
    2b28:	ff 92       	push	r15
    2b2a:	6b 01       	movw	r12, r22
    2b2c:	7c 01       	movw	r14, r24
	LCD_sendNum((s32)num);
    2b2e:	0e 94 17 19 	call	0x322e	; 0x322e <__fixsfsi>
    2b32:	cb 01       	movw	r24, r22
    2b34:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <LCD_sendNum>
	
	LCD_sendData('.');
    2b38:	8e e2       	ldi	r24, 0x2E	; 46
    2b3a:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_sendData>
	
	num = num - (u32) num;
    2b3e:	c7 01       	movw	r24, r14
    2b40:	b6 01       	movw	r22, r12
    2b42:	0e 94 1e 19 	call	0x323c	; 0x323c <__fixunssfsi>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 4d 19 	call	0x329a	; 0x329a <__floatunsisf>
    2b4e:	9b 01       	movw	r18, r22
    2b50:	ac 01       	movw	r20, r24
    2b52:	c7 01       	movw	r24, r14
    2b54:	b6 01       	movw	r22, r12
    2b56:	0e 94 a5 18 	call	0x314a	; 0x314a <__subsf3>
	num = num * 1000;
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a e7       	ldi	r20, 0x7A	; 122
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 04 1a 	call	0x3408	; 0x3408 <__mulsf3>
	
	LCD_sendNum((u32)num);
    2b66:	0e 94 1e 19 	call	0x323c	; 0x323c <__fixunssfsi>
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <LCD_sendNum>
}
    2b70:	ff 90       	pop	r15
    2b72:	ef 90       	pop	r14
    2b74:	df 90       	pop	r13
    2b76:	cf 90       	pop	r12
    2b78:	08 95       	ret

00002b7a <ADC_read>:
}

u16 ADC_read(u8 chNum)
{
	//select ch.
	if(chNum == ADC_CH0)
    2b7a:	81 11       	cpse	r24, r1
    2b7c:	10 c0       	rjmp	.+32     	; 0x2b9e <ADC_read+0x24>
	{
		CLEAR_BIT(ADMUX,MUX0);
    2b7e:	87 b1       	in	r24, 0x07	; 7
    2b80:	8e 7f       	andi	r24, 0xFE	; 254
    2b82:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX1);
    2b84:	87 b1       	in	r24, 0x07	; 7
    2b86:	8d 7f       	andi	r24, 0xFD	; 253
    2b88:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX2);
    2b8a:	87 b1       	in	r24, 0x07	; 7
    2b8c:	8b 7f       	andi	r24, 0xFB	; 251
    2b8e:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3);
    2b90:	87 b1       	in	r24, 0x07	; 7
    2b92:	87 7f       	andi	r24, 0xF7	; 247
    2b94:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4);
    2b96:	87 b1       	in	r24, 0x07	; 7
    2b98:	8f 7e       	andi	r24, 0xEF	; 239
    2b9a:	87 b9       	out	0x07, r24	; 7
    2b9c:	11 c0       	rjmp	.+34     	; 0x2bc0 <ADC_read+0x46>
	}
	else if(chNum == ADC_CH1)
    2b9e:	81 30       	cpi	r24, 0x01	; 1
    2ba0:	79 f4       	brne	.+30     	; 0x2bc0 <ADC_read+0x46>
	{
		SET_BIT(ADMUX,MUX0);
    2ba2:	87 b1       	in	r24, 0x07	; 7
    2ba4:	81 60       	ori	r24, 0x01	; 1
    2ba6:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX1);
    2ba8:	87 b1       	in	r24, 0x07	; 7
    2baa:	8d 7f       	andi	r24, 0xFD	; 253
    2bac:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX2);
    2bae:	87 b1       	in	r24, 0x07	; 7
    2bb0:	8b 7f       	andi	r24, 0xFB	; 251
    2bb2:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX3);
    2bb4:	87 b1       	in	r24, 0x07	; 7
    2bb6:	87 7f       	andi	r24, 0xF7	; 247
    2bb8:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,MUX4);
    2bba:	87 b1       	in	r24, 0x07	; 7
    2bbc:	8f 7e       	andi	r24, 0xEF	; 239
    2bbe:	87 b9       	out	0x07, r24	; 7
	}
	
	//start
	SET_BIT(ADCSRA,ADSC);
    2bc0:	86 b1       	in	r24, 0x06	; 6
    2bc2:	80 64       	ori	r24, 0x40	; 64
    2bc4:	86 b9       	out	0x06, r24	; 6
	//wait conv.
	while(GET_BIT(ADCSRA ,ADSC) == 1);
    2bc6:	36 99       	sbic	0x06, 6	; 6
    2bc8:	fe cf       	rjmp	.-4      	; 0x2bc6 <ADC_read+0x4c>
	
	//read
	return ADCLH;
    2bca:	84 b1       	in	r24, 0x04	; 4
    2bcc:	95 b1       	in	r25, 0x05	; 5
}
    2bce:	08 95       	ret

00002bd0 <ADC_convertAnalog>:

f32 ADC_convertAnalog(u16 digitalValue)
{
	//analog = digital * step (5.0/1024)
	return (digitalValue*(((f32)5)/1024));
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0e 94 4d 19 	call	0x329a	; 0x329a <__floatunsisf>
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 ea       	ldi	r20, 0xA0	; 160
    2be0:	5b e3       	ldi	r21, 0x3B	; 59
    2be2:	0e 94 04 1a 	call	0x3408	; 0x3408 <__mulsf3>
    2be6:	08 95       	ret

00002be8 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    2be8:	88 30       	cpi	r24, 0x08	; 8
    2bea:	00 f5       	brcc	.+64     	; 0x2c2c <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
    2bec:	61 11       	cpse	r22, r1
    2bee:	0e c0       	rjmp	.+28     	; 0x2c0c <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
    2bf0:	4a b3       	in	r20, 0x1a	; 26
    2bf2:	21 e0       	ldi	r18, 0x01	; 1
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <DIO_setPinDir+0x16>
    2bfa:	66 0f       	add	r22, r22
    2bfc:	77 1f       	adc	r23, r23
    2bfe:	8a 95       	dec	r24
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <DIO_setPinDir+0x12>
    2c02:	cb 01       	movw	r24, r22
    2c04:	80 95       	com	r24
    2c06:	84 23       	and	r24, r20
    2c08:	8a bb       	out	0x1a, r24	; 26
    2c0a:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    2c0c:	61 30       	cpi	r22, 0x01	; 1
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <DIO_setPinDir+0x2a>
    2c10:	75 c0       	rjmp	.+234    	; 0x2cfc <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
    2c12:	4a b3       	in	r20, 0x1a	; 26
    2c14:	21 e0       	ldi	r18, 0x01	; 1
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	b9 01       	movw	r22, r18
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <DIO_setPinDir+0x38>
    2c1c:	66 0f       	add	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	8a 95       	dec	r24
    2c22:	e2 f7       	brpl	.-8      	; 0x2c1c <DIO_setPinDir+0x34>
    2c24:	cb 01       	movw	r24, r22
    2c26:	84 2b       	or	r24, r20
    2c28:	8a bb       	out	0x1a, r24	; 26
    2c2a:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    2c2c:	98 ef       	ldi	r25, 0xF8	; 248
    2c2e:	98 0f       	add	r25, r24
    2c30:	98 30       	cpi	r25, 0x08	; 8
    2c32:	00 f5       	brcc	.+64     	; 0x2c74 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
    2c34:	61 11       	cpse	r22, r1
    2c36:	0e c0       	rjmp	.+28     	; 0x2c54 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
    2c38:	47 b3       	in	r20, 0x17	; 23
    2c3a:	21 e0       	ldi	r18, 0x01	; 1
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	b9 01       	movw	r22, r18
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <DIO_setPinDir+0x5e>
    2c42:	66 0f       	add	r22, r22
    2c44:	77 1f       	adc	r23, r23
    2c46:	9a 95       	dec	r25
    2c48:	e2 f7       	brpl	.-8      	; 0x2c42 <DIO_setPinDir+0x5a>
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	80 95       	com	r24
    2c4e:	84 23       	and	r24, r20
    2c50:	87 bb       	out	0x17, r24	; 23
    2c52:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    2c54:	61 30       	cpi	r22, 0x01	; 1
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <DIO_setPinDir+0x72>
    2c58:	51 c0       	rjmp	.+162    	; 0x2cfc <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
    2c5a:	47 b3       	in	r20, 0x17	; 23
    2c5c:	21 e0       	ldi	r18, 0x01	; 1
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	b9 01       	movw	r22, r18
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <DIO_setPinDir+0x80>
    2c64:	66 0f       	add	r22, r22
    2c66:	77 1f       	adc	r23, r23
    2c68:	9a 95       	dec	r25
    2c6a:	e2 f7       	brpl	.-8      	; 0x2c64 <DIO_setPinDir+0x7c>
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	84 2b       	or	r24, r20
    2c70:	87 bb       	out	0x17, r24	; 23
    2c72:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    2c74:	90 ef       	ldi	r25, 0xF0	; 240
    2c76:	98 0f       	add	r25, r24
    2c78:	98 30       	cpi	r25, 0x08	; 8
    2c7a:	f8 f4       	brcc	.+62     	; 0x2cba <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
    2c7c:	61 11       	cpse	r22, r1
    2c7e:	0e c0       	rjmp	.+28     	; 0x2c9c <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
    2c80:	44 b3       	in	r20, 0x14	; 20
    2c82:	21 e0       	ldi	r18, 0x01	; 1
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	b9 01       	movw	r22, r18
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <DIO_setPinDir+0xa6>
    2c8a:	66 0f       	add	r22, r22
    2c8c:	77 1f       	adc	r23, r23
    2c8e:	9a 95       	dec	r25
    2c90:	e2 f7       	brpl	.-8      	; 0x2c8a <DIO_setPinDir+0xa2>
    2c92:	cb 01       	movw	r24, r22
    2c94:	80 95       	com	r24
    2c96:	84 23       	and	r24, r20
    2c98:	84 bb       	out	0x14, r24	; 20
    2c9a:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    2c9c:	61 30       	cpi	r22, 0x01	; 1
    2c9e:	71 f5       	brne	.+92     	; 0x2cfc <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
    2ca0:	44 b3       	in	r20, 0x14	; 20
    2ca2:	21 e0       	ldi	r18, 0x01	; 1
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	b9 01       	movw	r22, r18
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <DIO_setPinDir+0xc6>
    2caa:	66 0f       	add	r22, r22
    2cac:	77 1f       	adc	r23, r23
    2cae:	9a 95       	dec	r25
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <DIO_setPinDir+0xc2>
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	84 2b       	or	r24, r20
    2cb6:	84 bb       	out	0x14, r24	; 20
    2cb8:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    2cba:	88 51       	subi	r24, 0x18	; 24
    2cbc:	88 30       	cpi	r24, 0x08	; 8
    2cbe:	f0 f4       	brcc	.+60     	; 0x2cfc <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
    2cc0:	61 11       	cpse	r22, r1
    2cc2:	0e c0       	rjmp	.+28     	; 0x2ce0 <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRD,pinNum);
    2cc4:	41 b3       	in	r20, 0x11	; 17
    2cc6:	21 e0       	ldi	r18, 0x01	; 1
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	b9 01       	movw	r22, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <DIO_setPinDir+0xea>
    2cce:	66 0f       	add	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	8a 95       	dec	r24
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <DIO_setPinDir+0xe6>
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	80 95       	com	r24
    2cda:	84 23       	and	r24, r20
    2cdc:	81 bb       	out	0x11, r24	; 17
    2cde:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    2ce0:	61 30       	cpi	r22, 0x01	; 1
    2ce2:	61 f4       	brne	.+24     	; 0x2cfc <DIO_setPinDir+0x114>
			SET_BIT(DDRD,pinNum);
    2ce4:	41 b3       	in	r20, 0x11	; 17
    2ce6:	21 e0       	ldi	r18, 0x01	; 1
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	b9 01       	movw	r22, r18
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <DIO_setPinDir+0x10a>
    2cee:	66 0f       	add	r22, r22
    2cf0:	77 1f       	adc	r23, r23
    2cf2:	8a 95       	dec	r24
    2cf4:	e2 f7       	brpl	.-8      	; 0x2cee <DIO_setPinDir+0x106>
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	84 2b       	or	r24, r20
    2cfa:	81 bb       	out	0x11, r24	; 17
    2cfc:	08 95       	ret

00002cfe <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    2cfe:	88 30       	cpi	r24, 0x08	; 8
    2d00:	00 f5       	brcc	.+64     	; 0x2d42 <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
    2d02:	61 11       	cpse	r22, r1
    2d04:	0e c0       	rjmp	.+28     	; 0x2d22 <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
    2d06:	4b b3       	in	r20, 0x1b	; 27
    2d08:	21 e0       	ldi	r18, 0x01	; 1
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	b9 01       	movw	r22, r18
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <DIO_setPinValue+0x16>
    2d10:	66 0f       	add	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	8a 95       	dec	r24
    2d16:	e2 f7       	brpl	.-8      	; 0x2d10 <DIO_setPinValue+0x12>
    2d18:	cb 01       	movw	r24, r22
    2d1a:	80 95       	com	r24
    2d1c:	84 23       	and	r24, r20
    2d1e:	8b bb       	out	0x1b, r24	; 27
    2d20:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    2d22:	61 30       	cpi	r22, 0x01	; 1
    2d24:	09 f0       	breq	.+2      	; 0x2d28 <DIO_setPinValue+0x2a>
    2d26:	75 c0       	rjmp	.+234    	; 0x2e12 <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
    2d28:	4b b3       	in	r20, 0x1b	; 27
    2d2a:	21 e0       	ldi	r18, 0x01	; 1
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	b9 01       	movw	r22, r18
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <DIO_setPinValue+0x38>
    2d32:	66 0f       	add	r22, r22
    2d34:	77 1f       	adc	r23, r23
    2d36:	8a 95       	dec	r24
    2d38:	e2 f7       	brpl	.-8      	; 0x2d32 <DIO_setPinValue+0x34>
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	84 2b       	or	r24, r20
    2d3e:	8b bb       	out	0x1b, r24	; 27
    2d40:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    2d42:	98 ef       	ldi	r25, 0xF8	; 248
    2d44:	98 0f       	add	r25, r24
    2d46:	98 30       	cpi	r25, 0x08	; 8
    2d48:	00 f5       	brcc	.+64     	; 0x2d8a <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
    2d4a:	61 11       	cpse	r22, r1
    2d4c:	0e c0       	rjmp	.+28     	; 0x2d6a <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
    2d4e:	48 b3       	in	r20, 0x18	; 24
    2d50:	21 e0       	ldi	r18, 0x01	; 1
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	b9 01       	movw	r22, r18
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <DIO_setPinValue+0x5e>
    2d58:	66 0f       	add	r22, r22
    2d5a:	77 1f       	adc	r23, r23
    2d5c:	9a 95       	dec	r25
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <DIO_setPinValue+0x5a>
    2d60:	cb 01       	movw	r24, r22
    2d62:	80 95       	com	r24
    2d64:	84 23       	and	r24, r20
    2d66:	88 bb       	out	0x18, r24	; 24
    2d68:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    2d6a:	61 30       	cpi	r22, 0x01	; 1
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <DIO_setPinValue+0x72>
    2d6e:	51 c0       	rjmp	.+162    	; 0x2e12 <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
    2d70:	48 b3       	in	r20, 0x18	; 24
    2d72:	21 e0       	ldi	r18, 0x01	; 1
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	b9 01       	movw	r22, r18
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <DIO_setPinValue+0x80>
    2d7a:	66 0f       	add	r22, r22
    2d7c:	77 1f       	adc	r23, r23
    2d7e:	9a 95       	dec	r25
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <DIO_setPinValue+0x7c>
    2d82:	cb 01       	movw	r24, r22
    2d84:	84 2b       	or	r24, r20
    2d86:	88 bb       	out	0x18, r24	; 24
    2d88:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    2d8a:	90 ef       	ldi	r25, 0xF0	; 240
    2d8c:	98 0f       	add	r25, r24
    2d8e:	98 30       	cpi	r25, 0x08	; 8
    2d90:	f8 f4       	brcc	.+62     	; 0x2dd0 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
    2d92:	61 11       	cpse	r22, r1
    2d94:	0e c0       	rjmp	.+28     	; 0x2db2 <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
    2d96:	45 b3       	in	r20, 0x15	; 21
    2d98:	21 e0       	ldi	r18, 0x01	; 1
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	b9 01       	movw	r22, r18
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <DIO_setPinValue+0xa6>
    2da0:	66 0f       	add	r22, r22
    2da2:	77 1f       	adc	r23, r23
    2da4:	9a 95       	dec	r25
    2da6:	e2 f7       	brpl	.-8      	; 0x2da0 <DIO_setPinValue+0xa2>
    2da8:	cb 01       	movw	r24, r22
    2daa:	80 95       	com	r24
    2dac:	84 23       	and	r24, r20
    2dae:	85 bb       	out	0x15, r24	; 21
    2db0:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    2db2:	61 30       	cpi	r22, 0x01	; 1
    2db4:	71 f5       	brne	.+92     	; 0x2e12 <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
    2db6:	45 b3       	in	r20, 0x15	; 21
    2db8:	21 e0       	ldi	r18, 0x01	; 1
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	b9 01       	movw	r22, r18
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <DIO_setPinValue+0xc6>
    2dc0:	66 0f       	add	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	9a 95       	dec	r25
    2dc6:	e2 f7       	brpl	.-8      	; 0x2dc0 <DIO_setPinValue+0xc2>
    2dc8:	cb 01       	movw	r24, r22
    2dca:	84 2b       	or	r24, r20
    2dcc:	85 bb       	out	0x15, r24	; 21
    2dce:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    2dd0:	88 51       	subi	r24, 0x18	; 24
    2dd2:	88 30       	cpi	r24, 0x08	; 8
    2dd4:	f0 f4       	brcc	.+60     	; 0x2e12 <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
    2dd6:	61 11       	cpse	r22, r1
    2dd8:	0e c0       	rjmp	.+28     	; 0x2df6 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
    2dda:	42 b3       	in	r20, 0x12	; 18
    2ddc:	21 e0       	ldi	r18, 0x01	; 1
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	b9 01       	movw	r22, r18
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <DIO_setPinValue+0xea>
    2de4:	66 0f       	add	r22, r22
    2de6:	77 1f       	adc	r23, r23
    2de8:	8a 95       	dec	r24
    2dea:	e2 f7       	brpl	.-8      	; 0x2de4 <DIO_setPinValue+0xe6>
    2dec:	cb 01       	movw	r24, r22
    2dee:	80 95       	com	r24
    2df0:	84 23       	and	r24, r20
    2df2:	82 bb       	out	0x12, r24	; 18
    2df4:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    2df6:	61 30       	cpi	r22, 0x01	; 1
    2df8:	61 f4       	brne	.+24     	; 0x2e12 <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
    2dfa:	42 b3       	in	r20, 0x12	; 18
    2dfc:	21 e0       	ldi	r18, 0x01	; 1
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	b9 01       	movw	r22, r18
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <DIO_setPinValue+0x10a>
    2e04:	66 0f       	add	r22, r22
    2e06:	77 1f       	adc	r23, r23
    2e08:	8a 95       	dec	r24
    2e0a:	e2 f7       	brpl	.-8      	; 0x2e04 <DIO_setPinValue+0x106>
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	84 2b       	or	r24, r20
    2e10:	82 bb       	out	0x12, r24	; 18
    2e12:	08 95       	ret

00002e14 <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
    2e14:	88 30       	cpi	r24, 0x08	; 8
    2e16:	58 f4       	brcc	.+22     	; 0x2e2e <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
    2e18:	29 b3       	in	r18, 0x19	; 25
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	a9 01       	movw	r20, r18
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <DIO_readPinValue+0x10>
    2e20:	55 95       	asr	r21
    2e22:	47 95       	ror	r20
    2e24:	8a 95       	dec	r24
    2e26:	e2 f7       	brpl	.-8      	; 0x2e20 <DIO_readPinValue+0xc>
    2e28:	ca 01       	movw	r24, r20
    2e2a:	81 70       	andi	r24, 0x01	; 1
    2e2c:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
    2e2e:	28 ef       	ldi	r18, 0xF8	; 248
    2e30:	28 0f       	add	r18, r24
    2e32:	28 30       	cpi	r18, 0x08	; 8
    2e34:	48 f4       	brcc	.+18     	; 0x2e48 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
    2e36:	86 b3       	in	r24, 0x16	; 22
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <DIO_readPinValue+0x2c>
    2e3c:	95 95       	asr	r25
    2e3e:	87 95       	ror	r24
    2e40:	2a 95       	dec	r18
    2e42:	e2 f7       	brpl	.-8      	; 0x2e3c <DIO_readPinValue+0x28>
    2e44:	81 70       	andi	r24, 0x01	; 1
    2e46:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
    2e48:	20 ef       	ldi	r18, 0xF0	; 240
    2e4a:	28 0f       	add	r18, r24
    2e4c:	28 30       	cpi	r18, 0x08	; 8
    2e4e:	48 f4       	brcc	.+18     	; 0x2e62 <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
    2e50:	83 b3       	in	r24, 0x13	; 19
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <DIO_readPinValue+0x46>
    2e56:	95 95       	asr	r25
    2e58:	87 95       	ror	r24
    2e5a:	2a 95       	dec	r18
    2e5c:	e2 f7       	brpl	.-8      	; 0x2e56 <DIO_readPinValue+0x42>
    2e5e:	81 70       	andi	r24, 0x01	; 1
    2e60:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
    2e62:	28 ee       	ldi	r18, 0xE8	; 232
    2e64:	28 0f       	add	r18, r24
    2e66:	28 30       	cpi	r18, 0x08	; 8
    2e68:	50 f4       	brcc	.+20     	; 0x2e7e <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
    2e6a:	90 b3       	in	r25, 0x10	; 16
    2e6c:	89 2f       	mov	r24, r25
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <DIO_readPinValue+0x62>
    2e72:	95 95       	asr	r25
    2e74:	87 95       	ror	r24
    2e76:	2a 95       	dec	r18
    2e78:	e2 f7       	brpl	.-8      	; 0x2e72 <DIO_readPinValue+0x5e>
    2e7a:	81 70       	andi	r24, 0x01	; 1
    2e7c:	08 95       	ret
	}
}
    2e7e:	08 95       	ret

00002e80 <DIO_togglePinValue>:

void DIO_togglePinValue(u8 pinNum){
    2e80:	cf 93       	push	r28
    2e82:	c8 2f       	mov	r28, r24
	DIO_setPinValue(pinNum,!DIO_readPinValue(pinNum));
    2e84:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DIO_readPinValue>
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	81 11       	cpse	r24, r1
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	8c 2f       	mov	r24, r28
    2e90:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
}
    2e94:	cf 91       	pop	r28
    2e96:	08 95       	ret

00002e98 <DIO_setPullUp>:

void DIO_setPullUp(u8 pinNum){
	DIO_setPinValue(pinNum,DIO_HIGH);
    2e98:	61 e0       	ldi	r22, 0x01	; 1
    2e9a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <DIO_setPinValue>
    2e9e:	08 95       	ret

00002ea0 <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
    2ea0:	1f 92       	push	r1
    2ea2:	0f 92       	push	r0
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	0f 92       	push	r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	2f 93       	push	r18
    2eac:	3f 93       	push	r19
    2eae:	4f 93       	push	r20
    2eb0:	5f 93       	push	r21
    2eb2:	6f 93       	push	r22
    2eb4:	7f 93       	push	r23
    2eb6:	8f 93       	push	r24
    2eb8:	9f 93       	push	r25
    2eba:	af 93       	push	r26
    2ebc:	bf 93       	push	r27
    2ebe:	ef 93       	push	r30
    2ec0:	ff 93       	push	r31
    2ec2:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <EXT_int0Func>
    2ec6:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <EXT_int0Func+0x1>
    2eca:	09 95       	icall
    2ecc:	ff 91       	pop	r31
    2ece:	ef 91       	pop	r30
    2ed0:	bf 91       	pop	r27
    2ed2:	af 91       	pop	r26
    2ed4:	9f 91       	pop	r25
    2ed6:	8f 91       	pop	r24
    2ed8:	7f 91       	pop	r23
    2eda:	6f 91       	pop	r22
    2edc:	5f 91       	pop	r21
    2ede:	4f 91       	pop	r20
    2ee0:	3f 91       	pop	r19
    2ee2:	2f 91       	pop	r18
    2ee4:	0f 90       	pop	r0
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	0f 90       	pop	r0
    2eea:	1f 90       	pop	r1
    2eec:	18 95       	reti

00002eee <__vector_2>:
    2eee:	1f 92       	push	r1
    2ef0:	0f 92       	push	r0
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	0f 92       	push	r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	2f 93       	push	r18
    2efa:	3f 93       	push	r19
    2efc:	4f 93       	push	r20
    2efe:	5f 93       	push	r21
    2f00:	6f 93       	push	r22
    2f02:	7f 93       	push	r23
    2f04:	8f 93       	push	r24
    2f06:	9f 93       	push	r25
    2f08:	af 93       	push	r26
    2f0a:	bf 93       	push	r27
    2f0c:	ef 93       	push	r30
    2f0e:	ff 93       	push	r31
    2f10:	e0 91 e6 07 	lds	r30, 0x07E6	; 0x8007e6 <EXT_int1Func>
    2f14:	f0 91 e7 07 	lds	r31, 0x07E7	; 0x8007e7 <EXT_int1Func+0x1>
    2f18:	09 95       	icall
    2f1a:	ff 91       	pop	r31
    2f1c:	ef 91       	pop	r30
    2f1e:	bf 91       	pop	r27
    2f20:	af 91       	pop	r26
    2f22:	9f 91       	pop	r25
    2f24:	8f 91       	pop	r24
    2f26:	7f 91       	pop	r23
    2f28:	6f 91       	pop	r22
    2f2a:	5f 91       	pop	r21
    2f2c:	4f 91       	pop	r20
    2f2e:	3f 91       	pop	r19
    2f30:	2f 91       	pop	r18
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti

00002f3c <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
    2f3c:	1f 92       	push	r1
    2f3e:	0f 92       	push	r0
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	0f 92       	push	r0
    2f44:	11 24       	eor	r1, r1
    2f46:	2f 93       	push	r18
    2f48:	3f 93       	push	r19
    2f4a:	4f 93       	push	r20
    2f4c:	5f 93       	push	r21
    2f4e:	6f 93       	push	r22
    2f50:	7f 93       	push	r23
    2f52:	8f 93       	push	r24
    2f54:	9f 93       	push	r25
    2f56:	af 93       	push	r26
    2f58:	bf 93       	push	r27
    2f5a:	ef 93       	push	r30
    2f5c:	ff 93       	push	r31
	EXT_int2Func();
    2f5e:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <EXT_int2Func>
    2f62:	f0 91 e9 07 	lds	r31, 0x07E9	; 0x8007e9 <EXT_int2Func+0x1>
    2f66:	09 95       	icall
    2f68:	ff 91       	pop	r31
    2f6a:	ef 91       	pop	r30
    2f6c:	bf 91       	pop	r27
    2f6e:	af 91       	pop	r26
    2f70:	9f 91       	pop	r25
    2f72:	8f 91       	pop	r24
    2f74:	7f 91       	pop	r23
    2f76:	6f 91       	pop	r22
    2f78:	5f 91       	pop	r21
    2f7a:	4f 91       	pop	r20
    2f7c:	3f 91       	pop	r19
    2f7e:	2f 91       	pop	r18
    2f80:	0f 90       	pop	r0
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	0f 90       	pop	r0
    2f86:	1f 90       	pop	r1
    2f88:	18 95       	reti

00002f8a <GI_enable>:
 */ 

#include "GI_INT.h"

void GI_enable(){
	SET_BIT(SREG,I);
    2f8a:	8f b7       	in	r24, 0x3f	; 63
    2f8c:	80 68       	ori	r24, 0x80	; 128
    2f8e:	8f bf       	out	0x3f, r24	; 63
    2f90:	08 95       	ret

00002f92 <I2C_init>:
 */ 

#include "I2C_INT.h"

void I2C_init(I2C_mode mode){
	if (mode==MASTER)
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	21 f0       	breq	.+8      	; 0x2f9e <I2C_init+0xc>
	{
	} 
	else if (mode==SLAVE)
    2f96:	81 11       	cpse	r24, r1
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <I2C_init+0xc>
	{
		TWAR = I2C_SLAVE_ADDRESS<<1;
    2f9a:	80 ea       	ldi	r24, 0xA0	; 160
    2f9c:	82 b9       	out	0x02, r24	; 2
	}
	
	//Enable
	SET_BIT(TWCR,TWEN);
    2f9e:	86 b7       	in	r24, 0x36	; 54
    2fa0:	84 60       	ori	r24, 0x04	; 4
    2fa2:	86 bf       	out	0x36, r24	; 54
	TWBR = 72;
    2fa4:	88 e4       	ldi	r24, 0x48	; 72
    2fa6:	80 b9       	out	0x00, r24	; 0
    2fa8:	08 95       	ret

00002faa <__vector_11>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
    2faa:	1f 92       	push	r1
    2fac:	0f 92       	push	r0
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	0f 92       	push	r0
    2fb2:	11 24       	eor	r1, r1
    2fb4:	2f 93       	push	r18
    2fb6:	3f 93       	push	r19
    2fb8:	4f 93       	push	r20
    2fba:	5f 93       	push	r21
    2fbc:	6f 93       	push	r22
    2fbe:	7f 93       	push	r23
    2fc0:	8f 93       	push	r24
    2fc2:	9f 93       	push	r25
    2fc4:	af 93       	push	r26
    2fc6:	bf 93       	push	r27
    2fc8:	ef 93       	push	r30
    2fca:	ff 93       	push	r31
    2fcc:	e0 91 ee 07 	lds	r30, 0x07EE	; 0x8007ee <TIMER0_OvFunc>
    2fd0:	f0 91 ef 07 	lds	r31, 0x07EF	; 0x8007ef <TIMER0_OvFunc+0x1>
    2fd4:	09 95       	icall
    2fd6:	ff 91       	pop	r31
    2fd8:	ef 91       	pop	r30
    2fda:	bf 91       	pop	r27
    2fdc:	af 91       	pop	r26
    2fde:	9f 91       	pop	r25
    2fe0:	8f 91       	pop	r24
    2fe2:	7f 91       	pop	r23
    2fe4:	6f 91       	pop	r22
    2fe6:	5f 91       	pop	r21
    2fe8:	4f 91       	pop	r20
    2fea:	3f 91       	pop	r19
    2fec:	2f 91       	pop	r18
    2fee:	0f 90       	pop	r0
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	0f 90       	pop	r0
    2ff4:	1f 90       	pop	r1
    2ff6:	18 95       	reti

00002ff8 <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
    2ff8:	1f 92       	push	r1
    2ffa:	0f 92       	push	r0
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	0f 92       	push	r0
    3000:	11 24       	eor	r1, r1
    3002:	2f 93       	push	r18
    3004:	3f 93       	push	r19
    3006:	4f 93       	push	r20
    3008:	5f 93       	push	r21
    300a:	6f 93       	push	r22
    300c:	7f 93       	push	r23
    300e:	8f 93       	push	r24
    3010:	9f 93       	push	r25
    3012:	af 93       	push	r26
    3014:	bf 93       	push	r27
    3016:	ef 93       	push	r30
    3018:	ff 93       	push	r31
	TIMER0_CTCFunc();
    301a:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <TIMER0_CTCFunc>
    301e:	f0 91 ed 07 	lds	r31, 0x07ED	; 0x8007ed <TIMER0_CTCFunc+0x1>
    3022:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
    3024:	ff 91       	pop	r31
    3026:	ef 91       	pop	r30
    3028:	bf 91       	pop	r27
    302a:	af 91       	pop	r26
    302c:	9f 91       	pop	r25
    302e:	8f 91       	pop	r24
    3030:	7f 91       	pop	r23
    3032:	6f 91       	pop	r22
    3034:	5f 91       	pop	r21
    3036:	4f 91       	pop	r20
    3038:	3f 91       	pop	r19
    303a:	2f 91       	pop	r18
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	0f 90       	pop	r0
    3042:	1f 90       	pop	r1
    3044:	18 95       	reti

00003046 <TIMER1_setOcr>:
//pointer to ICU function
void (*TIMER1_IcuFunc)();

//call back function to send the function from the main function
void TIMER1_setcallbackIcu(void (*ptr)()){
	TIMER1_IcuFunc = ptr;
    3046:	9b bd       	out	0x2b, r25	; 43
    3048:	8a bd       	out	0x2a, r24	; 42
    304a:	08 95       	ret

0000304c <__vector_6>:
}

//Vector Table Function that belongs to TIMER1
//number(in vector table) - 1
void __vector_6() __attribute__((signal));
void __vector_6(){
    304c:	1f 92       	push	r1
    304e:	0f 92       	push	r0
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	0f 92       	push	r0
    3054:	11 24       	eor	r1, r1
    3056:	2f 93       	push	r18
    3058:	3f 93       	push	r19
    305a:	4f 93       	push	r20
    305c:	5f 93       	push	r21
    305e:	6f 93       	push	r22
    3060:	7f 93       	push	r23
    3062:	8f 93       	push	r24
    3064:	9f 93       	push	r25
    3066:	af 93       	push	r26
    3068:	bf 93       	push	r27
    306a:	ef 93       	push	r30
    306c:	ff 93       	push	r31
	TIMER1_IcuFunc();
    306e:	e0 91 f0 07 	lds	r30, 0x07F0	; 0x8007f0 <TIMER1_IcuFunc>
    3072:	f0 91 f1 07 	lds	r31, 0x07F1	; 0x8007f1 <TIMER1_IcuFunc+0x1>
    3076:	09 95       	icall
    3078:	ff 91       	pop	r31
    307a:	ef 91       	pop	r30
    307c:	bf 91       	pop	r27
    307e:	af 91       	pop	r26
    3080:	9f 91       	pop	r25
    3082:	8f 91       	pop	r24
    3084:	7f 91       	pop	r23
    3086:	6f 91       	pop	r22
    3088:	5f 91       	pop	r21
    308a:	4f 91       	pop	r20
    308c:	3f 91       	pop	r19
    308e:	2f 91       	pop	r18
    3090:	0f 90       	pop	r0
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	0f 90       	pop	r0
    3096:	1f 90       	pop	r1
    3098:	18 95       	reti

0000309a <UART_init>:
//pointer to UART Interrupt function
void (*UART_INTFunc)();

//call back function to send the function from the main function
void UART_setcallbackINT(void (*ptr)()){
	UART_INTFunc = ptr;
    309a:	8a b1       	in	r24, 0x0a	; 10
    309c:	88 60       	ori	r24, 0x08	; 8
    309e:	8a b9       	out	0x0a, r24	; 10
    30a0:	8a b1       	in	r24, 0x0a	; 10
    30a2:	80 61       	ori	r24, 0x10	; 16
    30a4:	8a b9       	out	0x0a, r24	; 10
    30a6:	8a b1       	in	r24, 0x0a	; 10
    30a8:	8b 7f       	andi	r24, 0xFB	; 251
    30aa:	8a b9       	out	0x0a, r24	; 10
    30ac:	86 e8       	ldi	r24, 0x86	; 134
    30ae:	80 bd       	out	0x20, r24	; 32
    30b0:	87 e6       	ldi	r24, 0x67	; 103
    30b2:	89 b9       	out	0x09, r24	; 9
    30b4:	10 bc       	out	0x20, r1	; 32
    30b6:	08 95       	ret

000030b8 <UART_sendData>:
    30b8:	5d 9b       	sbis	0x0b, 5	; 11
    30ba:	fe cf       	rjmp	.-4      	; 0x30b8 <UART_sendData>
    30bc:	8c b9       	out	0x0c, r24	; 12
    30be:	08 95       	ret

000030c0 <UART_sendStr>:
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
    30c4:	cf 93       	push	r28
    30c6:	8c 01       	movw	r16, r24
    30c8:	c0 e0       	ldi	r28, 0x00	; 0
    30ca:	03 c0       	rjmp	.+6      	; 0x30d2 <UART_sendStr+0x12>
    30cc:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <UART_sendData>
    30d0:	cf 5f       	subi	r28, 0xFF	; 255
    30d2:	f8 01       	movw	r30, r16
    30d4:	ec 0f       	add	r30, r28
    30d6:	f1 1d       	adc	r31, r1
    30d8:	80 81       	ld	r24, Z
    30da:	81 11       	cpse	r24, r1
    30dc:	f7 cf       	rjmp	.-18     	; 0x30cc <UART_sendStr+0xc>
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	08 95       	ret

000030e6 <UART_receiveData>:
    30e6:	80 ea       	ldi	r24, 0xA0	; 160
    30e8:	96 e8       	ldi	r25, 0x86	; 134
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <UART_receiveData+0xa>
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	21 f0       	breq	.+8      	; 0x30f8 <UART_receiveData+0x12>
    30f0:	5f 9b       	sbis	0x0b, 7	; 11
    30f2:	fc cf       	rjmp	.-8      	; 0x30ec <UART_receiveData+0x6>
    30f4:	8c b1       	in	r24, 0x0c	; 12
    30f6:	08 95       	ret
    30f8:	88 e7       	ldi	r24, 0x78	; 120
    30fa:	08 95       	ret

000030fc <__vector_13>:
}

//Vector Table Function that belongs to UART_INT
//number(in vector table) - 1
void __vector_13() __attribute__((signal));
void __vector_13(){
    30fc:	1f 92       	push	r1
    30fe:	0f 92       	push	r0
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	0f 92       	push	r0
    3104:	11 24       	eor	r1, r1
    3106:	2f 93       	push	r18
    3108:	3f 93       	push	r19
    310a:	4f 93       	push	r20
    310c:	5f 93       	push	r21
    310e:	6f 93       	push	r22
    3110:	7f 93       	push	r23
    3112:	8f 93       	push	r24
    3114:	9f 93       	push	r25
    3116:	af 93       	push	r26
    3118:	bf 93       	push	r27
    311a:	ef 93       	push	r30
    311c:	ff 93       	push	r31
	UART_INTFunc();
    311e:	e0 91 f2 07 	lds	r30, 0x07F2	; 0x8007f2 <UART_INTFunc>
    3122:	f0 91 f3 07 	lds	r31, 0x07F3	; 0x8007f3 <UART_INTFunc+0x1>
    3126:	09 95       	icall
    3128:	ff 91       	pop	r31
    312a:	ef 91       	pop	r30
    312c:	bf 91       	pop	r27
    312e:	af 91       	pop	r26
    3130:	9f 91       	pop	r25
    3132:	8f 91       	pop	r24
    3134:	7f 91       	pop	r23
    3136:	6f 91       	pop	r22
    3138:	5f 91       	pop	r21
    313a:	4f 91       	pop	r20
    313c:	3f 91       	pop	r19
    313e:	2f 91       	pop	r18
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	0f 90       	pop	r0
    3146:	1f 90       	pop	r1
    3148:	18 95       	reti

0000314a <__subsf3>:
    314a:	50 58       	subi	r21, 0x80	; 128

0000314c <__addsf3>:
    314c:	bb 27       	eor	r27, r27
    314e:	aa 27       	eor	r26, r26
    3150:	0e 94 bd 18 	call	0x317a	; 0x317a <__addsf3x>
    3154:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__fp_round>
    3158:	0e 94 b7 19 	call	0x336e	; 0x336e <__fp_pscA>
    315c:	38 f0       	brcs	.+14     	; 0x316c <__addsf3+0x20>
    315e:	0e 94 be 19 	call	0x337c	; 0x337c <__fp_pscB>
    3162:	20 f0       	brcs	.+8      	; 0x316c <__addsf3+0x20>
    3164:	39 f4       	brne	.+14     	; 0x3174 <__addsf3+0x28>
    3166:	9f 3f       	cpi	r25, 0xFF	; 255
    3168:	19 f4       	brne	.+6      	; 0x3170 <__addsf3+0x24>
    316a:	26 f4       	brtc	.+8      	; 0x3174 <__addsf3+0x28>
    316c:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__fp_nan>
    3170:	0e f4       	brtc	.+2      	; 0x3174 <__addsf3+0x28>
    3172:	e0 95       	com	r30
    3174:	e7 fb       	bst	r30, 7
    3176:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__fp_inf>

0000317a <__addsf3x>:
    317a:	e9 2f       	mov	r30, r25
    317c:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__fp_split3>
    3180:	58 f3       	brcs	.-42     	; 0x3158 <__addsf3+0xc>
    3182:	ba 17       	cp	r27, r26
    3184:	62 07       	cpc	r22, r18
    3186:	73 07       	cpc	r23, r19
    3188:	84 07       	cpc	r24, r20
    318a:	95 07       	cpc	r25, r21
    318c:	20 f0       	brcs	.+8      	; 0x3196 <__addsf3x+0x1c>
    318e:	79 f4       	brne	.+30     	; 0x31ae <__addsf3x+0x34>
    3190:	a6 f5       	brtc	.+104    	; 0x31fa <__addsf3x+0x80>
    3192:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_zero>
    3196:	0e f4       	brtc	.+2      	; 0x319a <__addsf3x+0x20>
    3198:	e0 95       	com	r30
    319a:	0b 2e       	mov	r0, r27
    319c:	ba 2f       	mov	r27, r26
    319e:	a0 2d       	mov	r26, r0
    31a0:	0b 01       	movw	r0, r22
    31a2:	b9 01       	movw	r22, r18
    31a4:	90 01       	movw	r18, r0
    31a6:	0c 01       	movw	r0, r24
    31a8:	ca 01       	movw	r24, r20
    31aa:	a0 01       	movw	r20, r0
    31ac:	11 24       	eor	r1, r1
    31ae:	ff 27       	eor	r31, r31
    31b0:	59 1b       	sub	r21, r25
    31b2:	99 f0       	breq	.+38     	; 0x31da <__addsf3x+0x60>
    31b4:	59 3f       	cpi	r21, 0xF9	; 249
    31b6:	50 f4       	brcc	.+20     	; 0x31cc <__addsf3x+0x52>
    31b8:	50 3e       	cpi	r21, 0xE0	; 224
    31ba:	68 f1       	brcs	.+90     	; 0x3216 <__addsf3x+0x9c>
    31bc:	1a 16       	cp	r1, r26
    31be:	f0 40       	sbci	r31, 0x00	; 0
    31c0:	a2 2f       	mov	r26, r18
    31c2:	23 2f       	mov	r18, r19
    31c4:	34 2f       	mov	r19, r20
    31c6:	44 27       	eor	r20, r20
    31c8:	58 5f       	subi	r21, 0xF8	; 248
    31ca:	f3 cf       	rjmp	.-26     	; 0x31b2 <__addsf3x+0x38>
    31cc:	46 95       	lsr	r20
    31ce:	37 95       	ror	r19
    31d0:	27 95       	ror	r18
    31d2:	a7 95       	ror	r26
    31d4:	f0 40       	sbci	r31, 0x00	; 0
    31d6:	53 95       	inc	r21
    31d8:	c9 f7       	brne	.-14     	; 0x31cc <__addsf3x+0x52>
    31da:	7e f4       	brtc	.+30     	; 0x31fa <__addsf3x+0x80>
    31dc:	1f 16       	cp	r1, r31
    31de:	ba 0b       	sbc	r27, r26
    31e0:	62 0b       	sbc	r22, r18
    31e2:	73 0b       	sbc	r23, r19
    31e4:	84 0b       	sbc	r24, r20
    31e6:	ba f0       	brmi	.+46     	; 0x3216 <__addsf3x+0x9c>
    31e8:	91 50       	subi	r25, 0x01	; 1
    31ea:	a1 f0       	breq	.+40     	; 0x3214 <__addsf3x+0x9a>
    31ec:	ff 0f       	add	r31, r31
    31ee:	bb 1f       	adc	r27, r27
    31f0:	66 1f       	adc	r22, r22
    31f2:	77 1f       	adc	r23, r23
    31f4:	88 1f       	adc	r24, r24
    31f6:	c2 f7       	brpl	.-16     	; 0x31e8 <__addsf3x+0x6e>
    31f8:	0e c0       	rjmp	.+28     	; 0x3216 <__addsf3x+0x9c>
    31fa:	ba 0f       	add	r27, r26
    31fc:	62 1f       	adc	r22, r18
    31fe:	73 1f       	adc	r23, r19
    3200:	84 1f       	adc	r24, r20
    3202:	48 f4       	brcc	.+18     	; 0x3216 <__addsf3x+0x9c>
    3204:	87 95       	ror	r24
    3206:	77 95       	ror	r23
    3208:	67 95       	ror	r22
    320a:	b7 95       	ror	r27
    320c:	f7 95       	ror	r31
    320e:	9e 3f       	cpi	r25, 0xFE	; 254
    3210:	08 f0       	brcs	.+2      	; 0x3214 <__addsf3x+0x9a>
    3212:	b0 cf       	rjmp	.-160    	; 0x3174 <__addsf3+0x28>
    3214:	93 95       	inc	r25
    3216:	88 0f       	add	r24, r24
    3218:	08 f0       	brcs	.+2      	; 0x321c <__addsf3x+0xa2>
    321a:	99 27       	eor	r25, r25
    321c:	ee 0f       	add	r30, r30
    321e:	97 95       	ror	r25
    3220:	87 95       	ror	r24
    3222:	08 95       	ret

00003224 <__cmpsf2>:
    3224:	0e 94 8a 19 	call	0x3314	; 0x3314 <__fp_cmp>
    3228:	08 f4       	brcc	.+2      	; 0x322c <__cmpsf2+0x8>
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	08 95       	ret

0000322e <__fixsfsi>:
    322e:	0e 94 1e 19 	call	0x323c	; 0x323c <__fixunssfsi>
    3232:	68 94       	set
    3234:	b1 11       	cpse	r27, r1
    3236:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__fp_szero>
    323a:	08 95       	ret

0000323c <__fixunssfsi>:
    323c:	0e 94 de 19 	call	0x33bc	; 0x33bc <__fp_splitA>
    3240:	88 f0       	brcs	.+34     	; 0x3264 <__fixunssfsi+0x28>
    3242:	9f 57       	subi	r25, 0x7F	; 127
    3244:	98 f0       	brcs	.+38     	; 0x326c <__fixunssfsi+0x30>
    3246:	b9 2f       	mov	r27, r25
    3248:	99 27       	eor	r25, r25
    324a:	b7 51       	subi	r27, 0x17	; 23
    324c:	b0 f0       	brcs	.+44     	; 0x327a <__fixunssfsi+0x3e>
    324e:	e1 f0       	breq	.+56     	; 0x3288 <__fixunssfsi+0x4c>
    3250:	66 0f       	add	r22, r22
    3252:	77 1f       	adc	r23, r23
    3254:	88 1f       	adc	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	1a f0       	brmi	.+6      	; 0x3260 <__fixunssfsi+0x24>
    325a:	ba 95       	dec	r27
    325c:	c9 f7       	brne	.-14     	; 0x3250 <__fixunssfsi+0x14>
    325e:	14 c0       	rjmp	.+40     	; 0x3288 <__fixunssfsi+0x4c>
    3260:	b1 30       	cpi	r27, 0x01	; 1
    3262:	91 f0       	breq	.+36     	; 0x3288 <__fixunssfsi+0x4c>
    3264:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <__fp_zero>
    3268:	b1 e0       	ldi	r27, 0x01	; 1
    326a:	08 95       	ret
    326c:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_zero>
    3270:	67 2f       	mov	r22, r23
    3272:	78 2f       	mov	r23, r24
    3274:	88 27       	eor	r24, r24
    3276:	b8 5f       	subi	r27, 0xF8	; 248
    3278:	39 f0       	breq	.+14     	; 0x3288 <__fixunssfsi+0x4c>
    327a:	b9 3f       	cpi	r27, 0xF9	; 249
    327c:	cc f3       	brlt	.-14     	; 0x3270 <__fixunssfsi+0x34>
    327e:	86 95       	lsr	r24
    3280:	77 95       	ror	r23
    3282:	67 95       	ror	r22
    3284:	b3 95       	inc	r27
    3286:	d9 f7       	brne	.-10     	; 0x327e <__fixunssfsi+0x42>
    3288:	3e f4       	brtc	.+14     	; 0x3298 <__fixunssfsi+0x5c>
    328a:	90 95       	com	r25
    328c:	80 95       	com	r24
    328e:	70 95       	com	r23
    3290:	61 95       	neg	r22
    3292:	7f 4f       	sbci	r23, 0xFF	; 255
    3294:	8f 4f       	sbci	r24, 0xFF	; 255
    3296:	9f 4f       	sbci	r25, 0xFF	; 255
    3298:	08 95       	ret

0000329a <__floatunsisf>:
    329a:	e8 94       	clt
    329c:	09 c0       	rjmp	.+18     	; 0x32b0 <__floatsisf+0x12>

0000329e <__floatsisf>:
    329e:	97 fb       	bst	r25, 7
    32a0:	3e f4       	brtc	.+14     	; 0x32b0 <__floatsisf+0x12>
    32a2:	90 95       	com	r25
    32a4:	80 95       	com	r24
    32a6:	70 95       	com	r23
    32a8:	61 95       	neg	r22
    32aa:	7f 4f       	sbci	r23, 0xFF	; 255
    32ac:	8f 4f       	sbci	r24, 0xFF	; 255
    32ae:	9f 4f       	sbci	r25, 0xFF	; 255
    32b0:	99 23       	and	r25, r25
    32b2:	a9 f0       	breq	.+42     	; 0x32de <__floatsisf+0x40>
    32b4:	f9 2f       	mov	r31, r25
    32b6:	96 e9       	ldi	r25, 0x96	; 150
    32b8:	bb 27       	eor	r27, r27
    32ba:	93 95       	inc	r25
    32bc:	f6 95       	lsr	r31
    32be:	87 95       	ror	r24
    32c0:	77 95       	ror	r23
    32c2:	67 95       	ror	r22
    32c4:	b7 95       	ror	r27
    32c6:	f1 11       	cpse	r31, r1
    32c8:	f8 cf       	rjmp	.-16     	; 0x32ba <__floatsisf+0x1c>
    32ca:	fa f4       	brpl	.+62     	; 0x330a <__floatsisf+0x6c>
    32cc:	bb 0f       	add	r27, r27
    32ce:	11 f4       	brne	.+4      	; 0x32d4 <__floatsisf+0x36>
    32d0:	60 ff       	sbrs	r22, 0
    32d2:	1b c0       	rjmp	.+54     	; 0x330a <__floatsisf+0x6c>
    32d4:	6f 5f       	subi	r22, 0xFF	; 255
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	8f 4f       	sbci	r24, 0xFF	; 255
    32da:	9f 4f       	sbci	r25, 0xFF	; 255
    32dc:	16 c0       	rjmp	.+44     	; 0x330a <__floatsisf+0x6c>
    32de:	88 23       	and	r24, r24
    32e0:	11 f0       	breq	.+4      	; 0x32e6 <__floatsisf+0x48>
    32e2:	96 e9       	ldi	r25, 0x96	; 150
    32e4:	11 c0       	rjmp	.+34     	; 0x3308 <__floatsisf+0x6a>
    32e6:	77 23       	and	r23, r23
    32e8:	21 f0       	breq	.+8      	; 0x32f2 <__floatsisf+0x54>
    32ea:	9e e8       	ldi	r25, 0x8E	; 142
    32ec:	87 2f       	mov	r24, r23
    32ee:	76 2f       	mov	r23, r22
    32f0:	05 c0       	rjmp	.+10     	; 0x32fc <__floatsisf+0x5e>
    32f2:	66 23       	and	r22, r22
    32f4:	71 f0       	breq	.+28     	; 0x3312 <__floatsisf+0x74>
    32f6:	96 e8       	ldi	r25, 0x86	; 134
    32f8:	86 2f       	mov	r24, r22
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	2a f0       	brmi	.+10     	; 0x330a <__floatsisf+0x6c>
    3300:	9a 95       	dec	r25
    3302:	66 0f       	add	r22, r22
    3304:	77 1f       	adc	r23, r23
    3306:	88 1f       	adc	r24, r24
    3308:	da f7       	brpl	.-10     	; 0x3300 <__floatsisf+0x62>
    330a:	88 0f       	add	r24, r24
    330c:	96 95       	lsr	r25
    330e:	87 95       	ror	r24
    3310:	97 f9       	bld	r25, 7
    3312:	08 95       	ret

00003314 <__fp_cmp>:
    3314:	99 0f       	add	r25, r25
    3316:	00 08       	sbc	r0, r0
    3318:	55 0f       	add	r21, r21
    331a:	aa 0b       	sbc	r26, r26
    331c:	e0 e8       	ldi	r30, 0x80	; 128
    331e:	fe ef       	ldi	r31, 0xFE	; 254
    3320:	16 16       	cp	r1, r22
    3322:	17 06       	cpc	r1, r23
    3324:	e8 07       	cpc	r30, r24
    3326:	f9 07       	cpc	r31, r25
    3328:	c0 f0       	brcs	.+48     	; 0x335a <__fp_cmp+0x46>
    332a:	12 16       	cp	r1, r18
    332c:	13 06       	cpc	r1, r19
    332e:	e4 07       	cpc	r30, r20
    3330:	f5 07       	cpc	r31, r21
    3332:	98 f0       	brcs	.+38     	; 0x335a <__fp_cmp+0x46>
    3334:	62 1b       	sub	r22, r18
    3336:	73 0b       	sbc	r23, r19
    3338:	84 0b       	sbc	r24, r20
    333a:	95 0b       	sbc	r25, r21
    333c:	39 f4       	brne	.+14     	; 0x334c <__fp_cmp+0x38>
    333e:	0a 26       	eor	r0, r26
    3340:	61 f0       	breq	.+24     	; 0x335a <__fp_cmp+0x46>
    3342:	23 2b       	or	r18, r19
    3344:	24 2b       	or	r18, r20
    3346:	25 2b       	or	r18, r21
    3348:	21 f4       	brne	.+8      	; 0x3352 <__fp_cmp+0x3e>
    334a:	08 95       	ret
    334c:	0a 26       	eor	r0, r26
    334e:	09 f4       	brne	.+2      	; 0x3352 <__fp_cmp+0x3e>
    3350:	a1 40       	sbci	r26, 0x01	; 1
    3352:	a6 95       	lsr	r26
    3354:	8f ef       	ldi	r24, 0xFF	; 255
    3356:	81 1d       	adc	r24, r1
    3358:	81 1d       	adc	r24, r1
    335a:	08 95       	ret

0000335c <__fp_inf>:
    335c:	97 f9       	bld	r25, 7
    335e:	9f 67       	ori	r25, 0x7F	; 127
    3360:	80 e8       	ldi	r24, 0x80	; 128
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	08 95       	ret

00003368 <__fp_nan>:
    3368:	9f ef       	ldi	r25, 0xFF	; 255
    336a:	80 ec       	ldi	r24, 0xC0	; 192
    336c:	08 95       	ret

0000336e <__fp_pscA>:
    336e:	00 24       	eor	r0, r0
    3370:	0a 94       	dec	r0
    3372:	16 16       	cp	r1, r22
    3374:	17 06       	cpc	r1, r23
    3376:	18 06       	cpc	r1, r24
    3378:	09 06       	cpc	r0, r25
    337a:	08 95       	ret

0000337c <__fp_pscB>:
    337c:	00 24       	eor	r0, r0
    337e:	0a 94       	dec	r0
    3380:	12 16       	cp	r1, r18
    3382:	13 06       	cpc	r1, r19
    3384:	14 06       	cpc	r1, r20
    3386:	05 06       	cpc	r0, r21
    3388:	08 95       	ret

0000338a <__fp_round>:
    338a:	09 2e       	mov	r0, r25
    338c:	03 94       	inc	r0
    338e:	00 0c       	add	r0, r0
    3390:	11 f4       	brne	.+4      	; 0x3396 <__fp_round+0xc>
    3392:	88 23       	and	r24, r24
    3394:	52 f0       	brmi	.+20     	; 0x33aa <__fp_round+0x20>
    3396:	bb 0f       	add	r27, r27
    3398:	40 f4       	brcc	.+16     	; 0x33aa <__fp_round+0x20>
    339a:	bf 2b       	or	r27, r31
    339c:	11 f4       	brne	.+4      	; 0x33a2 <__fp_round+0x18>
    339e:	60 ff       	sbrs	r22, 0
    33a0:	04 c0       	rjmp	.+8      	; 0x33aa <__fp_round+0x20>
    33a2:	6f 5f       	subi	r22, 0xFF	; 255
    33a4:	7f 4f       	sbci	r23, 0xFF	; 255
    33a6:	8f 4f       	sbci	r24, 0xFF	; 255
    33a8:	9f 4f       	sbci	r25, 0xFF	; 255
    33aa:	08 95       	ret

000033ac <__fp_split3>:
    33ac:	57 fd       	sbrc	r21, 7
    33ae:	90 58       	subi	r25, 0x80	; 128
    33b0:	44 0f       	add	r20, r20
    33b2:	55 1f       	adc	r21, r21
    33b4:	59 f0       	breq	.+22     	; 0x33cc <__fp_splitA+0x10>
    33b6:	5f 3f       	cpi	r21, 0xFF	; 255
    33b8:	71 f0       	breq	.+28     	; 0x33d6 <__fp_splitA+0x1a>
    33ba:	47 95       	ror	r20

000033bc <__fp_splitA>:
    33bc:	88 0f       	add	r24, r24
    33be:	97 fb       	bst	r25, 7
    33c0:	99 1f       	adc	r25, r25
    33c2:	61 f0       	breq	.+24     	; 0x33dc <__fp_splitA+0x20>
    33c4:	9f 3f       	cpi	r25, 0xFF	; 255
    33c6:	79 f0       	breq	.+30     	; 0x33e6 <__fp_splitA+0x2a>
    33c8:	87 95       	ror	r24
    33ca:	08 95       	ret
    33cc:	12 16       	cp	r1, r18
    33ce:	13 06       	cpc	r1, r19
    33d0:	14 06       	cpc	r1, r20
    33d2:	55 1f       	adc	r21, r21
    33d4:	f2 cf       	rjmp	.-28     	; 0x33ba <__fp_split3+0xe>
    33d6:	46 95       	lsr	r20
    33d8:	f1 df       	rcall	.-30     	; 0x33bc <__fp_splitA>
    33da:	08 c0       	rjmp	.+16     	; 0x33ec <__fp_splitA+0x30>
    33dc:	16 16       	cp	r1, r22
    33de:	17 06       	cpc	r1, r23
    33e0:	18 06       	cpc	r1, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	f1 cf       	rjmp	.-30     	; 0x33c8 <__fp_splitA+0xc>
    33e6:	86 95       	lsr	r24
    33e8:	71 05       	cpc	r23, r1
    33ea:	61 05       	cpc	r22, r1
    33ec:	08 94       	sec
    33ee:	08 95       	ret

000033f0 <__fp_zero>:
    33f0:	e8 94       	clt

000033f2 <__fp_szero>:
    33f2:	bb 27       	eor	r27, r27
    33f4:	66 27       	eor	r22, r22
    33f6:	77 27       	eor	r23, r23
    33f8:	cb 01       	movw	r24, r22
    33fa:	97 f9       	bld	r25, 7
    33fc:	08 95       	ret

000033fe <__gesf2>:
    33fe:	0e 94 8a 19 	call	0x3314	; 0x3314 <__fp_cmp>
    3402:	08 f4       	brcc	.+2      	; 0x3406 <__gesf2+0x8>
    3404:	8f ef       	ldi	r24, 0xFF	; 255
    3406:	08 95       	ret

00003408 <__mulsf3>:
    3408:	0e 94 17 1a 	call	0x342e	; 0x342e <__mulsf3x>
    340c:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__fp_round>
    3410:	0e 94 b7 19 	call	0x336e	; 0x336e <__fp_pscA>
    3414:	38 f0       	brcs	.+14     	; 0x3424 <__mulsf3+0x1c>
    3416:	0e 94 be 19 	call	0x337c	; 0x337c <__fp_pscB>
    341a:	20 f0       	brcs	.+8      	; 0x3424 <__mulsf3+0x1c>
    341c:	95 23       	and	r25, r21
    341e:	11 f0       	breq	.+4      	; 0x3424 <__mulsf3+0x1c>
    3420:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__fp_inf>
    3424:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__fp_nan>
    3428:	11 24       	eor	r1, r1
    342a:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__fp_szero>

0000342e <__mulsf3x>:
    342e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__fp_split3>
    3432:	70 f3       	brcs	.-36     	; 0x3410 <__mulsf3+0x8>

00003434 <__mulsf3_pse>:
    3434:	95 9f       	mul	r25, r21
    3436:	c1 f3       	breq	.-16     	; 0x3428 <__mulsf3+0x20>
    3438:	95 0f       	add	r25, r21
    343a:	50 e0       	ldi	r21, 0x00	; 0
    343c:	55 1f       	adc	r21, r21
    343e:	62 9f       	mul	r22, r18
    3440:	f0 01       	movw	r30, r0
    3442:	72 9f       	mul	r23, r18
    3444:	bb 27       	eor	r27, r27
    3446:	f0 0d       	add	r31, r0
    3448:	b1 1d       	adc	r27, r1
    344a:	63 9f       	mul	r22, r19
    344c:	aa 27       	eor	r26, r26
    344e:	f0 0d       	add	r31, r0
    3450:	b1 1d       	adc	r27, r1
    3452:	aa 1f       	adc	r26, r26
    3454:	64 9f       	mul	r22, r20
    3456:	66 27       	eor	r22, r22
    3458:	b0 0d       	add	r27, r0
    345a:	a1 1d       	adc	r26, r1
    345c:	66 1f       	adc	r22, r22
    345e:	82 9f       	mul	r24, r18
    3460:	22 27       	eor	r18, r18
    3462:	b0 0d       	add	r27, r0
    3464:	a1 1d       	adc	r26, r1
    3466:	62 1f       	adc	r22, r18
    3468:	73 9f       	mul	r23, r19
    346a:	b0 0d       	add	r27, r0
    346c:	a1 1d       	adc	r26, r1
    346e:	62 1f       	adc	r22, r18
    3470:	83 9f       	mul	r24, r19
    3472:	a0 0d       	add	r26, r0
    3474:	61 1d       	adc	r22, r1
    3476:	22 1f       	adc	r18, r18
    3478:	74 9f       	mul	r23, r20
    347a:	33 27       	eor	r19, r19
    347c:	a0 0d       	add	r26, r0
    347e:	61 1d       	adc	r22, r1
    3480:	23 1f       	adc	r18, r19
    3482:	84 9f       	mul	r24, r20
    3484:	60 0d       	add	r22, r0
    3486:	21 1d       	adc	r18, r1
    3488:	82 2f       	mov	r24, r18
    348a:	76 2f       	mov	r23, r22
    348c:	6a 2f       	mov	r22, r26
    348e:	11 24       	eor	r1, r1
    3490:	9f 57       	subi	r25, 0x7F	; 127
    3492:	50 40       	sbci	r21, 0x00	; 0
    3494:	9a f0       	brmi	.+38     	; 0x34bc <__mulsf3_pse+0x88>
    3496:	f1 f0       	breq	.+60     	; 0x34d4 <__mulsf3_pse+0xa0>
    3498:	88 23       	and	r24, r24
    349a:	4a f0       	brmi	.+18     	; 0x34ae <__mulsf3_pse+0x7a>
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	bb 1f       	adc	r27, r27
    34a2:	66 1f       	adc	r22, r22
    34a4:	77 1f       	adc	r23, r23
    34a6:	88 1f       	adc	r24, r24
    34a8:	91 50       	subi	r25, 0x01	; 1
    34aa:	50 40       	sbci	r21, 0x00	; 0
    34ac:	a9 f7       	brne	.-22     	; 0x3498 <__mulsf3_pse+0x64>
    34ae:	9e 3f       	cpi	r25, 0xFE	; 254
    34b0:	51 05       	cpc	r21, r1
    34b2:	80 f0       	brcs	.+32     	; 0x34d4 <__mulsf3_pse+0xa0>
    34b4:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__fp_inf>
    34b8:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__fp_szero>
    34bc:	5f 3f       	cpi	r21, 0xFF	; 255
    34be:	e4 f3       	brlt	.-8      	; 0x34b8 <__mulsf3_pse+0x84>
    34c0:	98 3e       	cpi	r25, 0xE8	; 232
    34c2:	d4 f3       	brlt	.-12     	; 0x34b8 <__mulsf3_pse+0x84>
    34c4:	86 95       	lsr	r24
    34c6:	77 95       	ror	r23
    34c8:	67 95       	ror	r22
    34ca:	b7 95       	ror	r27
    34cc:	f7 95       	ror	r31
    34ce:	e7 95       	ror	r30
    34d0:	9f 5f       	subi	r25, 0xFF	; 255
    34d2:	c1 f7       	brne	.-16     	; 0x34c4 <__mulsf3_pse+0x90>
    34d4:	fe 2b       	or	r31, r30
    34d6:	88 0f       	add	r24, r24
    34d8:	91 1d       	adc	r25, r1
    34da:	96 95       	lsr	r25
    34dc:	87 95       	ror	r24
    34de:	97 f9       	bld	r25, 7
    34e0:	08 95       	ret

000034e2 <__udivmodhi4>:
    34e2:	aa 1b       	sub	r26, r26
    34e4:	bb 1b       	sub	r27, r27
    34e6:	51 e1       	ldi	r21, 0x11	; 17
    34e8:	07 c0       	rjmp	.+14     	; 0x34f8 <__udivmodhi4_ep>

000034ea <__udivmodhi4_loop>:
    34ea:	aa 1f       	adc	r26, r26
    34ec:	bb 1f       	adc	r27, r27
    34ee:	a6 17       	cp	r26, r22
    34f0:	b7 07       	cpc	r27, r23
    34f2:	10 f0       	brcs	.+4      	; 0x34f8 <__udivmodhi4_ep>
    34f4:	a6 1b       	sub	r26, r22
    34f6:	b7 0b       	sbc	r27, r23

000034f8 <__udivmodhi4_ep>:
    34f8:	88 1f       	adc	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	5a 95       	dec	r21
    34fe:	a9 f7       	brne	.-22     	; 0x34ea <__udivmodhi4_loop>
    3500:	80 95       	com	r24
    3502:	90 95       	com	r25
    3504:	bc 01       	movw	r22, r24
    3506:	cd 01       	movw	r24, r26
    3508:	08 95       	ret

0000350a <__divmodhi4>:
    350a:	97 fb       	bst	r25, 7
    350c:	07 2e       	mov	r0, r23
    350e:	16 f4       	brtc	.+4      	; 0x3514 <__divmodhi4+0xa>
    3510:	00 94       	com	r0
    3512:	07 d0       	rcall	.+14     	; 0x3522 <__divmodhi4_neg1>
    3514:	77 fd       	sbrc	r23, 7
    3516:	09 d0       	rcall	.+18     	; 0x352a <__divmodhi4_neg2>
    3518:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__udivmodhi4>
    351c:	07 fc       	sbrc	r0, 7
    351e:	05 d0       	rcall	.+10     	; 0x352a <__divmodhi4_neg2>
    3520:	3e f4       	brtc	.+14     	; 0x3530 <__divmodhi4_exit>

00003522 <__divmodhi4_neg1>:
    3522:	90 95       	com	r25
    3524:	81 95       	neg	r24
    3526:	9f 4f       	sbci	r25, 0xFF	; 255
    3528:	08 95       	ret

0000352a <__divmodhi4_neg2>:
    352a:	70 95       	com	r23
    352c:	61 95       	neg	r22
    352e:	7f 4f       	sbci	r23, 0xFF	; 255

00003530 <__divmodhi4_exit>:
    3530:	08 95       	ret

00003532 <__tablejump2__>:
    3532:	ee 0f       	add	r30, r30
    3534:	ff 1f       	adc	r31, r31
    3536:	05 90       	lpm	r0, Z+
    3538:	f4 91       	lpm	r31, Z
    353a:	e0 2d       	mov	r30, r0
    353c:	09 94       	ijmp

0000353e <memcpy>:
    353e:	fb 01       	movw	r30, r22
    3540:	dc 01       	movw	r26, r24
    3542:	02 c0       	rjmp	.+4      	; 0x3548 <memcpy+0xa>
    3544:	01 90       	ld	r0, Z+
    3546:	0d 92       	st	X+, r0
    3548:	41 50       	subi	r20, 0x01	; 1
    354a:	50 40       	sbci	r21, 0x00	; 0
    354c:	d8 f7       	brcc	.-10     	; 0x3544 <memcpy+0x6>
    354e:	08 95       	ret

00003550 <_exit>:
    3550:	f8 94       	cli

00003552 <__stop_program>:
    3552:	ff cf       	rjmp	.-2      	; 0x3552 <__stop_program>
