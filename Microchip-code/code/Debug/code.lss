
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000550  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001192  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000867  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00002938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000936  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000391e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a6 02 	jmp	0x54c	; 0x54c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "BIT_MATH.h"

#include "Sess18/ASG2/ASS_INT.h"

int main(){
	source_code();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <source_code>
	return 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <source_code>:
#include "Sess18\ASG2\ASS_INT.h"

int source_code()
{
	//LCD initialization
	LCD_int();
  76:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_int>
	//Counter
	s8 counter=0;
	
	//Increment button
	u8 increment_state;
	DIO_setPinDir(DIO_PIND0,DIO_OUTPUT);
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	88 e1       	ldi	r24, 0x18	; 24
  7e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	
	//Decrement button
	u8 decrement_state;
	DIO_setPinDir(DIO_PIND6,DIO_OUTPUT);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	8e e1       	ldi	r24, 0x1E	; 30
  86:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	
	//clear and start display at 0
	LCD_clearDis();
  8a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_clearDis>
	LCD_sendData(counter+48);
  8e:	80 e3       	ldi	r24, 0x30	; 48
  90:	0e 94 99 00 	call	0x132	; 0x132 <LCD_sendData>
{
	//LCD initialization
	LCD_int();
	
	//Counter
	s8 counter=0;
  94:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_clearDis();
	LCD_sendData(counter+48);
	while (1)
	{
		//Increment button
		increment_state = DIO_readPinValue(DIO_PIND0);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_readPinValue>
		if (increment_state==DIO_HIGH)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	79 f4       	brne	.+30     	; 0xbe <source_code+0x48>
		{
			counter++;
  a0:	cf 5f       	subi	r28, 0xFF	; 255
			LCD_clearDis();
  a2:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_clearDis>
			while (DIO_readPinValue(DIO_PIND0)==DIO_HIGH);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_readPinValue>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	d9 f3       	breq	.-10     	; 0xa6 <source_code+0x30>
			if (counter==10)
  b0:	ca 30       	cpi	r28, 0x0A	; 10
  b2:	09 f4       	brne	.+2      	; 0xb6 <source_code+0x40>
			{
				counter=9;
  b4:	c9 e0       	ldi	r28, 0x09	; 9
			}
			LCD_sendData(counter+48);
  b6:	80 e3       	ldi	r24, 0x30	; 48
  b8:	8c 0f       	add	r24, r28
  ba:	0e 94 99 00 	call	0x132	; 0x132 <LCD_sendData>
		}
		
		//Decrement button
		decrement_state = DIO_readPinValue(DIO_PIND6);
  be:	8e e1       	ldi	r24, 0x1E	; 30
  c0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_readPinValue>
		if (decrement_state==DIO_HIGH)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	39 f7       	brne	.-50     	; 0x96 <source_code+0x20>
		{
			counter--;
  c8:	c1 50       	subi	r28, 0x01	; 1
			LCD_clearDis();
  ca:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_clearDis>
			while (DIO_readPinValue(DIO_PIND6)==DIO_HIGH);
  ce:	8e e1       	ldi	r24, 0x1E	; 30
  d0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_readPinValue>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	d9 f3       	breq	.-10     	; 0xce <source_code+0x58>
			if (counter==-1)
  d8:	cf 3f       	cpi	r28, 0xFF	; 255
  da:	09 f4       	brne	.+2      	; 0xde <source_code+0x68>
			{
				counter=0;
  dc:	c0 e0       	ldi	r28, 0x00	; 0
			}
			LCD_sendData(counter+48);
  de:	80 e3       	ldi	r24, 0x30	; 48
  e0:	8c 0f       	add	r24, r28
  e2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_sendData>
  e6:	d7 cf       	rjmp	.-82     	; 0x96 <source_code+0x20>

000000e8 <LCD_Instruction>:
	//RW
	//low -> write
	//high -> read
	
	//Set registers to send data
	if (type=='D')
  e8:	84 34       	cpi	r24, 0x44	; 68
  ea:	49 f4       	brne	.+18     	; 0xfe <LCD_Instruction+0x16>
	{
		DIO_setPinValue(LCD_RW,DIO_LOW);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
		DIO_setPinValue(LCD_RS,DIO_HIGH);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	89 e0       	ldi	r24, 0x09	; 9
  f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
  fc:	08 95       	ret
	}
	
	//Set registers to send command
	else if (type=='C')
  fe:	83 34       	cpi	r24, 0x43	; 67
 100:	41 f4       	brne	.+16     	; 0x112 <LCD_Instruction+0x2a>
	{
		DIO_setPinValue(LCD_RW,DIO_LOW);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
		DIO_setPinValue(LCD_RS,DIO_LOW);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	89 e0       	ldi	r24, 0x09	; 9
 10e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
 112:	08 95       	ret

00000114 <LCD_pulse>:
	LCD_sendCmd(0b00000001);
}


void LCD_pulse(){
	DIO_setPinValue(LCD_E,DIO_HIGH);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	8b e0       	ldi	r24, 0x0B	; 11
 118:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_pulse+0xc>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_pulse+0x12>
 126:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_E,DIO_LOW);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8b e0       	ldi	r24, 0x0B	; 11
 12c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
 130:	08 95       	ret

00000132 <LCD_sendData>:
		DIO_setPinValue(LCD_RW,DIO_LOW);
		DIO_setPinValue(LCD_RS,DIO_LOW);
	}
}

void LCD_sendData(u8 data){
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
	
	LCD_Instruction('D');
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Instruction>
	
	//DIO_setPinValue(LCD_RW,DIO_LOW);
	//DIO_setPinValue(LCD_RS,DIO_HIGH);
	
	//High bits
	DIO_setPinValue(LCD_D4,GET_BIT(data,4));
 13c:	c4 fb       	bst	r28, 4
 13e:	66 27       	eor	r22, r22
 140:	60 f9       	bld	r22, 0
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(data,5));
 148:	c5 fb       	bst	r28, 5
 14a:	66 27       	eor	r22, r22
 14c:	60 f9       	bld	r22, 0
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(data,6));
 154:	c6 fb       	bst	r28, 6
 156:	66 27       	eor	r22, r22
 158:	60 f9       	bld	r22, 0
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(data,7));
 160:	6c 2f       	mov	r22, r28
 162:	66 1f       	adc	r22, r22
 164:	66 27       	eor	r22, r22
 166:	66 1f       	adc	r22, r22
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	
	LCD_pulse();
 16e:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
	
	//Low bits
	DIO_setPinValue(LCD_D4,GET_BIT(data,0));
 172:	6c 2f       	mov	r22, r28
 174:	61 70       	andi	r22, 0x01	; 1
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(data,1));
 17c:	c1 fb       	bst	r28, 1
 17e:	66 27       	eor	r22, r22
 180:	60 f9       	bld	r22, 0
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(data,2));
 188:	c2 fb       	bst	r28, 2
 18a:	66 27       	eor	r22, r22
 18c:	60 f9       	bld	r22, 0
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(data,3));
 194:	c3 fb       	bst	r28, 3
 196:	66 27       	eor	r22, r22
 198:	60 f9       	bld	r22, 0
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	
	LCD_pulse();
 1a0:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
	
}
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCD_sendCmd>:

void LCD_sendCmd(u8 cmd){
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
	LCD_Instruction('C');
 1ac:	83 e4       	ldi	r24, 0x43	; 67
 1ae:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Instruction>
	
	//DIO_setPinValue(LCD_RW,DIO_LOW);
	//DIO_setPinValue(LCD_RS,DIO_LOW);
	
	//High bits
	DIO_setPinValue(LCD_D4,GET_BIT(cmd,4));
 1b2:	c4 fb       	bst	r28, 4
 1b4:	66 27       	eor	r22, r22
 1b6:	60 f9       	bld	r22, 0
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(cmd,5));
 1be:	c5 fb       	bst	r28, 5
 1c0:	66 27       	eor	r22, r22
 1c2:	60 f9       	bld	r22, 0
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(cmd,6));
 1ca:	c6 fb       	bst	r28, 6
 1cc:	66 27       	eor	r22, r22
 1ce:	60 f9       	bld	r22, 0
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(cmd,7));
 1d6:	6c 2f       	mov	r22, r28
 1d8:	66 1f       	adc	r22, r22
 1da:	66 27       	eor	r22, r22
 1dc:	66 1f       	adc	r22, r22
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	
	LCD_pulse();
 1e4:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
	
	//Low bits
	DIO_setPinValue(LCD_D4,GET_BIT(cmd,0));
 1e8:	6c 2f       	mov	r22, r28
 1ea:	61 70       	andi	r22, 0x01	; 1
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D5,GET_BIT(cmd,1));
 1f2:	c1 fb       	bst	r28, 1
 1f4:	66 27       	eor	r22, r22
 1f6:	60 f9       	bld	r22, 0
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D6,GET_BIT(cmd,2));
 1fe:	c2 fb       	bst	r28, 2
 200:	66 27       	eor	r22, r22
 202:	60 f9       	bld	r22, 0
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	DIO_setPinValue(LCD_D7,GET_BIT(cmd,3));
 20a:	c3 fb       	bst	r28, 3
 20c:	66 27       	eor	r22, r22
 20e:	60 f9       	bld	r22, 0
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_setPinValue>
	
	LCD_pulse();
 216:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
}
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <LCD_int>:
 */ 

#include "LCD_INT.h"

void LCD_int(){
	DIO_setPinDir(LCD_D4,DIO_OUTPUT);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	DIO_setPinDir(LCD_D5,DIO_OUTPUT);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	DIO_setPinDir(LCD_D6,DIO_OUTPUT);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	DIO_setPinDir(LCD_D7,DIO_OUTPUT);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	
	DIO_setPinDir(LCD_E,DIO_OUTPUT);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	8b e0       	ldi	r24, 0x0B	; 11
 242:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	DIO_setPinDir(LCD_RW,DIO_OUTPUT);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	DIO_setPinDir(LCD_RS,DIO_OUTPUT);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	89 e0       	ldi	r24, 0x09	; 9
 252:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_setPinDir>
	
	LCD_sendCmd(0b00000010);
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	86 e7       	ldi	r24, 0x76	; 118
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <LCD_int+0x44>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_int+0x4e>
 26c:	00 00       	nop
	_delay_ms(30);
	LCD_sendCmd(0b00101000);
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_int+0x5a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_int+0x60>
 27e:	00 00       	nop
	
	_delay_ms(1);
	LCD_sendCmd(0b00001111);
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 286:	8f e9       	ldi	r24, 0x9F	; 159
 288:	9f e0       	ldi	r25, 0x0F	; 15
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_int+0x6c>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_int+0x72>
 290:	00 00       	nop
	
	_delay_ms(1);
	LCD_sendCmd(0b000000001);
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9f e1       	ldi	r25, 0x1F	; 31
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_int+0x7e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_int+0x84>
 2a2:	00 00       	nop
	
	_delay_ms(2);
	LCD_sendCmd(0b00000110);
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 2aa:	08 95       	ret

000002ac <LCD_clearDis>:
	
	LCD_pulse();
}

void LCD_clearDis(){
	LCD_sendCmd(0b00000001);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 2b2:	08 95       	ret

000002b4 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	00 f5       	brcc	.+64     	; 0x2f8 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 2b8:	61 11       	cpse	r22, r1
 2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 2bc:	4a b3       	in	r20, 0x1a	; 26
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	b9 01       	movw	r22, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_setPinDir+0x16>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_setPinDir+0x12>
 2ce:	cb 01       	movw	r24, r22
 2d0:	80 95       	com	r24
 2d2:	84 23       	and	r24, r20
 2d4:	8a bb       	out	0x1a, r24	; 26
 2d6:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	09 f0       	breq	.+2      	; 0x2de <DIO_setPinDir+0x2a>
 2dc:	75 c0       	rjmp	.+234    	; 0x3c8 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
 2de:	4a b3       	in	r20, 0x1a	; 26
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	b9 01       	movw	r22, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_setPinDir+0x38>
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	8a 95       	dec	r24
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_setPinDir+0x34>
 2f0:	cb 01       	movw	r24, r22
 2f2:	84 2b       	or	r24, r20
 2f4:	8a bb       	out	0x1a, r24	; 26
 2f6:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 2f8:	98 ef       	ldi	r25, 0xF8	; 248
 2fa:	98 0f       	add	r25, r24
 2fc:	98 30       	cpi	r25, 0x08	; 8
 2fe:	00 f5       	brcc	.+64     	; 0x340 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 300:	61 11       	cpse	r22, r1
 302:	0e c0       	rjmp	.+28     	; 0x320 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 304:	47 b3       	in	r20, 0x17	; 23
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	b9 01       	movw	r22, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_setPinDir+0x5e>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	9a 95       	dec	r25
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_setPinDir+0x5a>
 316:	cb 01       	movw	r24, r22
 318:	80 95       	com	r24
 31a:	84 23       	and	r24, r20
 31c:	87 bb       	out	0x17, r24	; 23
 31e:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 320:	61 30       	cpi	r22, 0x01	; 1
 322:	09 f0       	breq	.+2      	; 0x326 <DIO_setPinDir+0x72>
 324:	51 c0       	rjmp	.+162    	; 0x3c8 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 326:	47 b3       	in	r20, 0x17	; 23
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	b9 01       	movw	r22, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_setPinDir+0x80>
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	9a 95       	dec	r25
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_setPinDir+0x7c>
 338:	cb 01       	movw	r24, r22
 33a:	84 2b       	or	r24, r20
 33c:	87 bb       	out	0x17, r24	; 23
 33e:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 340:	90 ef       	ldi	r25, 0xF0	; 240
 342:	98 0f       	add	r25, r24
 344:	98 30       	cpi	r25, 0x08	; 8
 346:	f8 f4       	brcc	.+62     	; 0x386 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 348:	61 11       	cpse	r22, r1
 34a:	0e c0       	rjmp	.+28     	; 0x368 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 34c:	44 b3       	in	r20, 0x14	; 20
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	b9 01       	movw	r22, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_setPinDir+0xa6>
 356:	66 0f       	add	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	9a 95       	dec	r25
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_setPinDir+0xa2>
 35e:	cb 01       	movw	r24, r22
 360:	80 95       	com	r24
 362:	84 23       	and	r24, r20
 364:	84 bb       	out	0x14, r24	; 20
 366:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 368:	61 30       	cpi	r22, 0x01	; 1
 36a:	71 f5       	brne	.+92     	; 0x3c8 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 36c:	44 b3       	in	r20, 0x14	; 20
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_setPinDir+0xc6>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	9a 95       	dec	r25
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_setPinDir+0xc2>
 37e:	cb 01       	movw	r24, r22
 380:	84 2b       	or	r24, r20
 382:	84 bb       	out	0x14, r24	; 20
 384:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 386:	88 51       	subi	r24, 0x18	; 24
 388:	88 30       	cpi	r24, 0x08	; 8
 38a:	f0 f4       	brcc	.+60     	; 0x3c8 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 38c:	61 11       	cpse	r22, r1
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 390:	44 b3       	in	r20, 0x14	; 20
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	b9 01       	movw	r22, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_setPinDir+0xea>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	8a 95       	dec	r24
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_setPinDir+0xe6>
 3a2:	cb 01       	movw	r24, r22
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	84 bb       	out	0x14, r24	; 20
 3aa:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 3ac:	61 30       	cpi	r22, 0x01	; 1
 3ae:	61 f4       	brne	.+24     	; 0x3c8 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 3b0:	44 b3       	in	r20, 0x14	; 20
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_setPinDir+0x10a>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	8a 95       	dec	r24
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_setPinDir+0x106>
 3c2:	cb 01       	movw	r24, r22
 3c4:	84 2b       	or	r24, r20
 3c6:	84 bb       	out	0x14, r24	; 20
 3c8:	08 95       	ret

000003ca <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 3ca:	88 30       	cpi	r24, 0x08	; 8
 3cc:	00 f5       	brcc	.+64     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		if (level==DIO_LOW){
 3ce:	61 11       	cpse	r22, r1
 3d0:	0e c0       	rjmp	.+28     	; 0x3ee <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 3d2:	4b b3       	in	r20, 0x1b	; 27
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	b9 01       	movw	r22, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_setPinValue+0x16>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	8a 95       	dec	r24
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_setPinValue+0x12>
 3e4:	cb 01       	movw	r24, r22
 3e6:	80 95       	com	r24
 3e8:	84 23       	and	r24, r20
 3ea:	8b bb       	out	0x1b, r24	; 27
 3ec:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 3ee:	61 30       	cpi	r22, 0x01	; 1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <DIO_setPinValue+0x2a>
 3f2:	75 c0       	rjmp	.+234    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			SET_BIT(PORTA,pinNum);
 3f4:	4b b3       	in	r20, 0x1b	; 27
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	b9 01       	movw	r22, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	8a 95       	dec	r24
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_setPinValue+0x34>
 406:	cb 01       	movw	r24, r22
 408:	84 2b       	or	r24, r20
 40a:	8b bb       	out	0x1b, r24	; 27
 40c:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 40e:	98 ef       	ldi	r25, 0xF8	; 248
 410:	98 0f       	add	r25, r24
 412:	98 30       	cpi	r25, 0x08	; 8
 414:	00 f5       	brcc	.+64     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 416:	61 11       	cpse	r22, r1
 418:	0e c0       	rjmp	.+28     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			CLEAR_BIT(PORTB,pinNum);
 41a:	48 b3       	in	r20, 0x18	; 24
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	9a 95       	dec	r25
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	88 bb       	out	0x18, r24	; 24
 434:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 436:	61 30       	cpi	r22, 0x01	; 1
 438:	09 f0       	breq	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	51 c0       	rjmp	.+162    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			SET_BIT(PORTB,pinNum);
 43c:	48 b3       	in	r20, 0x18	; 24
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	b9 01       	movw	r22, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	9a 95       	dec	r25
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	cb 01       	movw	r24, r22
 450:	84 2b       	or	r24, r20
 452:	88 bb       	out	0x18, r24	; 24
 454:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 456:	90 ef       	ldi	r25, 0xF0	; 240
 458:	98 0f       	add	r25, r24
 45a:	98 30       	cpi	r25, 0x08	; 8
 45c:	f8 f4       	brcc	.+62     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 45e:	61 11       	cpse	r22, r1
 460:	0e c0       	rjmp	.+28     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			CLEAR_BIT(PORTC,pinNum);
 462:	45 b3       	in	r20, 0x15	; 21
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	9a 95       	dec	r25
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	cb 01       	movw	r24, r22
 476:	80 95       	com	r24
 478:	84 23       	and	r24, r20
 47a:	85 bb       	out	0x15, r24	; 21
 47c:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 47e:	61 30       	cpi	r22, 0x01	; 1
 480:	71 f5       	brne	.+92     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			SET_BIT(PORTC,pinNum);
 482:	45 b3       	in	r20, 0x15	; 21
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	9a 95       	dec	r25
 492:	e2 f7       	brpl	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 494:	cb 01       	movw	r24, r22
 496:	84 2b       	or	r24, r20
 498:	85 bb       	out	0x15, r24	; 21
 49a:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 49c:	88 51       	subi	r24, 0x18	; 24
 49e:	88 30       	cpi	r24, 0x08	; 8
 4a0:	f0 f4       	brcc	.+60     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 4a2:	61 11       	cpse	r22, r1
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
			CLEAR_BIT(PORTD,pinNum);
 4a6:	42 b3       	in	r20, 0x12	; 18
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	b9 01       	movw	r22, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	8a 95       	dec	r24
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	cb 01       	movw	r24, r22
 4ba:	80 95       	com	r24
 4bc:	84 23       	and	r24, r20
 4be:	82 bb       	out	0x12, r24	; 18
 4c0:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4c2:	61 30       	cpi	r22, 0x01	; 1
 4c4:	61 f4       	brne	.+24     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
			SET_BIT(PORTD,pinNum);
 4c6:	42 b3       	in	r20, 0x12	; 18
 4c8:	21 e0       	ldi	r18, 0x01	; 1
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	b9 01       	movw	r22, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	8a 95       	dec	r24
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4d8:	cb 01       	movw	r24, r22
 4da:	84 2b       	or	r24, r20
 4dc:	82 bb       	out	0x12, r24	; 18
 4de:	08 95       	ret

000004e0 <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 4e0:	88 30       	cpi	r24, 0x08	; 8
 4e2:	58 f4       	brcc	.+22     	; 0x4fa <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
 4e4:	29 b3       	in	r18, 0x19	; 25
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	a9 01       	movw	r20, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_readPinValue+0x10>
 4ec:	55 95       	asr	r21
 4ee:	47 95       	ror	r20
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_readPinValue+0xc>
 4f4:	ca 01       	movw	r24, r20
 4f6:	81 70       	andi	r24, 0x01	; 1
 4f8:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 4fa:	28 ef       	ldi	r18, 0xF8	; 248
 4fc:	28 0f       	add	r18, r24
 4fe:	28 30       	cpi	r18, 0x08	; 8
 500:	48 f4       	brcc	.+18     	; 0x514 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 502:	86 b3       	in	r24, 0x16	; 22
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_readPinValue+0x2c>
 508:	95 95       	asr	r25
 50a:	87 95       	ror	r24
 50c:	2a 95       	dec	r18
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_readPinValue+0x28>
 510:	81 70       	andi	r24, 0x01	; 1
 512:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 514:	20 ef       	ldi	r18, 0xF0	; 240
 516:	28 0f       	add	r18, r24
 518:	28 30       	cpi	r18, 0x08	; 8
 51a:	48 f4       	brcc	.+18     	; 0x52e <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 51c:	83 b3       	in	r24, 0x13	; 19
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_readPinValue+0x46>
 522:	95 95       	asr	r25
 524:	87 95       	ror	r24
 526:	2a 95       	dec	r18
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_readPinValue+0x42>
 52a:	81 70       	andi	r24, 0x01	; 1
 52c:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 52e:	28 ee       	ldi	r18, 0xE8	; 232
 530:	28 0f       	add	r18, r24
 532:	28 30       	cpi	r18, 0x08	; 8
 534:	50 f4       	brcc	.+20     	; 0x54a <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 536:	90 b3       	in	r25, 0x10	; 16
 538:	89 2f       	mov	r24, r25
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_readPinValue+0x62>
 53e:	95 95       	asr	r25
 540:	87 95       	ror	r24
 542:	2a 95       	dec	r18
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_readPinValue+0x5e>
 546:	81 70       	andi	r24, 0x01	; 1
 548:	08 95       	ret
	}
}
 54a:	08 95       	ret

0000054c <_exit>:
 54c:	f8 94       	cli

0000054e <__stop_program>:
 54e:	ff cf       	rjmp	.-2      	; 0x54e <__stop_program>
