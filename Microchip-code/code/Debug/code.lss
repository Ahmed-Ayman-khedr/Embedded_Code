
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000006b6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800066  00800066  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001537  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000919  00000000  00000000  00001e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad3  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00003278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000603  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3f  00000000  00000000  00003c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000497e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_1>
   8:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_2>
   c:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "BIT_MATH.h"

#include "Sess20/sess_INT.h"

int main(){
	source_code();
  92:	0e 94 56 00 	call	0xac	; 0xac <source_code>
	return 0;
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret

0000009c <shiftLCDright>:
 */ 

#include "Sess20/sess_INT.h"

void shiftLCDright(){
	LCD_Shift(LCD_SHIFT_DIS_RIGHT);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_Shift>
  a2:	08 95       	ret

000000a4 <shiftLCDlift>:
}

void shiftLCDlift(){
	LCD_Shift(LCD_SHIFT_DIS_LIFT);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_Shift>
  aa:	08 95       	ret

000000ac <source_code>:
}

int source_code()
{
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	82 e1       	ldi	r24, 0x12	; 18
  b0:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
	GI_enable();
  b4:	0e 94 55 03 	call	0x6aa	; 0x6aa <GI_enable>
	EXT_int0Int(EXT_RISING);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 8b 02 	call	0x516	; 0x516 <EXT_int0Int>
	EXT_int1Int(EXT_RISING);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <EXT_int1Int>
	EXT_int2Int(EXT_RISING);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 1f 03 	call	0x63e	; 0x63e <EXT_int2Int>
	LCD_init();
  ca:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_init>
	LCD_sendStr("Ahmed");
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_sendStr>
	EXT_setcallbackInt0(shiftLCDright);
  d6:	8e e4       	ldi	r24, 0x4E	; 78
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 a9 02 	call	0x552	; 0x552 <EXT_setcallbackInt0>
	EXT_setcallbackInt1(shiftLCDlift);
  de:	82 e5       	ldi	r24, 0x52	; 82
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <EXT_setcallbackInt1>
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <source_code+0x3a>

000000e8 <LCD_Instruction>:
	}
}

void LCD_SendNewCharacter(u8 CharLocation){
	//Show the new character
	LCD_sendData(CharLocation);
  e8:	84 34       	cpi	r24, 0x44	; 68
  ea:	49 f4       	brne	.+18     	; 0xfe <LCD_Instruction+0x16>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	89 e0       	ldi	r24, 0x09	; 9
  f8:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
  fc:	08 95       	ret
  fe:	83 34       	cpi	r24, 0x43	; 67
 100:	41 f4       	brne	.+16     	; 0x112 <LCD_Instruction+0x2a>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	89 e0       	ldi	r24, 0x09	; 9
 10e:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 112:	08 95       	ret

00000114 <LCD_pulse>:
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	8b e0       	ldi	r24, 0x0B	; 11
 118:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_pulse+0xc>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_pulse+0x12>
 126:	00 00       	nop
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8b e0       	ldi	r24, 0x0B	; 11
 12c:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 130:	08 95       	ret

00000132 <LCD_sendData>:
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Instruction>
 13c:	c4 fb       	bst	r28, 4
 13e:	66 27       	eor	r22, r22
 140:	60 f9       	bld	r22, 0
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 148:	c5 fb       	bst	r28, 5
 14a:	66 27       	eor	r22, r22
 14c:	60 f9       	bld	r22, 0
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 154:	c6 fb       	bst	r28, 6
 156:	66 27       	eor	r22, r22
 158:	60 f9       	bld	r22, 0
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 160:	6c 2f       	mov	r22, r28
 162:	66 1f       	adc	r22, r22
 164:	66 27       	eor	r22, r22
 166:	66 1f       	adc	r22, r22
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 16e:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
 172:	6c 2f       	mov	r22, r28
 174:	61 70       	andi	r22, 0x01	; 1
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 17c:	c1 fb       	bst	r28, 1
 17e:	66 27       	eor	r22, r22
 180:	60 f9       	bld	r22, 0
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 188:	c2 fb       	bst	r28, 2
 18a:	66 27       	eor	r22, r22
 18c:	60 f9       	bld	r22, 0
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 194:	c3 fb       	bst	r28, 3
 196:	66 27       	eor	r22, r22
 198:	60 f9       	bld	r22, 0
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 1a0:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCD_sendCmd>:
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
 1ac:	83 e4       	ldi	r24, 0x43	; 67
 1ae:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Instruction>
 1b2:	c4 fb       	bst	r28, 4
 1b4:	66 27       	eor	r22, r22
 1b6:	60 f9       	bld	r22, 0
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 1be:	c5 fb       	bst	r28, 5
 1c0:	66 27       	eor	r22, r22
 1c2:	60 f9       	bld	r22, 0
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 1ca:	c6 fb       	bst	r28, 6
 1cc:	66 27       	eor	r22, r22
 1ce:	60 f9       	bld	r22, 0
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 1d6:	6c 2f       	mov	r22, r28
 1d8:	66 1f       	adc	r22, r22
 1da:	66 27       	eor	r22, r22
 1dc:	66 1f       	adc	r22, r22
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 1e4:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
 1e8:	6c 2f       	mov	r22, r28
 1ea:	61 70       	andi	r22, 0x01	; 1
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 1f2:	c1 fb       	bst	r28, 1
 1f4:	66 27       	eor	r22, r22
 1f6:	60 f9       	bld	r22, 0
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 1fe:	c2 fb       	bst	r28, 2
 200:	66 27       	eor	r22, r22
 202:	60 f9       	bld	r22, 0
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 20a:	c3 fb       	bst	r28, 3
 20c:	66 27       	eor	r22, r22
 20e:	60 f9       	bld	r22, 0
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	0e 94 00 02 	call	0x400	; 0x400 <DIO_setPinValue>
 216:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_pulse>
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <LCD_init>:
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	8b e0       	ldi	r24, 0x0B	; 11
 242:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	89 e0       	ldi	r24, 0x09	; 9
 252:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_setPinDir>
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	86 e7       	ldi	r24, 0x76	; 118
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <LCD_init+0x44>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_init+0x4e>
 26c:	00 00       	nop
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_init+0x5a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_init+0x60>
 27e:	00 00       	nop
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 286:	8f e9       	ldi	r24, 0x9F	; 159
 288:	9f e0       	ldi	r25, 0x0F	; 15
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_init+0x6c>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_init+0x72>
 290:	00 00       	nop
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9f e1       	ldi	r25, 0x1F	; 31
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_init+0x7e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_init+0x84>
 2a2:	00 00       	nop
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 2aa:	08 95       	ret

000002ac <LCD_sendStr>:
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	8c 01       	movw	r16, r24
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCD_sendStr+0x12>
 2b8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_sendData>
 2bc:	cf 5f       	subi	r28, 0xFF	; 255
 2be:	f8 01       	movw	r30, r16
 2c0:	ec 0f       	add	r30, r28
 2c2:	f1 1d       	adc	r31, r1
 2c4:	80 81       	ld	r24, Z
 2c6:	81 11       	cpse	r24, r1
 2c8:	f7 cf       	rjmp	.-18     	; 0x2b8 <LCD_sendStr+0xc>
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <LCD_Shift>:
}

void LCD_Shift(u8 direction){
	if (direction==LCD_SHIFT_DIS_RIGHT)
 2d2:	81 11       	cpse	r24, r1
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <LCD_Shift+0xc>
	{
		//Shift right
		LCD_sendCmd(0b00011100);
 2d6:	8c e1       	ldi	r24, 0x1C	; 28
 2d8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 2dc:	08 95       	ret
	}
	else if (direction==LCD_SHIFT_DIS_LIFT)
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <LCD_Shift+0x16>
	{
		//Shift left
		LCD_sendCmd(0b00011000);
 2e2:	88 e1       	ldi	r24, 0x18	; 24
 2e4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_sendCmd>
 2e8:	08 95       	ret

000002ea <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 2ea:	88 30       	cpi	r24, 0x08	; 8
 2ec:	00 f5       	brcc	.+64     	; 0x32e <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 2ee:	61 11       	cpse	r22, r1
 2f0:	0e c0       	rjmp	.+28     	; 0x30e <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 2f2:	4a b3       	in	r20, 0x1a	; 26
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	b9 01       	movw	r22, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_setPinDir+0x16>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_setPinDir+0x12>
 304:	cb 01       	movw	r24, r22
 306:	80 95       	com	r24
 308:	84 23       	and	r24, r20
 30a:	8a bb       	out	0x1a, r24	; 26
 30c:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 30e:	61 30       	cpi	r22, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <DIO_setPinDir+0x2a>
 312:	75 c0       	rjmp	.+234    	; 0x3fe <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
 314:	4a b3       	in	r20, 0x1a	; 26
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_setPinDir+0x38>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_setPinDir+0x34>
 326:	cb 01       	movw	r24, r22
 328:	84 2b       	or	r24, r20
 32a:	8a bb       	out	0x1a, r24	; 26
 32c:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 32e:	98 ef       	ldi	r25, 0xF8	; 248
 330:	98 0f       	add	r25, r24
 332:	98 30       	cpi	r25, 0x08	; 8
 334:	00 f5       	brcc	.+64     	; 0x376 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 336:	61 11       	cpse	r22, r1
 338:	0e c0       	rjmp	.+28     	; 0x356 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 33a:	47 b3       	in	r20, 0x17	; 23
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	b9 01       	movw	r22, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_setPinDir+0x5e>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	9a 95       	dec	r25
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_setPinDir+0x5a>
 34c:	cb 01       	movw	r24, r22
 34e:	80 95       	com	r24
 350:	84 23       	and	r24, r20
 352:	87 bb       	out	0x17, r24	; 23
 354:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 356:	61 30       	cpi	r22, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <DIO_setPinDir+0x72>
 35a:	51 c0       	rjmp	.+162    	; 0x3fe <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 35c:	47 b3       	in	r20, 0x17	; 23
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_setPinDir+0x80>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	9a 95       	dec	r25
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_setPinDir+0x7c>
 36e:	cb 01       	movw	r24, r22
 370:	84 2b       	or	r24, r20
 372:	87 bb       	out	0x17, r24	; 23
 374:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 376:	90 ef       	ldi	r25, 0xF0	; 240
 378:	98 0f       	add	r25, r24
 37a:	98 30       	cpi	r25, 0x08	; 8
 37c:	f8 f4       	brcc	.+62     	; 0x3bc <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 37e:	61 11       	cpse	r22, r1
 380:	0e c0       	rjmp	.+28     	; 0x39e <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 382:	44 b3       	in	r20, 0x14	; 20
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_setPinDir+0xa6>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	9a 95       	dec	r25
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_setPinDir+0xa2>
 394:	cb 01       	movw	r24, r22
 396:	80 95       	com	r24
 398:	84 23       	and	r24, r20
 39a:	84 bb       	out	0x14, r24	; 20
 39c:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 39e:	61 30       	cpi	r22, 0x01	; 1
 3a0:	71 f5       	brne	.+92     	; 0x3fe <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 3a2:	44 b3       	in	r20, 0x14	; 20
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	b9 01       	movw	r22, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_setPinDir+0xc6>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	9a 95       	dec	r25
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_setPinDir+0xc2>
 3b4:	cb 01       	movw	r24, r22
 3b6:	84 2b       	or	r24, r20
 3b8:	84 bb       	out	0x14, r24	; 20
 3ba:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 3bc:	88 51       	subi	r24, 0x18	; 24
 3be:	88 30       	cpi	r24, 0x08	; 8
 3c0:	f0 f4       	brcc	.+60     	; 0x3fe <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 3c2:	61 11       	cpse	r22, r1
 3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 3c6:	44 b3       	in	r20, 0x14	; 20
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	b9 01       	movw	r22, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_setPinDir+0xea>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_setPinDir+0xe6>
 3d8:	cb 01       	movw	r24, r22
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	84 bb       	out	0x14, r24	; 20
 3e0:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 3e2:	61 30       	cpi	r22, 0x01	; 1
 3e4:	61 f4       	brne	.+24     	; 0x3fe <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 3e6:	44 b3       	in	r20, 0x14	; 20
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_setPinDir+0x10a>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_setPinDir+0x106>
 3f8:	cb 01       	movw	r24, r22
 3fa:	84 2b       	or	r24, r20
 3fc:	84 bb       	out	0x14, r24	; 20
 3fe:	08 95       	ret

00000400 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 400:	88 30       	cpi	r24, 0x08	; 8
 402:	00 f5       	brcc	.+64     	; 0x444 <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 404:	61 11       	cpse	r22, r1
 406:	0e c0       	rjmp	.+28     	; 0x424 <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 408:	4b b3       	in	r20, 0x1b	; 27
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_setPinValue+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_setPinValue+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	8b bb       	out	0x1b, r24	; 27
 422:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	09 f0       	breq	.+2      	; 0x42a <DIO_setPinValue+0x2a>
 428:	75 c0       	rjmp	.+234    	; 0x514 <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 42a:	4b b3       	in	r20, 0x1b	; 27
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	b9 01       	movw	r22, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_setPinValue+0x38>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	8a 95       	dec	r24
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_setPinValue+0x34>
 43c:	cb 01       	movw	r24, r22
 43e:	84 2b       	or	r24, r20
 440:	8b bb       	out	0x1b, r24	; 27
 442:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 444:	98 ef       	ldi	r25, 0xF8	; 248
 446:	98 0f       	add	r25, r24
 448:	98 30       	cpi	r25, 0x08	; 8
 44a:	00 f5       	brcc	.+64     	; 0x48c <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 44c:	61 11       	cpse	r22, r1
 44e:	0e c0       	rjmp	.+28     	; 0x46c <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 450:	48 b3       	in	r20, 0x18	; 24
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_setPinValue+0x5e>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	9a 95       	dec	r25
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_setPinValue+0x5a>
 462:	cb 01       	movw	r24, r22
 464:	80 95       	com	r24
 466:	84 23       	and	r24, r20
 468:	88 bb       	out	0x18, r24	; 24
 46a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 46c:	61 30       	cpi	r22, 0x01	; 1
 46e:	09 f0       	breq	.+2      	; 0x472 <DIO_setPinValue+0x72>
 470:	51 c0       	rjmp	.+162    	; 0x514 <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 472:	48 b3       	in	r20, 0x18	; 24
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	b9 01       	movw	r22, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_setPinValue+0x80>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	9a 95       	dec	r25
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_setPinValue+0x7c>
 484:	cb 01       	movw	r24, r22
 486:	84 2b       	or	r24, r20
 488:	88 bb       	out	0x18, r24	; 24
 48a:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 48c:	90 ef       	ldi	r25, 0xF0	; 240
 48e:	98 0f       	add	r25, r24
 490:	98 30       	cpi	r25, 0x08	; 8
 492:	f8 f4       	brcc	.+62     	; 0x4d2 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 494:	61 11       	cpse	r22, r1
 496:	0e c0       	rjmp	.+28     	; 0x4b4 <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 498:	45 b3       	in	r20, 0x15	; 21
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	b9 01       	movw	r22, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_setPinValue+0xa6>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	9a 95       	dec	r25
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_setPinValue+0xa2>
 4aa:	cb 01       	movw	r24, r22
 4ac:	80 95       	com	r24
 4ae:	84 23       	and	r24, r20
 4b0:	85 bb       	out	0x15, r24	; 21
 4b2:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4b4:	61 30       	cpi	r22, 0x01	; 1
 4b6:	71 f5       	brne	.+92     	; 0x514 <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 4b8:	45 b3       	in	r20, 0x15	; 21
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_setPinValue+0xc6>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	9a 95       	dec	r25
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_setPinValue+0xc2>
 4ca:	cb 01       	movw	r24, r22
 4cc:	84 2b       	or	r24, r20
 4ce:	85 bb       	out	0x15, r24	; 21
 4d0:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 4d2:	88 51       	subi	r24, 0x18	; 24
 4d4:	88 30       	cpi	r24, 0x08	; 8
 4d6:	f0 f4       	brcc	.+60     	; 0x514 <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 4d8:	61 11       	cpse	r22, r1
 4da:	0e c0       	rjmp	.+28     	; 0x4f8 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 4dc:	42 b3       	in	r20, 0x12	; 18
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	b9 01       	movw	r22, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_setPinValue+0xea>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_setPinValue+0xe6>
 4ee:	cb 01       	movw	r24, r22
 4f0:	80 95       	com	r24
 4f2:	84 23       	and	r24, r20
 4f4:	82 bb       	out	0x12, r24	; 18
 4f6:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4f8:	61 30       	cpi	r22, 0x01	; 1
 4fa:	61 f4       	brne	.+24     	; 0x514 <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 4fc:	42 b3       	in	r20, 0x12	; 18
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	b9 01       	movw	r22, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_setPinValue+0x10a>
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_setPinValue+0x106>
 50e:	cb 01       	movw	r24, r22
 510:	84 2b       	or	r24, r20
 512:	82 bb       	out	0x12, r24	; 18
 514:	08 95       	ret

00000516 <EXT_int0Int>:

void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	39 f4       	brne	.+14     	; 0x528 <EXT_int0Int+0x12>
 51a:	85 b7       	in	r24, 0x35	; 53
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	85 bf       	out	0x35, r24	; 53
 520:	85 b7       	in	r24, 0x35	; 53
 522:	82 60       	ori	r24, 0x02	; 2
 524:	85 bf       	out	0x35, r24	; 53
 526:	11 c0       	rjmp	.+34     	; 0x54a <EXT_int0Int+0x34>
 528:	81 11       	cpse	r24, r1
 52a:	07 c0       	rjmp	.+14     	; 0x53a <EXT_int0Int+0x24>
 52c:	85 b7       	in	r24, 0x35	; 53
 52e:	8e 7f       	andi	r24, 0xFE	; 254
 530:	85 bf       	out	0x35, r24	; 53
 532:	85 b7       	in	r24, 0x35	; 53
 534:	8d 7f       	andi	r24, 0xFD	; 253
 536:	85 bf       	out	0x35, r24	; 53
 538:	08 c0       	rjmp	.+16     	; 0x54a <EXT_int0Int+0x34>
 53a:	82 30       	cpi	r24, 0x02	; 2
 53c:	31 f4       	brne	.+12     	; 0x54a <EXT_int0Int+0x34>
 53e:	85 b7       	in	r24, 0x35	; 53
 540:	81 60       	ori	r24, 0x01	; 1
 542:	85 bf       	out	0x35, r24	; 53
 544:	85 b7       	in	r24, 0x35	; 53
 546:	8d 7f       	andi	r24, 0xFD	; 253
 548:	85 bf       	out	0x35, r24	; 53
 54a:	8b b7       	in	r24, 0x3b	; 59
 54c:	80 64       	ori	r24, 0x40	; 64
 54e:	8b bf       	out	0x3b, r24	; 59
 550:	08 95       	ret

00000552 <EXT_setcallbackInt0>:
 552:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <EXT_int0Func+0x1>
 556:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <EXT_int0Func>
 55a:	08 95       	ret

0000055c <__vector_1>:
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
 57e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <EXT_int0Func>
 582:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <EXT_int0Func+0x1>
 586:	09 95       	icall
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <EXT_int1Int>:
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	39 f4       	brne	.+14     	; 0x5bc <EXT_int1Int+0x12>
 5ae:	85 b7       	in	r24, 0x35	; 53
 5b0:	84 60       	ori	r24, 0x04	; 4
 5b2:	85 bf       	out	0x35, r24	; 53
 5b4:	85 b7       	in	r24, 0x35	; 53
 5b6:	88 60       	ori	r24, 0x08	; 8
 5b8:	85 bf       	out	0x35, r24	; 53
 5ba:	11 c0       	rjmp	.+34     	; 0x5de <EXT_int1Int+0x34>
 5bc:	81 11       	cpse	r24, r1
 5be:	07 c0       	rjmp	.+14     	; 0x5ce <EXT_int1Int+0x24>
 5c0:	85 b7       	in	r24, 0x35	; 53
 5c2:	8b 7f       	andi	r24, 0xFB	; 251
 5c4:	85 bf       	out	0x35, r24	; 53
 5c6:	85 b7       	in	r24, 0x35	; 53
 5c8:	87 7f       	andi	r24, 0xF7	; 247
 5ca:	85 bf       	out	0x35, r24	; 53
 5cc:	08 c0       	rjmp	.+16     	; 0x5de <EXT_int1Int+0x34>
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	31 f4       	brne	.+12     	; 0x5de <EXT_int1Int+0x34>
 5d2:	85 b7       	in	r24, 0x35	; 53
 5d4:	84 60       	ori	r24, 0x04	; 4
 5d6:	85 bf       	out	0x35, r24	; 53
 5d8:	85 b7       	in	r24, 0x35	; 53
 5da:	87 7f       	andi	r24, 0xF7	; 247
 5dc:	85 bf       	out	0x35, r24	; 53
 5de:	8b b7       	in	r24, 0x3b	; 59
 5e0:	80 68       	ori	r24, 0x80	; 128
 5e2:	8b bf       	out	0x3b, r24	; 59
 5e4:	08 95       	ret

000005e6 <EXT_setcallbackInt1>:
 5e6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 5ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 5ee:	08 95       	ret

000005f0 <__vector_2>:
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	2f 93       	push	r18
 5fc:	3f 93       	push	r19
 5fe:	4f 93       	push	r20
 600:	5f 93       	push	r21
 602:	6f 93       	push	r22
 604:	7f 93       	push	r23
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	af 93       	push	r26
 60c:	bf 93       	push	r27
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
 612:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 616:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 61a:	09 95       	icall
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <EXT_int2Int>:
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	21 f4       	brne	.+8      	; 0x64a <EXT_int2Int+0xc>
 642:	84 b7       	in	r24, 0x34	; 52
 644:	80 64       	ori	r24, 0x40	; 64
 646:	84 bf       	out	0x34, r24	; 52
 648:	05 c0       	rjmp	.+10     	; 0x654 <EXT_int2Int+0x16>
 64a:	81 11       	cpse	r24, r1
 64c:	03 c0       	rjmp	.+6      	; 0x654 <EXT_int2Int+0x16>
 64e:	84 b7       	in	r24, 0x34	; 52
 650:	8f 7b       	andi	r24, 0xBF	; 191
 652:	84 bf       	out	0x34, r24	; 52
 654:	8b b7       	in	r24, 0x3b	; 59
 656:	80 62       	ori	r24, 0x20	; 32
 658:	8b bf       	out	0x3b, r24	; 59
 65a:	08 95       	ret

0000065c <__vector_3>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
 65c:	1f 92       	push	r1
 65e:	0f 92       	push	r0
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	0f 92       	push	r0
 664:	11 24       	eor	r1, r1
 666:	2f 93       	push	r18
 668:	3f 93       	push	r19
 66a:	4f 93       	push	r20
 66c:	5f 93       	push	r21
 66e:	6f 93       	push	r22
 670:	7f 93       	push	r23
 672:	8f 93       	push	r24
 674:	9f 93       	push	r25
 676:	af 93       	push	r26
 678:	bf 93       	push	r27
 67a:	ef 93       	push	r30
 67c:	ff 93       	push	r31
	EXT_int2Func();
 67e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <EXT_int2Func>
 682:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <EXT_int2Func+0x1>
 686:	09 95       	icall
 688:	ff 91       	pop	r31
 68a:	ef 91       	pop	r30
 68c:	bf 91       	pop	r27
 68e:	af 91       	pop	r26
 690:	9f 91       	pop	r25
 692:	8f 91       	pop	r24
 694:	7f 91       	pop	r23
 696:	6f 91       	pop	r22
 698:	5f 91       	pop	r21
 69a:	4f 91       	pop	r20
 69c:	3f 91       	pop	r19
 69e:	2f 91       	pop	r18
 6a0:	0f 90       	pop	r0
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	0f 90       	pop	r0
 6a6:	1f 90       	pop	r1
 6a8:	18 95       	reti

000006aa <GI_enable>:
 */ 

#include "GI_INT.h"

void GI_enable(){
	SET_BIT(SREG,I);
 6aa:	8f b7       	in	r24, 0x3f	; 63
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	8f bf       	out	0x3f, r24	; 63
 6b0:	08 95       	ret

000006b2 <_exit>:
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>
