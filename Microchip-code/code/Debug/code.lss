
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c92  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a9  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000696  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b7  00000000  00000000  0000262b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002ce2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "Sess18\ses.h"

int main(){
	source_code();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <source_code>
	return 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <source_code>:
	
	u8 stop_state, reset_state , reverse_state;
	
	
	//7-seg_set
	SS_init();
  76:	0e 94 91 00 	call	0x122	; 0x122 <SS_init>
	
	//stop button
	DIO_setPinDir(DIO_PINB0,DIO_INPUT);
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
	
	//reset button
	DIO_setPinDir(DIO_PIND6,DIO_INPUT);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	8e e1       	ldi	r24, 0x1E	; 30
  86:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
	
	//reverse button
	DIO_setPinDir(DIO_PIND2,DIO_INPUT);
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	8a e1       	ldi	r24, 0x1A	; 26
  8e:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>

int source_code()
{
	u8 counter = 1, flage=0;
	
	u32 timer = 0;
  92:	c0 e0       	ldi	r28, 0x00	; 0
  94:	d0 e0       	ldi	r29, 0x00	; 0

#include "Sess18\ses.h"

int source_code()
{
	u8 counter = 1, flage=0;
  96:	00 e0       	ldi	r16, 0x00	; 0
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <source_code+0x2c>
		
		//reset counter
		if (counter==0)
		{
			flage = 0;
			timer=0;
  9c:	c0 e0       	ldi	r28, 0x00	; 0
  9e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//reset counter
		if (counter==0)
		{
			flage = 0;
  a0:	00 e0       	ldi	r16, 0x00	; 0
	//reverse button
	DIO_setPinDir(DIO_PIND2,DIO_INPUT);
		
	while (1)
	{		
		SS_writeNum(counter);
  a2:	81 2f       	mov	r24, r17
  a4:	0e 94 aa 00 	call	0x154	; 0x154 <SS_writeNum>
		
		//timer delay without stopping the 7 seg
		timer++;
  a8:	21 96       	adiw	r28, 0x01	; 1
		if (timer==500 && flage==0)
  aa:	c4 3f       	cpi	r28, 0xF4	; 244
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	d8 07       	cpc	r29, r24
  b0:	29 f4       	brne	.+10     	; 0xbc <source_code+0x46>
  b2:	01 11       	cpse	r16, r1
  b4:	03 c0       	rjmp	.+6      	; 0xbc <source_code+0x46>
		{
			counter++;
  b6:	1f 5f       	subi	r17, 0xFF	; 255
			timer = 0;
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		if (timer==500 && flage==2)
  bc:	c4 3f       	cpi	r28, 0xF4	; 244
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	d8 07       	cpc	r29, r24
  c2:	29 f4       	brne	.+10     	; 0xce <source_code+0x58>
  c4:	02 30       	cpi	r16, 0x02	; 2
  c6:	19 f4       	brne	.+6      	; 0xce <source_code+0x58>
		{
			counter--;
  c8:	11 50       	subi	r17, 0x01	; 1
			timer = 0;
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//When the stop button is pressed
		stop_state = DIO_readPinValue(DIO_PINB0);
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_readPinValue>
		if (stop_state==DIO_HIGH)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	31 f4       	brne	.+12     	; 0xe4 <source_code+0x6e>
		{
			flage = 1;
			while (DIO_readPinValue(DIO_PINB0)==DIO_HIGH);
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	0e 94 20 02 	call	0x440	; 0x440 <DIO_readPinValue>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	d9 f3       	breq	.-10     	; 0xd8 <source_code+0x62>
		
		//When the stop button is pressed
		stop_state = DIO_readPinValue(DIO_PINB0);
		if (stop_state==DIO_HIGH)
		{
			flage = 1;
  e2:	01 e0       	ldi	r16, 0x01	; 1
			while (DIO_readPinValue(DIO_PINB0)==DIO_HIGH);
		}
		
		//When the reset button is pressed DIO_PIND6
		reset_state = DIO_readPinValue(DIO_PIND6);
  e4:	8e e1       	ldi	r24, 0x1E	; 30
  e6:	0e 94 20 02 	call	0x440	; 0x440 <DIO_readPinValue>
		if (reset_state==DIO_HIGH)
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	49 f4       	brne	.+18     	; 0x100 <source_code+0x8a>
		{
			flage = 0;
			timer=0;
			counter = 1;
			while (DIO_readPinValue(DIO_PIND6)==DIO_HIGH);
  ee:	8e e1       	ldi	r24, 0x1E	; 30
  f0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_readPinValue>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	d9 f3       	breq	.-10     	; 0xee <source_code+0x78>
		//When the reset button is pressed DIO_PIND6
		reset_state = DIO_readPinValue(DIO_PIND6);
		if (reset_state==DIO_HIGH)
		{
			flage = 0;
			timer=0;
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
		
		//When the reset button is pressed DIO_PIND6
		reset_state = DIO_readPinValue(DIO_PIND6);
		if (reset_state==DIO_HIGH)
		{
			flage = 0;
  fc:	00 e0       	ldi	r16, 0x00	; 0
			timer=0;
			counter = 1;
  fe:	11 e0       	ldi	r17, 0x01	; 1
			while (DIO_readPinValue(DIO_PIND6)==DIO_HIGH);
		}
		
		//When the reverse button is pressed DIO_PIND2
		reverse_state = DIO_readPinValue(DIO_PIND2);
 100:	8a e1       	ldi	r24, 0x1A	; 26
 102:	0e 94 20 02 	call	0x440	; 0x440 <DIO_readPinValue>
		if (reverse_state==DIO_HIGH)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	41 f4       	brne	.+16     	; 0x11a <source_code+0xa4>
		{
			flage = 2;
			timer = 0;
			while (DIO_readPinValue(DIO_PIND2)==DIO_HIGH);
 10a:	8a e1       	ldi	r24, 0x1A	; 26
 10c:	0e 94 20 02 	call	0x440	; 0x440 <DIO_readPinValue>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	d9 f3       	breq	.-10     	; 0x10a <source_code+0x94>
		//When the reverse button is pressed DIO_PIND2
		reverse_state = DIO_readPinValue(DIO_PIND2);
		if (reverse_state==DIO_HIGH)
		{
			flage = 2;
			timer = 0;
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
		
		//When the reverse button is pressed DIO_PIND2
		reverse_state = DIO_readPinValue(DIO_PIND2);
		if (reverse_state==DIO_HIGH)
		{
			flage = 2;
 118:	02 e0       	ldi	r16, 0x02	; 2
			timer = 0;
			while (DIO_readPinValue(DIO_PIND2)==DIO_HIGH);
		}
		
		//reset counter
		if (counter==0)
 11a:	11 23       	and	r17, r17
 11c:	09 f4       	brne	.+2      	; 0x120 <source_code+0xaa>
 11e:	be cf       	rjmp	.-132    	; 0x9c <source_code+0x26>
 120:	c0 cf       	rjmp	.-128    	; 0xa2 <source_code+0x2c>

00000122 <SS_init>:
 */ 

#include "SS_INT.h"

void SS_init(){
	DIO_setPinDir(SS_S0,DIO_OUTPUT);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
	DIO_setPinDir(SS_S1,DIO_OUTPUT);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
	DIO_setPinDir(SS_S2,DIO_OUTPUT);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
	DIO_setPinDir(SS_S3,DIO_OUTPUT);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
	
	DIO_setPinDir(SS_ENABLE1,DIO_OUTPUT);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
	DIO_setPinDir(SS_ENABLE2,DIO_OUTPUT);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_setPinDir>
 152:	08 95       	ret

00000154 <SS_writeNum>:
}

void SS_writeNum(u8 num){
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	18 2f       	mov	r17, r24
	//disable2
	DIO_setPinValue(SS_ENABLE2,DIO_LOW);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	89 e0       	ldi	r24, 0x09	; 9
 160:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	
	//write num1
	u8 num1 = num/10;
 164:	cd ec       	ldi	r28, 0xCD	; 205
 166:	1c 9f       	mul	r17, r28
 168:	c1 2d       	mov	r28, r1
 16a:	11 24       	eor	r1, r1
 16c:	c6 95       	lsr	r28
 16e:	c6 95       	lsr	r28
 170:	c6 95       	lsr	r28
	DIO_setPinValue(SS_S0,GET_BIT(num1,0));
 172:	6c 2f       	mov	r22, r28
 174:	61 70       	andi	r22, 0x01	; 1
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	DIO_setPinValue(SS_S1,GET_BIT(num1,1));
 17c:	c1 fb       	bst	r28, 1
 17e:	66 27       	eor	r22, r22
 180:	60 f9       	bld	r22, 0
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	DIO_setPinValue(SS_S2,GET_BIT(num1,2));
 188:	c2 fb       	bst	r28, 2
 18a:	66 27       	eor	r22, r22
 18c:	60 f9       	bld	r22, 0
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	DIO_setPinValue(SS_S3,GET_BIT(num1,3));
 194:	c3 fb       	bst	r28, 3
 196:	66 27       	eor	r22, r22
 198:	60 f9       	bld	r22, 0
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	
	//enable1
	DIO_setPinValue(SS_ENABLE1,DIO_HIGH);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	8a e0       	ldi	r24, 0x0A	; 10
 1a4:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e9       	ldi	r24, 0x9F	; 159
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <SS_writeNum+0x58>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <SS_writeNum+0x5e>
 1b2:	00 00       	nop
	_delay_ms(1);
	
	//disable1
	DIO_setPinValue(SS_ENABLE1,DIO_LOW);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	//write num2
	u8 num2 = num%10;
 1bc:	cc 0f       	add	r28, r28
 1be:	8c 2f       	mov	r24, r28
 1c0:	88 0f       	add	r24, r24
 1c2:	88 0f       	add	r24, r24
 1c4:	c8 0f       	add	r28, r24
 1c6:	d1 2f       	mov	r29, r17
 1c8:	dc 1b       	sub	r29, r28
	DIO_setPinValue(SS_S0,GET_BIT(num2,0));
 1ca:	6d 2f       	mov	r22, r29
 1cc:	61 70       	andi	r22, 0x01	; 1
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	DIO_setPinValue(SS_S1,GET_BIT(num2,1));
 1d4:	d1 fb       	bst	r29, 1
 1d6:	66 27       	eor	r22, r22
 1d8:	60 f9       	bld	r22, 0
 1da:	85 e0       	ldi	r24, 0x05	; 5
 1dc:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	DIO_setPinValue(SS_S2,GET_BIT(num2,2));
 1e0:	d2 fb       	bst	r29, 2
 1e2:	66 27       	eor	r22, r22
 1e4:	60 f9       	bld	r22, 0
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	DIO_setPinValue(SS_S3,GET_BIT(num2,3));
 1ec:	d3 fb       	bst	r29, 3
 1ee:	66 27       	eor	r22, r22
 1f0:	60 f9       	bld	r22, 0
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
	
	//enable2
	DIO_setPinValue(SS_ENABLE2,DIO_HIGH);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	89 e0       	ldi	r24, 0x09	; 9
 1fc:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_setPinValue>
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <SS_writeNum+0xb0>
 208:	00 c0       	rjmp	.+0      	; 0x20a <SS_writeNum+0xb6>
 20a:	00 00       	nop
	_delay_ms(1);
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	08 95       	ret

00000214 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 214:	88 30       	cpi	r24, 0x08	; 8
 216:	00 f5       	brcc	.+64     	; 0x258 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 218:	61 11       	cpse	r22, r1
 21a:	0e c0       	rjmp	.+28     	; 0x238 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 21c:	4a b3       	in	r20, 0x1a	; 26
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_setPinDir+0x16>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_setPinDir+0x12>
 22e:	cb 01       	movw	r24, r22
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8a bb       	out	0x1a, r24	; 26
 236:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 238:	61 30       	cpi	r22, 0x01	; 1
 23a:	09 f0       	breq	.+2      	; 0x23e <DIO_setPinDir+0x2a>
 23c:	75 c0       	rjmp	.+234    	; 0x328 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
 23e:	4a b3       	in	r20, 0x1a	; 26
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_setPinDir+0x38>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_setPinDir+0x34>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	8a bb       	out	0x1a, r24	; 26
 256:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 258:	98 ef       	ldi	r25, 0xF8	; 248
 25a:	98 0f       	add	r25, r24
 25c:	98 30       	cpi	r25, 0x08	; 8
 25e:	00 f5       	brcc	.+64     	; 0x2a0 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 260:	61 11       	cpse	r22, r1
 262:	0e c0       	rjmp	.+28     	; 0x280 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 264:	47 b3       	in	r20, 0x17	; 23
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_setPinDir+0x5e>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	9a 95       	dec	r25
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_setPinDir+0x5a>
 276:	cb 01       	movw	r24, r22
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	87 bb       	out	0x17, r24	; 23
 27e:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 280:	61 30       	cpi	r22, 0x01	; 1
 282:	09 f0       	breq	.+2      	; 0x286 <DIO_setPinDir+0x72>
 284:	51 c0       	rjmp	.+162    	; 0x328 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 286:	47 b3       	in	r20, 0x17	; 23
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	b9 01       	movw	r22, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_setPinDir+0x80>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	9a 95       	dec	r25
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_setPinDir+0x7c>
 298:	cb 01       	movw	r24, r22
 29a:	84 2b       	or	r24, r20
 29c:	87 bb       	out	0x17, r24	; 23
 29e:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 2a0:	90 ef       	ldi	r25, 0xF0	; 240
 2a2:	98 0f       	add	r25, r24
 2a4:	98 30       	cpi	r25, 0x08	; 8
 2a6:	f8 f4       	brcc	.+62     	; 0x2e6 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 2a8:	61 11       	cpse	r22, r1
 2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 2ac:	44 b3       	in	r20, 0x14	; 20
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	b9 01       	movw	r22, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_setPinDir+0xa6>
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	9a 95       	dec	r25
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_setPinDir+0xa2>
 2be:	cb 01       	movw	r24, r22
 2c0:	80 95       	com	r24
 2c2:	84 23       	and	r24, r20
 2c4:	84 bb       	out	0x14, r24	; 20
 2c6:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 2c8:	61 30       	cpi	r22, 0x01	; 1
 2ca:	71 f5       	brne	.+92     	; 0x328 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 2cc:	44 b3       	in	r20, 0x14	; 20
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	b9 01       	movw	r22, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_setPinDir+0xc6>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	9a 95       	dec	r25
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_setPinDir+0xc2>
 2de:	cb 01       	movw	r24, r22
 2e0:	84 2b       	or	r24, r20
 2e2:	84 bb       	out	0x14, r24	; 20
 2e4:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 2e6:	88 51       	subi	r24, 0x18	; 24
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	f0 f4       	brcc	.+60     	; 0x328 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 2ec:	61 11       	cpse	r22, r1
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 2f0:	44 b3       	in	r20, 0x14	; 20
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_setPinDir+0xea>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_setPinDir+0xe6>
 302:	cb 01       	movw	r24, r22
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	84 bb       	out	0x14, r24	; 20
 30a:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 30c:	61 30       	cpi	r22, 0x01	; 1
 30e:	61 f4       	brne	.+24     	; 0x328 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 310:	44 b3       	in	r20, 0x14	; 20
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_setPinDir+0x10a>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_setPinDir+0x106>
 322:	cb 01       	movw	r24, r22
 324:	84 2b       	or	r24, r20
 326:	84 bb       	out	0x14, r24	; 20
 328:	08 95       	ret

0000032a <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 32a:	88 30       	cpi	r24, 0x08	; 8
 32c:	00 f5       	brcc	.+64     	; 0x36e <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 32e:	61 11       	cpse	r22, r1
 330:	0e c0       	rjmp	.+28     	; 0x34e <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 332:	4b b3       	in	r20, 0x1b	; 27
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	b9 01       	movw	r22, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_setPinValue+0x16>
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_setPinValue+0x12>
 344:	cb 01       	movw	r24, r22
 346:	80 95       	com	r24
 348:	84 23       	and	r24, r20
 34a:	8b bb       	out	0x1b, r24	; 27
 34c:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 34e:	61 30       	cpi	r22, 0x01	; 1
 350:	09 f0       	breq	.+2      	; 0x354 <DIO_setPinValue+0x2a>
 352:	75 c0       	rjmp	.+234    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			SET_BIT(PORTA,pinNum);
 354:	4b b3       	in	r20, 0x1b	; 27
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_setPinValue+0x38>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_setPinValue+0x34>
 366:	cb 01       	movw	r24, r22
 368:	84 2b       	or	r24, r20
 36a:	8b bb       	out	0x1b, r24	; 27
 36c:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 36e:	98 ef       	ldi	r25, 0xF8	; 248
 370:	98 0f       	add	r25, r24
 372:	98 30       	cpi	r25, 0x08	; 8
 374:	00 f5       	brcc	.+64     	; 0x3b6 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 376:	61 11       	cpse	r22, r1
 378:	0e c0       	rjmp	.+28     	; 0x396 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 37a:	48 b3       	in	r20, 0x18	; 24
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_setPinValue+0x5e>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	9a 95       	dec	r25
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_setPinValue+0x5a>
 38c:	cb 01       	movw	r24, r22
 38e:	80 95       	com	r24
 390:	84 23       	and	r24, r20
 392:	88 bb       	out	0x18, r24	; 24
 394:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 396:	61 30       	cpi	r22, 0x01	; 1
 398:	09 f0       	breq	.+2      	; 0x39c <DIO_setPinValue+0x72>
 39a:	51 c0       	rjmp	.+162    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			SET_BIT(PORTB,pinNum);
 39c:	48 b3       	in	r20, 0x18	; 24
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_setPinValue+0x80>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	9a 95       	dec	r25
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_setPinValue+0x7c>
 3ae:	cb 01       	movw	r24, r22
 3b0:	84 2b       	or	r24, r20
 3b2:	88 bb       	out	0x18, r24	; 24
 3b4:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 3b6:	90 ef       	ldi	r25, 0xF0	; 240
 3b8:	98 0f       	add	r25, r24
 3ba:	98 30       	cpi	r25, 0x08	; 8
 3bc:	f8 f4       	brcc	.+62     	; 0x3fc <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 3be:	61 11       	cpse	r22, r1
 3c0:	0e c0       	rjmp	.+28     	; 0x3de <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 3c2:	45 b3       	in	r20, 0x15	; 21
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_setPinValue+0xa6>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	9a 95       	dec	r25
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_setPinValue+0xa2>
 3d4:	cb 01       	movw	r24, r22
 3d6:	80 95       	com	r24
 3d8:	84 23       	and	r24, r20
 3da:	85 bb       	out	0x15, r24	; 21
 3dc:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 3de:	61 30       	cpi	r22, 0x01	; 1
 3e0:	71 f5       	brne	.+92     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			SET_BIT(PORTC,pinNum);
 3e2:	45 b3       	in	r20, 0x15	; 21
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	b9 01       	movw	r22, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_setPinValue+0xc6>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	9a 95       	dec	r25
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_setPinValue+0xc2>
 3f4:	cb 01       	movw	r24, r22
 3f6:	84 2b       	or	r24, r20
 3f8:	85 bb       	out	0x15, r24	; 21
 3fa:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 3fc:	88 51       	subi	r24, 0x18	; 24
 3fe:	88 30       	cpi	r24, 0x08	; 8
 400:	f0 f4       	brcc	.+60     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 402:	61 11       	cpse	r22, r1
 404:	0e c0       	rjmp	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			CLEAR_BIT(PORTD,pinNum);
 406:	42 b3       	in	r20, 0x12	; 18
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	8a 95       	dec	r24
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	cb 01       	movw	r24, r22
 41a:	80 95       	com	r24
 41c:	84 23       	and	r24, r20
 41e:	82 bb       	out	0x12, r24	; 18
 420:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 422:	61 30       	cpi	r22, 0x01	; 1
 424:	61 f4       	brne	.+24     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			SET_BIT(PORTD,pinNum);
 426:	42 b3       	in	r20, 0x12	; 18
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	8a 95       	dec	r24
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	cb 01       	movw	r24, r22
 43a:	84 2b       	or	r24, r20
 43c:	82 bb       	out	0x12, r24	; 18
 43e:	08 95       	ret

00000440 <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 440:	88 30       	cpi	r24, 0x08	; 8
 442:	58 f4       	brcc	.+22     	; 0x45a <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
 444:	29 b3       	in	r18, 0x19	; 25
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	a9 01       	movw	r20, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_readPinValue+0x10>
 44c:	55 95       	asr	r21
 44e:	47 95       	ror	r20
 450:	8a 95       	dec	r24
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_readPinValue+0xc>
 454:	ca 01       	movw	r24, r20
 456:	81 70       	andi	r24, 0x01	; 1
 458:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 45a:	28 ef       	ldi	r18, 0xF8	; 248
 45c:	28 0f       	add	r18, r24
 45e:	28 30       	cpi	r18, 0x08	; 8
 460:	48 f4       	brcc	.+18     	; 0x474 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 462:	86 b3       	in	r24, 0x16	; 22
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_readPinValue+0x2c>
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	2a 95       	dec	r18
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_readPinValue+0x28>
 470:	81 70       	andi	r24, 0x01	; 1
 472:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 474:	20 ef       	ldi	r18, 0xF0	; 240
 476:	28 0f       	add	r18, r24
 478:	28 30       	cpi	r18, 0x08	; 8
 47a:	48 f4       	brcc	.+18     	; 0x48e <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 47c:	83 b3       	in	r24, 0x13	; 19
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_readPinValue+0x46>
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	2a 95       	dec	r18
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_readPinValue+0x42>
 48a:	81 70       	andi	r24, 0x01	; 1
 48c:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 48e:	28 ee       	ldi	r18, 0xE8	; 232
 490:	28 0f       	add	r18, r24
 492:	28 30       	cpi	r18, 0x08	; 8
 494:	50 f4       	brcc	.+20     	; 0x4aa <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 496:	90 b3       	in	r25, 0x10	; 16
 498:	89 2f       	mov	r24, r25
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_readPinValue+0x62>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	2a 95       	dec	r18
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_readPinValue+0x5e>
 4a6:	81 70       	andi	r24, 0x01	; 1
 4a8:	08 95       	ret
	}
}
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
