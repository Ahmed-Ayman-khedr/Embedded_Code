
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001b16  00001baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006b5  00800066  00800066  00001bb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049d0  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001318  00000000  00000000  00006af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dea  00000000  00000000  00007e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f28  00000000  00000000  0000abf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001728  00000000  00000000  0000bb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004986  00000000  00000000  0000d248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  00011bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_1>
       8:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_2>
       c:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__vector_6>
      1c:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__vector_10>
      2c:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 

#include "Sess34SEMAPHORE/COUNTINGSEMAPHORE/sess_INT.h"

int main(){
	source_code();
      92:	0e 94 90 00 	call	0x120	; 0x120 <source_code>
	return 0;
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	08 95       	ret

0000009c <Task1>:
//BOOL flag = TRUE;

void Task1(void *pvParameters){
	while (1)
	{
			u8 state = DIO_readPinValue(DIO_PIND2);
      9c:	8a e1       	ldi	r24, 0x1A	; 26
      9e:	0e 94 19 0c 	call	0x1832	; 0x1832 <DIO_readPinValue>
			if (state==DIO_HIGH)
      a2:	81 30       	cpi	r24, 0x01	; 1
      a4:	81 f4       	brne	.+32     	; 0xc6 <Task1+0x2a>
			{
				xSemaphoreGive(A);
      a6:	20 e0       	ldi	r18, 0x00	; 0
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	50 e0       	ldi	r21, 0x00	; 0
      ac:	60 e0       	ldi	r22, 0x00	; 0
      ae:	70 e0       	ldi	r23, 0x00	; 0
      b0:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <A>
      b4:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <A+0x1>
      b8:	0e 94 28 04 	call	0x850	; 0x850 <xQueueGenericSend>
				while(DIO_readPinValue(DIO_PIND2)==DIO_HIGH);
      bc:	8a e1       	ldi	r24, 0x1A	; 26
      be:	0e 94 19 0c 	call	0x1832	; 0x1832 <DIO_readPinValue>
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	d9 f3       	breq	.-10     	; 0xbc <Task1+0x20>
			}
		vTaskDelay(500/portTICK_PERIOD_MS);
      c6:	84 ef       	ldi	r24, 0xF4	; 244
      c8:	91 e0       	ldi	r25, 0x01	; 1
      ca:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <vTaskDelay>
	}
      ce:	e6 cf       	rjmp	.-52     	; 0x9c <Task1>

000000d0 <Task2>:
}

void Task2(void *pvParameters){
	while (1)
	{
		if( uxSemaphoreGetCount(A)==3 )
      d0:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <A>
      d4:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <A+0x1>
      d8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uxQueueMessagesWaiting>
      dc:	83 30       	cpi	r24, 0x03	; 3
      de:	d9 f4       	brne	.+54     	; 0x116 <Task2+0x46>
		{
			DIO_togglePinValue(DIO_PINC2);
      e0:	82 e1       	ldi	r24, 0x12	; 18
      e2:	0e 94 4f 0c 	call	0x189e	; 0x189e <DIO_togglePinValue>
			xSemaphoreTake(A,0);
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <A>
      ee:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <A+0x1>
      f2:	0e 94 ba 04 	call	0x974	; 0x974 <xQueueSemaphoreTake>
			xSemaphoreTake(A,0);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <A>
      fe:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <A+0x1>
     102:	0e 94 ba 04 	call	0x974	; 0x974 <xQueueSemaphoreTake>
			xSemaphoreTake(A,0);
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	70 e0       	ldi	r23, 0x00	; 0
     10a:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <A>
     10e:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <A+0x1>
     112:	0e 94 ba 04 	call	0x974	; 0x974 <xQueueSemaphoreTake>
		}
		vTaskDelay(500/portTICK_PERIOD_MS);
     116:	84 ef       	ldi	r24, 0xF4	; 244
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <vTaskDelay>
	}
     11e:	d8 cf       	rjmp	.-80     	; 0xd0 <Task2>

00000120 <source_code>:
}

int source_code()
{
	DIO_setPinDir(DIO_PIND2,DIO_INPUT);
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	8a e1       	ldi	r24, 0x1A	; 26
     124:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_setPinDir>
	
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	82 e1       	ldi	r24, 0x12	; 18
     12c:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_setPinDir>
	
	xTaskCreate(Task1, NULL, 100, NULL, 2, &xHandle1);
     130:	0f 2e       	mov	r0, r31
     132:	fb e0       	ldi	r31, 0x0B	; 11
     134:	ef 2e       	mov	r14, r31
     136:	f7 e0       	ldi	r31, 0x07	; 7
     138:	ff 2e       	mov	r15, r31
     13a:	f0 2d       	mov	r31, r0
     13c:	02 e0       	ldi	r16, 0x02	; 2
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	44 e6       	ldi	r20, 0x64	; 100
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	8e e4       	ldi	r24, 0x4E	; 78
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 02 07 	call	0xe04	; 0xe04 <xTaskCreate>
		
	xTaskCreate(Task2, NULL, 100, NULL, 1, &xHandle2);
     152:	0f 2e       	mov	r0, r31
     154:	f9 e0       	ldi	r31, 0x09	; 9
     156:	ef 2e       	mov	r14, r31
     158:	f7 e0       	ldi	r31, 0x07	; 7
     15a:	ff 2e       	mov	r15, r31
     15c:	f0 2d       	mov	r31, r0
     15e:	01 e0       	ldi	r16, 0x01	; 1
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	44 e6       	ldi	r20, 0x64	; 100
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	88 e6       	ldi	r24, 0x68	; 104
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 02 07 	call	0xe04	; 0xe04 <xTaskCreate>
	
	A = xSemaphoreCreateCounting(3,0);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	0e 94 12 04 	call	0x824	; 0x824 <xQueueCreateCountingSemaphore>
     17c:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <A+0x1>
     180:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <A>
	
	vTaskStartScheduler();
     184:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vTaskStartScheduler>
     188:	ff cf       	rjmp	.-2      	; 0x188 <source_code+0x68>

0000018a <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
     190:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     194:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     198:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
     19c:	89 2b       	or	r24, r25
     19e:	31 f4       	brne	.+12     	; 0x1ac <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     1a0:	8a e6       	ldi	r24, 0x6A	; 106
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
     1a8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     1ac:	20 97       	sbiw	r28, 0x00	; 0
     1ae:	c9 f0       	breq	.+50     	; 0x1e2 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     1b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <xNextFreeByte>
     1b4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <xNextFreeByte+0x1>
     1b8:	9e 01       	movw	r18, r28
     1ba:	28 0f       	add	r18, r24
     1bc:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     1be:	2f 33       	cpi	r18, 0x3F	; 63
     1c0:	46 e0       	ldi	r20, 0x06	; 6
     1c2:	34 07       	cpc	r19, r20
     1c4:	88 f4       	brcc	.+34     	; 0x1e8 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     1c6:	82 17       	cp	r24, r18
     1c8:	93 07       	cpc	r25, r19
     1ca:	88 f4       	brcc	.+34     	; 0x1ee <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     1cc:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <__data_end>
     1d0:	d0 91 67 00 	lds	r29, 0x0067	; 0x800067 <__data_end+0x1>
     1d4:	c8 0f       	add	r28, r24
     1d6:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     1d8:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <xNextFreeByte+0x1>
     1dc:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <xNextFreeByte>
     1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     1e2:	c0 e0       	ldi	r28, 0x00	; 0
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <pvPortMalloc+0x68>
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d0 e0       	ldi	r29, 0x00	; 0
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <pvPortMalloc+0x68>
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     1f2:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     1f6:	ce 01       	movw	r24, r28
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     1fe:	08 95       	ret

00000200 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     200:	fc 01       	movw	r30, r24
     202:	03 96       	adiw	r24, 0x03	; 3
     204:	92 83       	std	Z+2, r25	; 0x02
     206:	81 83       	std	Z+1, r24	; 0x01
     208:	2f ef       	ldi	r18, 0xFF	; 255
     20a:	3f ef       	ldi	r19, 0xFF	; 255
     20c:	34 83       	std	Z+4, r19	; 0x04
     20e:	23 83       	std	Z+3, r18	; 0x03
     210:	96 83       	std	Z+6, r25	; 0x06
     212:	85 83       	std	Z+5, r24	; 0x05
     214:	90 87       	std	Z+8, r25	; 0x08
     216:	87 83       	std	Z+7, r24	; 0x07
     218:	10 82       	st	Z, r1
     21a:	08 95       	ret

0000021c <vListInitialiseItem>:
     21c:	fc 01       	movw	r30, r24
     21e:	11 86       	std	Z+9, r1	; 0x09
     220:	10 86       	std	Z+8, r1	; 0x08
     222:	08 95       	ret

00000224 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     22a:	48 81       	ld	r20, Y
     22c:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     22e:	4f 3f       	cpi	r20, 0xFF	; 255
     230:	2f ef       	ldi	r18, 0xFF	; 255
     232:	52 07       	cpc	r21, r18
     234:	21 f4       	brne	.+8      	; 0x23e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     236:	fc 01       	movw	r30, r24
     238:	a7 81       	ldd	r26, Z+7	; 0x07
     23a:	b0 85       	ldd	r27, Z+8	; 0x08
     23c:	0d c0       	rjmp	.+26     	; 0x258 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     23e:	dc 01       	movw	r26, r24
     240:	13 96       	adiw	r26, 0x03	; 3
     242:	01 c0       	rjmp	.+2      	; 0x246 <vListInsert+0x22>
     244:	df 01       	movw	r26, r30
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	ed 91       	ld	r30, X+
     24a:	fc 91       	ld	r31, X
     24c:	13 97       	sbiw	r26, 0x03	; 3
     24e:	20 81       	ld	r18, Z
     250:	31 81       	ldd	r19, Z+1	; 0x01
     252:	42 17       	cp	r20, r18
     254:	53 07       	cpc	r21, r19
     256:	b0 f7       	brcc	.-20     	; 0x244 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     258:	12 96       	adiw	r26, 0x02	; 2
     25a:	ed 91       	ld	r30, X+
     25c:	fc 91       	ld	r31, X
     25e:	13 97       	sbiw	r26, 0x03	; 3
     260:	fb 83       	std	Y+3, r31	; 0x03
     262:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     264:	d5 83       	std	Z+5, r29	; 0x05
     266:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     268:	bd 83       	std	Y+5, r27	; 0x05
     26a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     26c:	13 96       	adiw	r26, 0x03	; 3
     26e:	dc 93       	st	X, r29
     270:	ce 93       	st	-X, r28
     272:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     274:	99 87       	std	Y+9, r25	; 0x09
     276:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     278:	fc 01       	movw	r30, r24
     27a:	20 81       	ld	r18, Z
     27c:	2f 5f       	subi	r18, 0xFF	; 255
     27e:	20 83       	st	Z, r18
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     290:	c2 81       	ldd	r28, Z+2	; 0x02
     292:	d3 81       	ldd	r29, Z+3	; 0x03
     294:	84 81       	ldd	r24, Z+4	; 0x04
     296:	95 81       	ldd	r25, Z+5	; 0x05
     298:	9d 83       	std	Y+5, r25	; 0x05
     29a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     29c:	c4 81       	ldd	r28, Z+4	; 0x04
     29e:	d5 81       	ldd	r29, Z+5	; 0x05
     2a0:	82 81       	ldd	r24, Z+2	; 0x02
     2a2:	93 81       	ldd	r25, Z+3	; 0x03
     2a4:	9b 83       	std	Y+3, r25	; 0x03
     2a6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     2a8:	11 96       	adiw	r26, 0x01	; 1
     2aa:	8d 91       	ld	r24, X+
     2ac:	9c 91       	ld	r25, X
     2ae:	12 97       	sbiw	r26, 0x02	; 2
     2b0:	e8 17       	cp	r30, r24
     2b2:	f9 07       	cpc	r31, r25
     2b4:	31 f4       	brne	.+12     	; 0x2c2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     2b6:	84 81       	ldd	r24, Z+4	; 0x04
     2b8:	95 81       	ldd	r25, Z+5	; 0x05
     2ba:	12 96       	adiw	r26, 0x02	; 2
     2bc:	9c 93       	st	X, r25
     2be:	8e 93       	st	-X, r24
     2c0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     2c2:	11 86       	std	Z+9, r1	; 0x09
     2c4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     2c6:	8c 91       	ld	r24, X
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     2cc:	8c 91       	ld	r24, X
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     2d4:	1b bc       	out	0x2b, r1	; 43
     2d6:	89 ef       	ldi	r24, 0xF9	; 249
     2d8:	8a bd       	out	0x2a, r24	; 42
     2da:	8b e0       	ldi	r24, 0x0B	; 11
     2dc:	8e bd       	out	0x2e, r24	; 46
     2de:	89 b7       	in	r24, 0x39	; 57
     2e0:	80 61       	ori	r24, 0x10	; 16
     2e2:	89 bf       	out	0x39, r24	; 57
     2e4:	08 95       	ret

000002e6 <pxPortInitialiseStack>:
     2e6:	31 e1       	ldi	r19, 0x11	; 17
     2e8:	fc 01       	movw	r30, r24
     2ea:	30 83       	st	Z, r19
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	22 e2       	ldi	r18, 0x22	; 34
     2f0:	20 83       	st	Z, r18
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	a3 e3       	ldi	r26, 0x33	; 51
     2f6:	a0 83       	st	Z, r26
     2f8:	31 97       	sbiw	r30, 0x01	; 1
     2fa:	60 83       	st	Z, r22
     2fc:	31 97       	sbiw	r30, 0x01	; 1
     2fe:	70 83       	st	Z, r23
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	10 82       	st	Z, r1
     304:	31 97       	sbiw	r30, 0x01	; 1
     306:	60 e8       	ldi	r22, 0x80	; 128
     308:	60 83       	st	Z, r22
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	10 82       	st	Z, r1
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	60 83       	st	Z, r22
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	63 e0       	ldi	r22, 0x03	; 3
     318:	60 83       	st	Z, r22
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	64 e0       	ldi	r22, 0x04	; 4
     31e:	60 83       	st	Z, r22
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	60 83       	st	Z, r22
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	66 e0       	ldi	r22, 0x06	; 6
     32a:	60 83       	st	Z, r22
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	67 e0       	ldi	r22, 0x07	; 7
     330:	60 83       	st	Z, r22
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	68 e0       	ldi	r22, 0x08	; 8
     336:	60 83       	st	Z, r22
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	69 e0       	ldi	r22, 0x09	; 9
     33c:	60 83       	st	Z, r22
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	60 83       	st	Z, r22
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	30 83       	st	Z, r19
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	32 e1       	ldi	r19, 0x12	; 18
     34c:	30 83       	st	Z, r19
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	33 e1       	ldi	r19, 0x13	; 19
     352:	30 83       	st	Z, r19
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	34 e1       	ldi	r19, 0x14	; 20
     358:	30 83       	st	Z, r19
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	35 e1       	ldi	r19, 0x15	; 21
     35e:	30 83       	st	Z, r19
     360:	31 97       	sbiw	r30, 0x01	; 1
     362:	36 e1       	ldi	r19, 0x16	; 22
     364:	30 83       	st	Z, r19
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	37 e1       	ldi	r19, 0x17	; 23
     36a:	30 83       	st	Z, r19
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	38 e1       	ldi	r19, 0x18	; 24
     370:	30 83       	st	Z, r19
     372:	31 97       	sbiw	r30, 0x01	; 1
     374:	39 e1       	ldi	r19, 0x19	; 25
     376:	30 83       	st	Z, r19
     378:	31 97       	sbiw	r30, 0x01	; 1
     37a:	30 e2       	ldi	r19, 0x20	; 32
     37c:	30 83       	st	Z, r19
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	31 e2       	ldi	r19, 0x21	; 33
     382:	30 83       	st	Z, r19
     384:	31 97       	sbiw	r30, 0x01	; 1
     386:	20 83       	st	Z, r18
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	23 e2       	ldi	r18, 0x23	; 35
     38c:	20 83       	st	Z, r18
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	40 83       	st	Z, r20
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	50 83       	st	Z, r21
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	26 e2       	ldi	r18, 0x26	; 38
     39a:	20 83       	st	Z, r18
     39c:	31 97       	sbiw	r30, 0x01	; 1
     39e:	27 e2       	ldi	r18, 0x27	; 39
     3a0:	20 83       	st	Z, r18
     3a2:	31 97       	sbiw	r30, 0x01	; 1
     3a4:	28 e2       	ldi	r18, 0x28	; 40
     3a6:	20 83       	st	Z, r18
     3a8:	31 97       	sbiw	r30, 0x01	; 1
     3aa:	29 e2       	ldi	r18, 0x29	; 41
     3ac:	20 83       	st	Z, r18
     3ae:	31 97       	sbiw	r30, 0x01	; 1
     3b0:	20 e3       	ldi	r18, 0x30	; 48
     3b2:	20 83       	st	Z, r18
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	21 e3       	ldi	r18, 0x31	; 49
     3b8:	20 83       	st	Z, r18
     3ba:	86 97       	sbiw	r24, 0x26	; 38
     3bc:	08 95       	ret

000003be <xPortStartScheduler>:
     3be:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <prvSetupTimerInterrupt>
     3c2:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     3c6:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     3ca:	cd 91       	ld	r28, X+
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	dd 91       	ld	r29, X+
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	3f 90       	pop	r3
     40c:	2f 90       	pop	r2
     40e:	1f 90       	pop	r1
     410:	0f 90       	pop	r0
     412:	0f be       	out	0x3f, r0	; 63
     414:	0f 90       	pop	r0
     416:	08 95       	ret
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	08 95       	ret

0000041c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     41c:	0f 92       	push	r0
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	0f 92       	push	r0
     424:	1f 92       	push	r1
     426:	11 24       	eor	r1, r1
     428:	2f 92       	push	r2
     42a:	3f 92       	push	r3
     42c:	4f 92       	push	r4
     42e:	5f 92       	push	r5
     430:	6f 92       	push	r6
     432:	7f 92       	push	r7
     434:	8f 92       	push	r8
     436:	9f 92       	push	r9
     438:	af 92       	push	r10
     43a:	bf 92       	push	r11
     43c:	cf 92       	push	r12
     43e:	df 92       	push	r13
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	2f 93       	push	r18
     44a:	3f 93       	push	r19
     44c:	4f 93       	push	r20
     44e:	5f 93       	push	r21
     450:	6f 93       	push	r22
     452:	7f 93       	push	r23
     454:	8f 93       	push	r24
     456:	9f 93       	push	r25
     458:	af 93       	push	r26
     45a:	bf 93       	push	r27
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
     464:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     468:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     46c:	0d b6       	in	r0, 0x3d	; 61
     46e:	0d 92       	st	X+, r0
     470:	0e b6       	in	r0, 0x3e	; 62
     472:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     474:	0e 94 92 09 	call	0x1324	; 0x1324 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     478:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     47c:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     480:	cd 91       	ld	r28, X+
     482:	cd bf       	out	0x3d, r28	; 61
     484:	dd 91       	ld	r29, X+
     486:	de bf       	out	0x3e, r29	; 62
     488:	ff 91       	pop	r31
     48a:	ef 91       	pop	r30
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	bf 91       	pop	r27
     492:	af 91       	pop	r26
     494:	9f 91       	pop	r25
     496:	8f 91       	pop	r24
     498:	7f 91       	pop	r23
     49a:	6f 91       	pop	r22
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	3f 91       	pop	r19
     4a2:	2f 91       	pop	r18
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	df 90       	pop	r13
     4ae:	cf 90       	pop	r12
     4b0:	bf 90       	pop	r11
     4b2:	af 90       	pop	r10
     4b4:	9f 90       	pop	r9
     4b6:	8f 90       	pop	r8
     4b8:	7f 90       	pop	r7
     4ba:	6f 90       	pop	r6
     4bc:	5f 90       	pop	r5
     4be:	4f 90       	pop	r4
     4c0:	3f 90       	pop	r3
     4c2:	2f 90       	pop	r2
     4c4:	1f 90       	pop	r1
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0

	asm volatile ( "ret" );
     4cc:	08 95       	ret

000004ce <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	0f 92       	push	r0
     4d6:	1f 92       	push	r1
     4d8:	11 24       	eor	r1, r1
     4da:	2f 92       	push	r2
     4dc:	3f 92       	push	r3
     4de:	4f 92       	push	r4
     4e0:	5f 92       	push	r5
     4e2:	6f 92       	push	r6
     4e4:	7f 92       	push	r7
     4e6:	8f 92       	push	r8
     4e8:	9f 92       	push	r9
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	2f 93       	push	r18
     4fc:	3f 93       	push	r19
     4fe:	4f 93       	push	r20
     500:	5f 93       	push	r21
     502:	6f 93       	push	r22
     504:	7f 93       	push	r23
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	af 93       	push	r26
     50c:	bf 93       	push	r27
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
     516:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     51a:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     51e:	0d b6       	in	r0, 0x3d	; 61
     520:	0d 92       	st	X+, r0
     522:	0e b6       	in	r0, 0x3e	; 62
     524:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     526:	0e 94 8d 07 	call	0xf1a	; 0xf1a <xTaskIncrementTick>
     52a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     52c:	0e 94 92 09 	call	0x1324	; 0x1324 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     530:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     534:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     538:	cd 91       	ld	r28, X+
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	dd 91       	ld	r29, X+
     53e:	de bf       	out	0x3e, r29	; 62
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	7f 91       	pop	r23
     552:	6f 91       	pop	r22
     554:	5f 91       	pop	r21
     556:	4f 91       	pop	r20
     558:	3f 91       	pop	r19
     55a:	2f 91       	pop	r18
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	df 90       	pop	r13
     566:	cf 90       	pop	r12
     568:	bf 90       	pop	r11
     56a:	af 90       	pop	r10
     56c:	9f 90       	pop	r9
     56e:	8f 90       	pop	r8
     570:	7f 90       	pop	r7
     572:	6f 90       	pop	r6
     574:	5f 90       	pop	r5
     576:	4f 90       	pop	r4
     578:	3f 90       	pop	r3
     57a:	2f 90       	pop	r2
     57c:	1f 90       	pop	r1
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0

	asm volatile ( "ret" );
     584:	08 95       	ret

00000586 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     586:	0e 94 67 02 	call	0x4ce	; 0x4ce <vPortYieldFromTick>
		asm volatile ( "reti" );
     58a:	18 95       	reti

0000058c <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	0f 92       	push	r0
     592:	fc 01       	movw	r30, r24
     594:	82 8d       	ldd	r24, Z+26	; 0x1a
     596:	81 11       	cpse	r24, r1
     598:	02 c0       	rjmp	.+4      	; 0x59e <prvIsQueueEmpty+0x12>
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <prvIsQueueEmpty+0x14>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0f 90       	pop	r0
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	08 95       	ret

000005a6 <prvIsQueueFull>:
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	0f 92       	push	r0
     5ac:	fc 01       	movw	r30, r24
     5ae:	22 8d       	ldd	r18, Z+26	; 0x1a
     5b0:	83 8d       	ldd	r24, Z+27	; 0x1b
     5b2:	28 13       	cpse	r18, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <prvIsQueueFull+0x14>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <prvIsQueueFull+0x16>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	08 95       	ret

000005c2 <prvCopyDataToQueue>:
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ec 01       	movw	r28, r24
     5cc:	04 2f       	mov	r16, r20
     5ce:	1a 8d       	ldd	r17, Y+26	; 0x1a
     5d0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     5d2:	44 23       	and	r20, r20
     5d4:	b9 f1       	breq	.+110    	; 0x644 <prvCopyDataToQueue+0x82>
     5d6:	01 11       	cpse	r16, r1
     5d8:	16 c0       	rjmp	.+44     	; 0x606 <prvCopyDataToQueue+0x44>
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	9b 81       	ldd	r25, Y+3	; 0x03
     5e0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <memcpy>
     5e4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ea:	82 0f       	add	r24, r18
     5ec:	91 1d       	adc	r25, r1
     5ee:	9b 83       	std	Y+3, r25	; 0x03
     5f0:	8a 83       	std	Y+2, r24	; 0x02
     5f2:	2c 81       	ldd	r18, Y+4	; 0x04
     5f4:	3d 81       	ldd	r19, Y+5	; 0x05
     5f6:	82 17       	cp	r24, r18
     5f8:	93 07       	cpc	r25, r19
     5fa:	20 f1       	brcs	.+72     	; 0x644 <prvCopyDataToQueue+0x82>
     5fc:	88 81       	ld	r24, Y
     5fe:	99 81       	ldd	r25, Y+1	; 0x01
     600:	9b 83       	std	Y+3, r25	; 0x03
     602:	8a 83       	std	Y+2, r24	; 0x02
     604:	1f c0       	rjmp	.+62     	; 0x644 <prvCopyDataToQueue+0x82>
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	8e 81       	ldd	r24, Y+6	; 0x06
     60a:	9f 81       	ldd	r25, Y+7	; 0x07
     60c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <memcpy>
     610:	8c 8d       	ldd	r24, Y+28	; 0x1c
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	91 95       	neg	r25
     616:	81 95       	neg	r24
     618:	91 09       	sbc	r25, r1
     61a:	2e 81       	ldd	r18, Y+6	; 0x06
     61c:	3f 81       	ldd	r19, Y+7	; 0x07
     61e:	28 0f       	add	r18, r24
     620:	39 1f       	adc	r19, r25
     622:	3f 83       	std	Y+7, r19	; 0x07
     624:	2e 83       	std	Y+6, r18	; 0x06
     626:	48 81       	ld	r20, Y
     628:	59 81       	ldd	r21, Y+1	; 0x01
     62a:	24 17       	cp	r18, r20
     62c:	35 07       	cpc	r19, r21
     62e:	30 f4       	brcc	.+12     	; 0x63c <prvCopyDataToQueue+0x7a>
     630:	2c 81       	ldd	r18, Y+4	; 0x04
     632:	3d 81       	ldd	r19, Y+5	; 0x05
     634:	82 0f       	add	r24, r18
     636:	93 1f       	adc	r25, r19
     638:	9f 83       	std	Y+7, r25	; 0x07
     63a:	8e 83       	std	Y+6, r24	; 0x06
     63c:	02 30       	cpi	r16, 0x02	; 2
     63e:	11 f4       	brne	.+4      	; 0x644 <prvCopyDataToQueue+0x82>
     640:	11 11       	cpse	r17, r1
     642:	11 50       	subi	r17, 0x01	; 1
     644:	1f 5f       	subi	r17, 0xFF	; 255
     646:	1a 8f       	std	Y+26, r17	; 0x1a
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret

00000654 <prvUnlockQueue>:
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	0f 92       	push	r0
     662:	1e 8d       	ldd	r17, Y+30	; 0x1e
     664:	0b c0       	rjmp	.+22     	; 0x67c <prvUnlockQueue+0x28>
     666:	89 89       	ldd	r24, Y+17	; 0x11
     668:	88 23       	and	r24, r24
     66a:	51 f0       	breq	.+20     	; 0x680 <prvUnlockQueue+0x2c>
     66c:	ce 01       	movw	r24, r28
     66e:	41 96       	adiw	r24, 0x11	; 17
     670:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xTaskRemoveFromEventList>
     674:	81 11       	cpse	r24, r1
     676:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vTaskMissedYield>
     67a:	11 50       	subi	r17, 0x01	; 1
     67c:	11 16       	cp	r1, r17
     67e:	9c f3       	brlt	.-26     	; 0x666 <prvUnlockQueue+0x12>
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	8e 8f       	std	Y+30, r24	; 0x1e
     684:	0f 90       	pop	r0
     686:	0f be       	out	0x3f, r0	; 63
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	0f 92       	push	r0
     68e:	1d 8d       	ldd	r17, Y+29	; 0x1d
     690:	0b c0       	rjmp	.+22     	; 0x6a8 <prvUnlockQueue+0x54>
     692:	88 85       	ldd	r24, Y+8	; 0x08
     694:	88 23       	and	r24, r24
     696:	51 f0       	breq	.+20     	; 0x6ac <prvUnlockQueue+0x58>
     698:	ce 01       	movw	r24, r28
     69a:	08 96       	adiw	r24, 0x08	; 8
     69c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xTaskRemoveFromEventList>
     6a0:	81 11       	cpse	r24, r1
     6a2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vTaskMissedYield>
     6a6:	11 50       	subi	r17, 0x01	; 1
     6a8:	11 16       	cp	r1, r17
     6aa:	9c f3       	brlt	.-26     	; 0x692 <prvUnlockQueue+0x3e>
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	8d 8f       	std	Y+29, r24	; 0x1d
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <xQueueGenericReset>:
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	fc 01       	movw	r30, r24
     6c6:	36 2f       	mov	r19, r22
     6c8:	89 2b       	or	r24, r25
     6ca:	09 f4       	brne	.+2      	; 0x6ce <xQueueGenericReset+0x12>
     6cc:	4d c0       	rjmp	.+154    	; 0x768 <xQueueGenericReset+0xac>
     6ce:	23 8d       	ldd	r18, Z+27	; 0x1b
     6d0:	22 23       	and	r18, r18
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <xQueueGenericReset+0x1a>
     6d4:	4b c0       	rjmp	.+150    	; 0x76c <xQueueGenericReset+0xb0>
     6d6:	02 2f       	mov	r16, r18
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	b8 01       	movw	r22, r16
     6e0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__udivmodhi4>
     6e4:	44 8d       	ldd	r20, Z+28	; 0x1c
     6e6:	84 2f       	mov	r24, r20
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	68 17       	cp	r22, r24
     6ec:	79 07       	cpc	r23, r25
     6ee:	08 f4       	brcc	.+2      	; 0x6f2 <xQueueGenericReset+0x36>
     6f0:	3f c0       	rjmp	.+126    	; 0x770 <xQueueGenericReset+0xb4>
     6f2:	ef 01       	movw	r28, r30
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	0f 92       	push	r0
     6fa:	60 81       	ld	r22, Z
     6fc:	71 81       	ldd	r23, Z+1	; 0x01
     6fe:	fb 01       	movw	r30, r22
     700:	24 9f       	mul	r18, r20
     702:	e0 0d       	add	r30, r0
     704:	f1 1d       	adc	r31, r1
     706:	11 24       	eor	r1, r1
     708:	fd 83       	std	Y+5, r31	; 0x05
     70a:	ec 83       	std	Y+4, r30	; 0x04
     70c:	1a 8e       	std	Y+26, r1	; 0x1a
     70e:	7b 83       	std	Y+3, r23	; 0x03
     710:	6a 83       	std	Y+2, r22	; 0x02
     712:	01 50       	subi	r16, 0x01	; 1
     714:	11 09       	sbc	r17, r1
     716:	80 9f       	mul	r24, r16
     718:	a0 01       	movw	r20, r0
     71a:	81 9f       	mul	r24, r17
     71c:	50 0d       	add	r21, r0
     71e:	90 9f       	mul	r25, r16
     720:	50 0d       	add	r21, r0
     722:	11 24       	eor	r1, r1
     724:	cb 01       	movw	r24, r22
     726:	84 0f       	add	r24, r20
     728:	95 1f       	adc	r25, r21
     72a:	9f 83       	std	Y+7, r25	; 0x07
     72c:	8e 83       	std	Y+6, r24	; 0x06
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	8d 8f       	std	Y+29, r24	; 0x1d
     732:	8e 8f       	std	Y+30, r24	; 0x1e
     734:	31 11       	cpse	r19, r1
     736:	0c c0       	rjmp	.+24     	; 0x750 <xQueueGenericReset+0x94>
     738:	88 85       	ldd	r24, Y+8	; 0x08
     73a:	88 23       	and	r24, r24
     73c:	89 f0       	breq	.+34     	; 0x760 <xQueueGenericReset+0xa4>
     73e:	ce 01       	movw	r24, r28
     740:	08 96       	adiw	r24, 0x08	; 8
     742:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xTaskRemoveFromEventList>
     746:	88 23       	and	r24, r24
     748:	59 f0       	breq	.+22     	; 0x760 <xQueueGenericReset+0xa4>
     74a:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     74e:	08 c0       	rjmp	.+16     	; 0x760 <xQueueGenericReset+0xa4>
     750:	ce 01       	movw	r24, r28
     752:	08 96       	adiw	r24, 0x08	; 8
     754:	0e 94 00 01 	call	0x200	; 0x200 <vListInitialise>
     758:	ce 01       	movw	r24, r28
     75a:	41 96       	adiw	r24, 0x11	; 17
     75c:	0e 94 00 01 	call	0x200	; 0x200 <vListInitialise>
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	05 c0       	rjmp	.+10     	; 0x772 <xQueueGenericReset+0xb6>
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	03 c0       	rjmp	.+6      	; 0x772 <xQueueGenericReset+0xb6>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	01 c0       	rjmp	.+2      	; 0x772 <xQueueGenericReset+0xb6>
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <prvInitialiseNewQueue>:
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	f8 01       	movw	r30, r16
     782:	61 11       	cpse	r22, r1
     784:	03 c0       	rjmp	.+6      	; 0x78c <prvInitialiseNewQueue+0x10>
     786:	11 83       	std	Z+1, r17	; 0x01
     788:	00 83       	st	Z, r16
     78a:	02 c0       	rjmp	.+4      	; 0x790 <prvInitialiseNewQueue+0x14>
     78c:	51 83       	std	Z+1, r21	; 0x01
     78e:	40 83       	st	Z, r20
     790:	83 8f       	std	Z+27, r24	; 0x1b
     792:	64 8f       	std	Z+28, r22	; 0x1c
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	cf 01       	movw	r24, r30
     798:	0e 94 5e 03 	call	0x6bc	; 0x6bc <xQueueGenericReset>
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <xQueueGenericCreate>:
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	38 2f       	mov	r19, r24
     7b2:	e6 2f       	mov	r30, r22
     7b4:	88 23       	and	r24, r24
     7b6:	29 f1       	breq	.+74     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7b8:	68 2f       	mov	r22, r24
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	9f ef       	ldi	r25, 0xFF	; 255
     7c0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__udivmodhi4>
     7c4:	8e 2f       	mov	r24, r30
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	68 17       	cp	r22, r24
     7ca:	79 07       	cpc	r23, r25
     7cc:	e8 f0       	brcs	.+58     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7ce:	3e 9f       	mul	r19, r30
     7d0:	c0 01       	movw	r24, r0
     7d2:	11 24       	eor	r1, r1
     7d4:	81 3e       	cpi	r24, 0xE1	; 225
     7d6:	2f ef       	ldi	r18, 0xFF	; 255
     7d8:	92 07       	cpc	r25, r18
     7da:	c8 f4       	brcc	.+50     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7dc:	d4 2e       	mov	r13, r20
     7de:	de 2f       	mov	r29, r30
     7e0:	c3 2f       	mov	r28, r19
     7e2:	4f 96       	adiw	r24, 0x1f	; 31
     7e4:	0e 94 c5 00 	call	0x18a	; 0x18a <pvPortMalloc>
     7e8:	7c 01       	movw	r14, r24
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	91 f0       	breq	.+36     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7ee:	8c 01       	movw	r16, r24
     7f0:	2d 2d       	mov	r18, r13
     7f2:	ac 01       	movw	r20, r24
     7f4:	41 5e       	subi	r20, 0xE1	; 225
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	6d 2f       	mov	r22, r29
     7fa:	8c 2f       	mov	r24, r28
     7fc:	0e 94 be 03 	call	0x77c	; 0x77c <prvInitialiseNewQueue>
     800:	08 c0       	rjmp	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     802:	e1 2c       	mov	r14, r1
     804:	f1 2c       	mov	r15, r1
     806:	05 c0       	rjmp	.+10     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     808:	e1 2c       	mov	r14, r1
     80a:	f1 2c       	mov	r15, r1
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	e1 2c       	mov	r14, r1
     810:	f1 2c       	mov	r15, r1
     812:	c7 01       	movw	r24, r14
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	08 95       	ret

00000824 <xQueueCreateCountingSemaphore>:
     824:	cf 93       	push	r28
     826:	88 23       	and	r24, r24
     828:	61 f0       	breq	.+24     	; 0x842 <xQueueCreateCountingSemaphore+0x1e>
     82a:	86 17       	cp	r24, r22
     82c:	68 f0       	brcs	.+26     	; 0x848 <xQueueCreateCountingSemaphore+0x24>
     82e:	c6 2f       	mov	r28, r22
     830:	42 e0       	ldi	r20, 0x02	; 2
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <xQueueGenericCreate>
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	41 f0       	breq	.+16     	; 0x84c <xQueueCreateCountingSemaphore+0x28>
     83c:	fc 01       	movw	r30, r24
     83e:	c2 8f       	std	Z+26, r28	; 0x1a
     840:	05 c0       	rjmp	.+10     	; 0x84c <xQueueCreateCountingSemaphore+0x28>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <xQueueCreateCountingSemaphore+0x28>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <xQueueGenericSend>:
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 d0       	rcall	.+0      	; 0x862 <__stack+0x3>
     862:	00 d0       	rcall	.+0      	; 0x864 <__stack+0x5>
     864:	1f 92       	push	r1
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	8c 01       	movw	r16, r24
     86c:	7b 01       	movw	r14, r22
     86e:	5d 83       	std	Y+5, r21	; 0x05
     870:	4c 83       	std	Y+4, r20	; 0x04
     872:	c2 2e       	mov	r12, r18
     874:	d1 2c       	mov	r13, r1
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	0f 92       	push	r0
     87c:	f8 01       	movw	r30, r16
     87e:	92 8d       	ldd	r25, Z+26	; 0x1a
     880:	83 8d       	ldd	r24, Z+27	; 0x1b
     882:	98 17       	cp	r25, r24
     884:	18 f0       	brcs	.+6      	; 0x88c <__stack+0x2d>
     886:	f2 e0       	ldi	r31, 0x02	; 2
     888:	cf 12       	cpse	r12, r31
     88a:	19 c0       	rjmp	.+50     	; 0x8be <__stack+0x5f>
     88c:	4c 2d       	mov	r20, r12
     88e:	b7 01       	movw	r22, r14
     890:	c8 01       	movw	r24, r16
     892:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <prvCopyDataToQueue>
     896:	f8 01       	movw	r30, r16
     898:	91 89       	ldd	r25, Z+17	; 0x11
     89a:	99 23       	and	r25, r25
     89c:	49 f0       	breq	.+18     	; 0x8b0 <__stack+0x51>
     89e:	c8 01       	movw	r24, r16
     8a0:	41 96       	adiw	r24, 0x11	; 17
     8a2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xTaskRemoveFromEventList>
     8a6:	88 23       	and	r24, r24
     8a8:	31 f0       	breq	.+12     	; 0x8b6 <__stack+0x57>
     8aa:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <__stack+0x57>
     8b0:	81 11       	cpse	r24, r1
     8b2:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	4d c0       	rjmp	.+154    	; 0x958 <__stack+0xf9>
     8be:	8c 81       	ldd	r24, Y+4	; 0x04
     8c0:	9d 81       	ldd	r25, Y+5	; 0x05
     8c2:	89 2b       	or	r24, r25
     8c4:	21 f4       	brne	.+8      	; 0x8ce <__stack+0x6f>
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	45 c0       	rjmp	.+138    	; 0x958 <__stack+0xf9>
     8ce:	d1 10       	cpse	r13, r1
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <__stack+0x7f>
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskInternalSetTimeOutState>
     8da:	dd 24       	eor	r13, r13
     8dc:	d3 94       	inc	r13
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskSuspendAll>
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	0f 92       	push	r0
     8ec:	f8 01       	movw	r30, r16
     8ee:	85 8d       	ldd	r24, Z+29	; 0x1d
     8f0:	8f 3f       	cpi	r24, 0xFF	; 255
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <__stack+0x97>
     8f4:	15 8e       	std	Z+29, r1	; 0x1d
     8f6:	f8 01       	movw	r30, r16
     8f8:	86 8d       	ldd	r24, Z+30	; 0x1e
     8fa:	8f 3f       	cpi	r24, 0xFF	; 255
     8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0xa1>
     8fe:	16 8e       	std	Z+30, r1	; 0x1e
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	be 01       	movw	r22, r28
     906:	6c 5f       	subi	r22, 0xFC	; 252
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <xTaskCheckForTimeOut>
     912:	81 11       	cpse	r24, r1
     914:	1b c0       	rjmp	.+54     	; 0x94c <__stack+0xed>
     916:	c8 01       	movw	r24, r16
     918:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <prvIsQueueFull>
     91c:	88 23       	and	r24, r24
     91e:	81 f0       	breq	.+32     	; 0x940 <__stack+0xe1>
     920:	6c 81       	ldd	r22, Y+4	; 0x04
     922:	7d 81       	ldd	r23, Y+5	; 0x05
     924:	c8 01       	movw	r24, r16
     926:	08 96       	adiw	r24, 0x08	; 8
     928:	0e 94 e6 09 	call	0x13cc	; 0x13cc <vTaskPlaceOnEventList>
     92c:	c8 01       	movw	r24, r16
     92e:	0e 94 2a 03 	call	0x654	; 0x654 <prvUnlockQueue>
     932:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
     936:	81 11       	cpse	r24, r1
     938:	9e cf       	rjmp	.-196    	; 0x876 <__stack+0x17>
     93a:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     93e:	9b cf       	rjmp	.-202    	; 0x876 <__stack+0x17>
     940:	c8 01       	movw	r24, r16
     942:	0e 94 2a 03 	call	0x654	; 0x654 <prvUnlockQueue>
     946:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
     94a:	95 cf       	rjmp	.-214    	; 0x876 <__stack+0x17>
     94c:	c8 01       	movw	r24, r16
     94e:	0e 94 2a 03 	call	0x654	; 0x654 <prvUnlockQueue>
     952:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	08 95       	ret

00000974 <xQueueSemaphoreTake>:
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <xQueueSemaphoreTake+0xc>
     980:	00 d0       	rcall	.+0      	; 0x982 <xQueueSemaphoreTake+0xe>
     982:	1f 92       	push	r1
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	8c 01       	movw	r16, r24
     98a:	7d 83       	std	Y+5, r23	; 0x05
     98c:	6c 83       	std	Y+4, r22	; 0x04
     98e:	f1 2c       	mov	r15, r1
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	0f 92       	push	r0
     996:	f8 01       	movw	r30, r16
     998:	82 8d       	ldd	r24, Z+26	; 0x1a
     99a:	88 23       	and	r24, r24
     99c:	81 f0       	breq	.+32     	; 0x9be <xQueueSemaphoreTake+0x4a>
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	82 8f       	std	Z+26, r24	; 0x1a
     9a2:	80 85       	ldd	r24, Z+8	; 0x08
     9a4:	88 23       	and	r24, r24
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <xQueueSemaphoreTake+0x42>
     9a8:	c8 01       	movw	r24, r16
     9aa:	08 96       	adiw	r24, 0x08	; 8
     9ac:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xTaskRemoveFromEventList>
     9b0:	81 11       	cpse	r24, r1
     9b2:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	53 c0       	rjmp	.+166    	; 0xa64 <xQueueSemaphoreTake+0xf0>
     9be:	8c 81       	ldd	r24, Y+4	; 0x04
     9c0:	9d 81       	ldd	r25, Y+5	; 0x05
     9c2:	89 2b       	or	r24, r25
     9c4:	21 f4       	brne	.+8      	; 0x9ce <xQueueSemaphoreTake+0x5a>
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	4b c0       	rjmp	.+150    	; 0xa64 <xQueueSemaphoreTake+0xf0>
     9ce:	f1 10       	cpse	r15, r1
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <xQueueSemaphoreTake+0x6a>
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskInternalSetTimeOutState>
     9da:	ff 24       	eor	r15, r15
     9dc:	f3 94       	inc	r15
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskSuspendAll>
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	0f 92       	push	r0
     9ec:	f8 01       	movw	r30, r16
     9ee:	85 8d       	ldd	r24, Z+29	; 0x1d
     9f0:	8f 3f       	cpi	r24, 0xFF	; 255
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <xQueueSemaphoreTake+0x82>
     9f4:	15 8e       	std	Z+29, r1	; 0x1d
     9f6:	f8 01       	movw	r30, r16
     9f8:	86 8d       	ldd	r24, Z+30	; 0x1e
     9fa:	8f 3f       	cpi	r24, 0xFF	; 255
     9fc:	09 f4       	brne	.+2      	; 0xa00 <xQueueSemaphoreTake+0x8c>
     9fe:	16 8e       	std	Z+30, r1	; 0x1e
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	be 01       	movw	r22, r28
     a06:	6c 5f       	subi	r22, 0xFC	; 252
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	ce 01       	movw	r24, r28
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <xTaskCheckForTimeOut>
     a12:	81 11       	cpse	r24, r1
     a14:	1b c0       	rjmp	.+54     	; 0xa4c <xQueueSemaphoreTake+0xd8>
     a16:	c8 01       	movw	r24, r16
     a18:	0e 94 c6 02 	call	0x58c	; 0x58c <prvIsQueueEmpty>
     a1c:	88 23       	and	r24, r24
     a1e:	81 f0       	breq	.+32     	; 0xa40 <xQueueSemaphoreTake+0xcc>
     a20:	6c 81       	ldd	r22, Y+4	; 0x04
     a22:	7d 81       	ldd	r23, Y+5	; 0x05
     a24:	c8 01       	movw	r24, r16
     a26:	41 96       	adiw	r24, 0x11	; 17
     a28:	0e 94 e6 09 	call	0x13cc	; 0x13cc <vTaskPlaceOnEventList>
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 2a 03 	call	0x654	; 0x654 <prvUnlockQueue>
     a32:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
     a36:	81 11       	cpse	r24, r1
     a38:	ab cf       	rjmp	.-170    	; 0x990 <xQueueSemaphoreTake+0x1c>
     a3a:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     a3e:	a8 cf       	rjmp	.-176    	; 0x990 <xQueueSemaphoreTake+0x1c>
     a40:	c8 01       	movw	r24, r16
     a42:	0e 94 2a 03 	call	0x654	; 0x654 <prvUnlockQueue>
     a46:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
     a4a:	a2 cf       	rjmp	.-188    	; 0x990 <xQueueSemaphoreTake+0x1c>
     a4c:	c8 01       	movw	r24, r16
     a4e:	0e 94 2a 03 	call	0x654	; 0x654 <prvUnlockQueue>
     a52:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
     a56:	c8 01       	movw	r24, r16
     a58:	0e 94 c6 02 	call	0x58c	; 0x58c <prvIsQueueEmpty>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f4       	brne	.+2      	; 0xa62 <xQueueSemaphoreTake+0xee>
     a60:	97 cf       	rjmp	.-210    	; 0x990 <xQueueSemaphoreTake+0x1c>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	08 95       	ret

00000a7a <uxQueueMessagesWaiting>:
{
    UBaseType_t uxReturn;

    configASSERT( xQueue );

    taskENTER_CRITICAL();
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	0f 92       	push	r0
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
     a80:	fc 01       	movw	r30, r24
     a82:	82 8d       	ldd	r24, Z+26	; 0x1a
    }
    taskEXIT_CRITICAL();
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63

    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
     a88:	08 95       	ret

00000a8a <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     a8a:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     a8e:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     a92:	80 81       	ld	r24, Z
     a94:	81 11       	cpse	r24, r1
     a96:	07 c0       	rjmp	.+14     	; 0xaa6 <prvResetNextTaskUnblockTime+0x1c>
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
     aa0:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
     aa4:	08 95       	ret
     aa6:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     aaa:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     aae:	05 80       	ldd	r0, Z+5	; 0x05
     ab0:	f6 81       	ldd	r31, Z+6	; 0x06
     ab2:	e0 2d       	mov	r30, r0
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
     abc:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
     ac0:	08 95       	ret

00000ac2 <prvInitialiseNewTask>:
     ac2:	6f 92       	push	r6
     ac4:	7f 92       	push	r7
     ac6:	8f 92       	push	r8
     ac8:	9f 92       	push	r9
     aca:	af 92       	push	r10
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	4c 01       	movw	r8, r24
     ae2:	f5 01       	movw	r30, r10
     ae4:	87 89       	ldd	r24, Z+23	; 0x17
     ae6:	90 8d       	ldd	r25, Z+24	; 0x18
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	31 09       	sbc	r19, r1
     aec:	3c 01       	movw	r6, r24
     aee:	62 0e       	add	r6, r18
     af0:	73 1e       	adc	r7, r19
     af2:	61 15       	cp	r22, r1
     af4:	71 05       	cpc	r23, r1
     af6:	89 f4       	brne	.+34     	; 0xb1a <prvInitialiseNewTask+0x58>
     af8:	15 c0       	rjmp	.+42     	; 0xb24 <prvInitialiseNewTask+0x62>
     afa:	82 2f       	mov	r24, r18
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	fb 01       	movw	r30, r22
     b00:	e8 0f       	add	r30, r24
     b02:	f9 1f       	adc	r31, r25
     b04:	30 81       	ld	r19, Z
     b06:	d5 01       	movw	r26, r10
     b08:	a8 0f       	add	r26, r24
     b0a:	b9 1f       	adc	r27, r25
     b0c:	59 96       	adiw	r26, 0x19	; 25
     b0e:	3c 93       	st	X, r19
     b10:	80 81       	ld	r24, Z
     b12:	88 23       	and	r24, r24
     b14:	29 f0       	breq	.+10     	; 0xb20 <prvInitialiseNewTask+0x5e>
     b16:	2f 5f       	subi	r18, 0xFF	; 255
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <prvInitialiseNewTask+0x5a>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	28 30       	cpi	r18, 0x08	; 8
     b1e:	68 f3       	brcs	.-38     	; 0xafa <prvInitialiseNewTask+0x38>
     b20:	f5 01       	movw	r30, r10
     b22:	10 a2       	std	Z+32, r1	; 0x20
     b24:	f3 e0       	ldi	r31, 0x03	; 3
     b26:	fe 15       	cp	r31, r14
     b28:	20 f4       	brcc	.+8      	; 0xb32 <prvInitialiseNewTask+0x70>
     b2a:	0f 2e       	mov	r0, r31
     b2c:	f3 e0       	ldi	r31, 0x03	; 3
     b2e:	ef 2e       	mov	r14, r31
     b30:	f0 2d       	mov	r31, r0
     b32:	f5 01       	movw	r30, r10
     b34:	e6 8a       	std	Z+22, r14	; 0x16
     b36:	c5 01       	movw	r24, r10
     b38:	02 96       	adiw	r24, 0x02	; 2
     b3a:	0e 94 0e 01 	call	0x21c	; 0x21c <vListInitialiseItem>
     b3e:	c5 01       	movw	r24, r10
     b40:	0c 96       	adiw	r24, 0x0c	; 12
     b42:	0e 94 0e 01 	call	0x21c	; 0x21c <vListInitialiseItem>
     b46:	f5 01       	movw	r30, r10
     b48:	b1 86       	std	Z+9, r11	; 0x09
     b4a:	a0 86       	std	Z+8, r10	; 0x08
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	8e 19       	sub	r24, r14
     b52:	91 09       	sbc	r25, r1
     b54:	95 87       	std	Z+13, r25	; 0x0d
     b56:	84 87       	std	Z+12, r24	; 0x0c
     b58:	b3 8a       	std	Z+19, r11	; 0x13
     b5a:	a2 8a       	std	Z+18, r10	; 0x12
     b5c:	a8 01       	movw	r20, r16
     b5e:	b4 01       	movw	r22, r8
     b60:	c3 01       	movw	r24, r6
     b62:	0e 94 73 01 	call	0x2e6	; 0x2e6 <pxPortInitialiseStack>
     b66:	f5 01       	movw	r30, r10
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
     b6c:	c1 14       	cp	r12, r1
     b6e:	d1 04       	cpc	r13, r1
     b70:	19 f0       	breq	.+6      	; 0xb78 <prvInitialiseNewTask+0xb6>
     b72:	f6 01       	movw	r30, r12
     b74:	b1 82       	std	Z+1, r11	; 0x01
     b76:	a0 82       	st	Z, r10
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	7f 90       	pop	r7
     b90:	6f 90       	pop	r6
     b92:	08 95       	ret

00000b94 <prvIdleTask>:
     b94:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxReadyTasksLists>
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	e0 f3       	brcs	.-8      	; 0xb94 <prvIdleTask>
     b9c:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     ba0:	f9 cf       	rjmp	.-14     	; 0xb94 <prvIdleTask>

00000ba2 <prvInitialiseTaskLists>:
     ba2:	cf 93       	push	r28
     ba4:	c0 e0       	ldi	r28, 0x00	; 0
     ba6:	10 c0       	rjmp	.+32     	; 0xbc8 <prvInitialiseTaskLists+0x26>
     ba8:	8c 2f       	mov	r24, r28
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	9c 01       	movw	r18, r24
     bae:	22 0f       	add	r18, r18
     bb0:	33 1f       	adc	r19, r19
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	22 0f       	add	r18, r18
     bb8:	33 1f       	adc	r19, r19
     bba:	82 0f       	add	r24, r18
     bbc:	93 1f       	adc	r25, r19
     bbe:	8f 51       	subi	r24, 0x1F	; 31
     bc0:	99 4f       	sbci	r25, 0xF9	; 249
     bc2:	0e 94 00 01 	call	0x200	; 0x200 <vListInitialise>
     bc6:	cf 5f       	subi	r28, 0xFF	; 255
     bc8:	c4 30       	cpi	r28, 0x04	; 4
     bca:	70 f3       	brcs	.-36     	; 0xba8 <prvInitialiseTaskLists+0x6>
     bcc:	88 ed       	ldi	r24, 0xD8	; 216
     bce:	96 e0       	ldi	r25, 0x06	; 6
     bd0:	0e 94 00 01 	call	0x200	; 0x200 <vListInitialise>
     bd4:	8f ec       	ldi	r24, 0xCF	; 207
     bd6:	96 e0       	ldi	r25, 0x06	; 6
     bd8:	0e 94 00 01 	call	0x200	; 0x200 <vListInitialise>
     bdc:	82 ec       	ldi	r24, 0xC2	; 194
     bde:	96 e0       	ldi	r25, 0x06	; 6
     be0:	0e 94 00 01 	call	0x200	; 0x200 <vListInitialise>
     be4:	89 eb       	ldi	r24, 0xB9	; 185
     be6:	96 e0       	ldi	r25, 0x06	; 6
     be8:	0e 94 00 01 	call	0x200	; 0x200 <vListInitialise>
     bec:	88 ed       	ldi	r24, 0xD8	; 216
     bee:	96 e0       	ldi	r25, 0x06	; 6
     bf0:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <pxDelayedTaskList+0x1>
     bf4:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <pxDelayedTaskList>
     bf8:	8f ec       	ldi	r24, 0xCF	; 207
     bfa:	96 e0       	ldi	r25, 0x06	; 6
     bfc:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
     c00:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <pxOverflowDelayedTaskList>
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <prvAddNewTaskToReadyList>:
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	ec 01       	movw	r28, r24
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	0f 92       	push	r0
     c14:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <uxCurrentNumberOfTasks>
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <uxCurrentNumberOfTasks>
     c1e:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxCurrentTCB>
     c22:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     c26:	89 2b       	or	r24, r25
     c28:	59 f4       	brne	.+22     	; 0xc40 <prvAddNewTaskToReadyList+0x38>
     c2a:	d0 93 06 07 	sts	0x0706, r29	; 0x800706 <pxCurrentTCB+0x1>
     c2e:	c0 93 05 07 	sts	0x0705, r28	; 0x800705 <pxCurrentTCB>
     c32:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <uxCurrentNumberOfTasks>
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	99 f4       	brne	.+38     	; 0xc60 <prvAddNewTaskToReadyList+0x58>
     c3a:	0e 94 d1 05 	call	0xba2	; 0xba2 <prvInitialiseTaskLists>
     c3e:	10 c0       	rjmp	.+32     	; 0xc60 <prvAddNewTaskToReadyList+0x58>
     c40:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <xSchedulerRunning>
     c44:	81 11       	cpse	r24, r1
     c46:	0c c0       	rjmp	.+24     	; 0xc60 <prvAddNewTaskToReadyList+0x58>
     c48:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
     c4c:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     c50:	96 89       	ldd	r25, Z+22	; 0x16
     c52:	8e 89       	ldd	r24, Y+22	; 0x16
     c54:	89 17       	cp	r24, r25
     c56:	20 f0       	brcs	.+8      	; 0xc60 <prvAddNewTaskToReadyList+0x58>
     c58:	d0 93 06 07 	sts	0x0706, r29	; 0x800706 <pxCurrentTCB+0x1>
     c5c:	c0 93 05 07 	sts	0x0705, r28	; 0x800705 <pxCurrentTCB>
     c60:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxTaskNumber>
     c64:	8f 5f       	subi	r24, 0xFF	; 255
     c66:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <uxTaskNumber>
     c6a:	8e 89       	ldd	r24, Y+22	; 0x16
     c6c:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
     c70:	98 17       	cp	r25, r24
     c72:	10 f4       	brcc	.+4      	; 0xc78 <prvAddNewTaskToReadyList+0x70>
     c74:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxTopReadyPriority>
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	fc 01       	movw	r30, r24
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	8e 0f       	add	r24, r30
     c8a:	9f 1f       	adc	r25, r31
     c8c:	fc 01       	movw	r30, r24
     c8e:	ef 51       	subi	r30, 0x1F	; 31
     c90:	f9 4f       	sbci	r31, 0xF9	; 249
     c92:	01 80       	ldd	r0, Z+1	; 0x01
     c94:	f2 81       	ldd	r31, Z+2	; 0x02
     c96:	e0 2d       	mov	r30, r0
     c98:	fd 83       	std	Y+5, r31	; 0x05
     c9a:	ec 83       	std	Y+4, r30	; 0x04
     c9c:	84 81       	ldd	r24, Z+4	; 0x04
     c9e:	95 81       	ldd	r25, Z+5	; 0x05
     ca0:	9f 83       	std	Y+7, r25	; 0x07
     ca2:	8e 83       	std	Y+6, r24	; 0x06
     ca4:	a4 81       	ldd	r26, Z+4	; 0x04
     ca6:	b5 81       	ldd	r27, Z+5	; 0x05
     ca8:	ce 01       	movw	r24, r28
     caa:	02 96       	adiw	r24, 0x02	; 2
     cac:	13 96       	adiw	r26, 0x03	; 3
     cae:	9c 93       	st	X, r25
     cb0:	8e 93       	st	-X, r24
     cb2:	12 97       	sbiw	r26, 0x02	; 2
     cb4:	95 83       	std	Z+5, r25	; 0x05
     cb6:	84 83       	std	Z+4, r24	; 0x04
     cb8:	ee 89       	ldd	r30, Y+22	; 0x16
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	cf 01       	movw	r24, r30
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	ef 51       	subi	r30, 0x1F	; 31
     cd0:	f9 4f       	sbci	r31, 0xF9	; 249
     cd2:	fb 87       	std	Y+11, r31	; 0x0b
     cd4:	ea 87       	std	Y+10, r30	; 0x0a
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 83       	st	Z, r24
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <xSchedulerRunning>
     ce4:	88 23       	and	r24, r24
     ce6:	51 f0       	breq	.+20     	; 0xcfc <prvAddNewTaskToReadyList+0xf4>
     ce8:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
     cec:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     cf0:	96 89       	ldd	r25, Z+22	; 0x16
     cf2:	8e 89       	ldd	r24, Y+22	; 0x16
     cf4:	98 17       	cp	r25, r24
     cf6:	10 f4       	brcc	.+4      	; 0xcfc <prvAddNewTaskToReadyList+0xf4>
     cf8:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <prvAddCurrentTaskToDelayedList>:
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	f6 2e       	mov	r15, r22
     d10:	00 91 b6 06 	lds	r16, 0x06B6	; 0x8006b6 <xTickCount>
     d14:	10 91 b7 06 	lds	r17, 0x06B7	; 0x8006b7 <xTickCount+0x1>
     d18:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxCurrentTCB>
     d1c:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     d20:	02 96       	adiw	r24, 0x02	; 2
     d22:	0e 94 43 01 	call	0x286	; 0x286 <uxListRemove>
     d26:	cf 3f       	cpi	r28, 0xFF	; 255
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	d8 07       	cpc	r29, r24
     d2c:	b1 f5       	brne	.+108    	; 0xd9a <prvAddCurrentTaskToDelayedList+0x98>
     d2e:	ff 20       	and	r15, r15
     d30:	a1 f1       	breq	.+104    	; 0xd9a <prvAddCurrentTaskToDelayedList+0x98>
     d32:	e9 eb       	ldi	r30, 0xB9	; 185
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	a1 81       	ldd	r26, Z+1	; 0x01
     d38:	b2 81       	ldd	r27, Z+2	; 0x02
     d3a:	c0 91 05 07 	lds	r28, 0x0705	; 0x800705 <pxCurrentTCB>
     d3e:	d0 91 06 07 	lds	r29, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     d42:	bd 83       	std	Y+5, r27	; 0x05
     d44:	ac 83       	std	Y+4, r26	; 0x04
     d46:	c0 91 05 07 	lds	r28, 0x0705	; 0x800705 <pxCurrentTCB>
     d4a:	d0 91 06 07 	lds	r29, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	8d 91       	ld	r24, X+
     d52:	9c 91       	ld	r25, X
     d54:	15 97       	sbiw	r26, 0x05	; 5
     d56:	9f 83       	std	Y+7, r25	; 0x07
     d58:	8e 83       	std	Y+6, r24	; 0x06
     d5a:	14 96       	adiw	r26, 0x04	; 4
     d5c:	cd 91       	ld	r28, X+
     d5e:	dc 91       	ld	r29, X
     d60:	15 97       	sbiw	r26, 0x05	; 5
     d62:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxCurrentTCB>
     d66:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     d6a:	02 96       	adiw	r24, 0x02	; 2
     d6c:	9b 83       	std	Y+3, r25	; 0x03
     d6e:	8a 83       	std	Y+2, r24	; 0x02
     d70:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxCurrentTCB>
     d74:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     d78:	02 96       	adiw	r24, 0x02	; 2
     d7a:	15 96       	adiw	r26, 0x05	; 5
     d7c:	9c 93       	st	X, r25
     d7e:	8e 93       	st	-X, r24
     d80:	14 97       	sbiw	r26, 0x04	; 4
     d82:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     d86:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     d8a:	1b 96       	adiw	r26, 0x0b	; 11
     d8c:	fc 93       	st	X, r31
     d8e:	ee 93       	st	-X, r30
     d90:	1a 97       	sbiw	r26, 0x0a	; 10
     d92:	80 81       	ld	r24, Z
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 83       	st	Z, r24
     d98:	2f c0       	rjmp	.+94     	; 0xdf8 <prvAddCurrentTaskToDelayedList+0xf6>
     d9a:	c0 0f       	add	r28, r16
     d9c:	d1 1f       	adc	r29, r17
     d9e:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
     da2:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     da6:	d3 83       	std	Z+3, r29	; 0x03
     da8:	c2 83       	std	Z+2, r28	; 0x02
     daa:	c0 17       	cp	r28, r16
     dac:	d1 07       	cpc	r29, r17
     dae:	68 f4       	brcc	.+26     	; 0xdca <prvAddCurrentTaskToDelayedList+0xc8>
     db0:	60 91 05 07 	lds	r22, 0x0705	; 0x800705 <pxCurrentTCB>
     db4:	70 91 06 07 	lds	r23, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     db8:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <pxOverflowDelayedTaskList>
     dbc:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
     dc0:	6e 5f       	subi	r22, 0xFE	; 254
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	0e 94 12 01 	call	0x224	; 0x224 <vListInsert>
     dc8:	17 c0       	rjmp	.+46     	; 0xdf8 <prvAddCurrentTaskToDelayedList+0xf6>
     dca:	60 91 05 07 	lds	r22, 0x0705	; 0x800705 <pxCurrentTCB>
     dce:	70 91 06 07 	lds	r23, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     dd2:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     dd6:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     dda:	6e 5f       	subi	r22, 0xFE	; 254
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	0e 94 12 01 	call	0x224	; 0x224 <vListInsert>
     de2:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xNextTaskUnblockTime>
     de6:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xNextTaskUnblockTime+0x1>
     dea:	c8 17       	cp	r28, r24
     dec:	d9 07       	cpc	r29, r25
     dee:	20 f4       	brcc	.+8      	; 0xdf8 <prvAddCurrentTaskToDelayedList+0xf6>
     df0:	d0 93 ae 06 	sts	0x06AE, r29	; 0x8006ae <xNextTaskUnblockTime+0x1>
     df4:	c0 93 ad 06 	sts	0x06AD, r28	; 0x8006ad <xNextTaskUnblockTime>
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	08 95       	ret

00000e04 <xTaskCreate>:
     e04:	2f 92       	push	r2
     e06:	3f 92       	push	r3
     e08:	4f 92       	push	r4
     e0a:	5f 92       	push	r5
     e0c:	6f 92       	push	r6
     e0e:	7f 92       	push	r7
     e10:	8f 92       	push	r8
     e12:	9f 92       	push	r9
     e14:	af 92       	push	r10
     e16:	bf 92       	push	r11
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	3c 01       	movw	r6, r24
     e2a:	1b 01       	movw	r2, r22
     e2c:	5a 01       	movw	r10, r20
     e2e:	29 01       	movw	r4, r18
     e30:	ca 01       	movw	r24, r20
     e32:	0e 94 c5 00 	call	0x18a	; 0x18a <pvPortMalloc>
     e36:	6c 01       	movw	r12, r24
     e38:	89 2b       	or	r24, r25
     e3a:	99 f0       	breq	.+38     	; 0xe62 <xTaskCreate+0x5e>
     e3c:	86 e2       	ldi	r24, 0x26	; 38
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 c5 00 	call	0x18a	; 0x18a <pvPortMalloc>
     e44:	ec 01       	movw	r28, r24
     e46:	89 2b       	or	r24, r25
     e48:	41 f0       	breq	.+16     	; 0xe5a <xTaskCreate+0x56>
     e4a:	86 e2       	ldi	r24, 0x26	; 38
     e4c:	fe 01       	movw	r30, r28
     e4e:	11 92       	st	Z+, r1
     e50:	8a 95       	dec	r24
     e52:	e9 f7       	brne	.-6      	; 0xe4e <xTaskCreate+0x4a>
     e54:	d8 8e       	std	Y+24, r13	; 0x18
     e56:	cf 8a       	std	Y+23, r12	; 0x17
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <xTaskCreate+0x62>
     e5a:	c6 01       	movw	r24, r12
     e5c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vPortFree>
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <xTaskCreate+0x62>
     e62:	c0 e0       	ldi	r28, 0x00	; 0
     e64:	d0 e0       	ldi	r29, 0x00	; 0
     e66:	20 97       	sbiw	r28, 0x00	; 0
     e68:	91 f0       	breq	.+36     	; 0xe8e <xTaskCreate+0x8a>
     e6a:	95 01       	movw	r18, r10
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	81 2c       	mov	r8, r1
     e72:	91 2c       	mov	r9, r1
     e74:	5e 01       	movw	r10, r28
     e76:	67 01       	movw	r12, r14
     e78:	e0 2e       	mov	r14, r16
     e7a:	82 01       	movw	r16, r4
     e7c:	b1 01       	movw	r22, r2
     e7e:	c3 01       	movw	r24, r6
     e80:	0e 94 61 05 	call	0xac2	; 0xac2 <prvInitialiseNewTask>
     e84:	ce 01       	movw	r24, r28
     e86:	0e 94 04 06 	call	0xc08	; 0xc08 <prvAddNewTaskToReadyList>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <xTaskCreate+0x8c>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	9f 90       	pop	r9
     ea6:	8f 90       	pop	r8
     ea8:	7f 90       	pop	r7
     eaa:	6f 90       	pop	r6
     eac:	5f 90       	pop	r5
     eae:	4f 90       	pop	r4
     eb0:	3f 90       	pop	r3
     eb2:	2f 90       	pop	r2
     eb4:	08 95       	ret

00000eb6 <vTaskStartScheduler>:
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	0f 2e       	mov	r0, r31
     ebe:	fb ea       	ldi	r31, 0xAB	; 171
     ec0:	ef 2e       	mov	r14, r31
     ec2:	f6 e0       	ldi	r31, 0x06	; 6
     ec4:	ff 2e       	mov	r15, r31
     ec6:	f0 2d       	mov	r31, r0
     ec8:	00 e0       	ldi	r16, 0x00	; 0
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	45 e5       	ldi	r20, 0x55	; 85
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	61 e6       	ldi	r22, 0x61	; 97
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	8a ec       	ldi	r24, 0xCA	; 202
     ed8:	95 e0       	ldi	r25, 0x05	; 5
     eda:	0e 94 02 07 	call	0xe04	; 0xe04 <xTaskCreate>
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	81 f4       	brne	.+32     	; 0xf02 <vTaskStartScheduler+0x4c>
     ee2:	f8 94       	cli
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
     eec:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <xSchedulerRunning>
     ef6:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <xTickCount+0x1>
     efa:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <xTickCount>
     efe:	0e 94 df 01 	call	0x3be	; 0x3be <xPortStartScheduler>
     f02:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	08 95       	ret

00000f0e <vTaskSuspendAll>:
     f0e:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
     f12:	8f 5f       	subi	r24, 0xFF	; 255
     f14:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxSchedulerSuspended>
     f18:	08 95       	ret

00000f1a <xTaskIncrementTick>:
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
     f26:	81 11       	cpse	r24, r1
     f28:	01 c1       	rjmp	.+514    	; 0x112c <xTaskIncrementTick+0x212>
     f2a:	c0 91 b6 06 	lds	r28, 0x06B6	; 0x8006b6 <xTickCount>
     f2e:	d0 91 b7 06 	lds	r29, 0x06B7	; 0x8006b7 <xTickCount+0x1>
     f32:	8e 01       	movw	r16, r28
     f34:	0f 5f       	subi	r16, 0xFF	; 255
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	10 93 b7 06 	sts	0x06B7, r17	; 0x8006b7 <xTickCount+0x1>
     f3c:	00 93 b6 06 	sts	0x06B6, r16	; 0x8006b6 <xTickCount>
     f40:	01 15       	cp	r16, r1
     f42:	11 05       	cpc	r17, r1
     f44:	b9 f4       	brne	.+46     	; 0xf74 <xTaskIncrementTick+0x5a>
     f46:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     f4a:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     f4e:	20 91 cb 06 	lds	r18, 0x06CB	; 0x8006cb <pxOverflowDelayedTaskList>
     f52:	30 91 cc 06 	lds	r19, 0x06CC	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
     f56:	30 93 ce 06 	sts	0x06CE, r19	; 0x8006ce <pxDelayedTaskList+0x1>
     f5a:	20 93 cd 06 	sts	0x06CD, r18	; 0x8006cd <pxDelayedTaskList>
     f5e:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
     f62:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <pxOverflowDelayedTaskList>
     f66:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <xNumOfOverflows>
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <xNumOfOverflows>
     f70:	0e 94 45 05 	call	0xa8a	; 0xa8a <prvResetNextTaskUnblockTime>
     f74:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xNextTaskUnblockTime>
     f78:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xNextTaskUnblockTime+0x1>
     f7c:	08 17       	cp	r16, r24
     f7e:	19 07       	cpc	r17, r25
     f80:	20 f4       	brcc	.+8      	; 0xf8a <xTaskIncrementTick+0x70>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	b8 c0       	rjmp	.+368    	; 0x10f6 <xTaskIncrementTick+0x1dc>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <xTaskIncrementTick+0x72>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     f90:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     f94:	90 81       	ld	r25, Z
     f96:	91 11       	cpse	r25, r1
     f98:	07 c0       	rjmp	.+14     	; 0xfa8 <xTaskIncrementTick+0x8e>
     f9a:	2f ef       	ldi	r18, 0xFF	; 255
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	30 93 ae 06 	sts	0x06AE, r19	; 0x8006ae <xNextTaskUnblockTime+0x1>
     fa2:	20 93 ad 06 	sts	0x06AD, r18	; 0x8006ad <xNextTaskUnblockTime>
     fa6:	a7 c0       	rjmp	.+334    	; 0x10f6 <xTaskIncrementTick+0x1dc>
     fa8:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     fac:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     fb0:	05 80       	ldd	r0, Z+5	; 0x05
     fb2:	f6 81       	ldd	r31, Z+6	; 0x06
     fb4:	e0 2d       	mov	r30, r0
     fb6:	06 80       	ldd	r0, Z+6	; 0x06
     fb8:	f7 81       	ldd	r31, Z+7	; 0x07
     fba:	e0 2d       	mov	r30, r0
     fbc:	22 81       	ldd	r18, Z+2	; 0x02
     fbe:	33 81       	ldd	r19, Z+3	; 0x03
     fc0:	02 17       	cp	r16, r18
     fc2:	13 07       	cpc	r17, r19
     fc4:	28 f4       	brcc	.+10     	; 0xfd0 <xTaskIncrementTick+0xb6>
     fc6:	30 93 ae 06 	sts	0x06AE, r19	; 0x8006ae <xNextTaskUnblockTime+0x1>
     fca:	20 93 ad 06 	sts	0x06AD, r18	; 0x8006ad <xNextTaskUnblockTime>
     fce:	93 c0       	rjmp	.+294    	; 0x10f6 <xTaskIncrementTick+0x1dc>
     fd0:	a2 85       	ldd	r26, Z+10	; 0x0a
     fd2:	b3 85       	ldd	r27, Z+11	; 0x0b
     fd4:	24 81       	ldd	r18, Z+4	; 0x04
     fd6:	35 81       	ldd	r19, Z+5	; 0x05
     fd8:	46 81       	ldd	r20, Z+6	; 0x06
     fda:	57 81       	ldd	r21, Z+7	; 0x07
     fdc:	e9 01       	movw	r28, r18
     fde:	5d 83       	std	Y+5, r21	; 0x05
     fe0:	4c 83       	std	Y+4, r20	; 0x04
     fe2:	26 81       	ldd	r18, Z+6	; 0x06
     fe4:	37 81       	ldd	r19, Z+7	; 0x07
     fe6:	44 81       	ldd	r20, Z+4	; 0x04
     fe8:	55 81       	ldd	r21, Z+5	; 0x05
     fea:	e9 01       	movw	r28, r18
     fec:	5b 83       	std	Y+3, r21	; 0x03
     fee:	4a 83       	std	Y+2, r20	; 0x02
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	2d 91       	ld	r18, X+
     ff4:	3c 91       	ld	r19, X
     ff6:	12 97       	sbiw	r26, 0x02	; 2
     ff8:	af 01       	movw	r20, r30
     ffa:	4e 5f       	subi	r20, 0xFE	; 254
     ffc:	5f 4f       	sbci	r21, 0xFF	; 255
     ffe:	24 17       	cp	r18, r20
    1000:	35 07       	cpc	r19, r21
    1002:	31 f4       	brne	.+12     	; 0x1010 <xTaskIncrementTick+0xf6>
    1004:	26 81       	ldd	r18, Z+6	; 0x06
    1006:	37 81       	ldd	r19, Z+7	; 0x07
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	3c 93       	st	X, r19
    100c:	2e 93       	st	-X, r18
    100e:	11 97       	sbiw	r26, 0x01	; 1
    1010:	13 86       	std	Z+11, r1	; 0x0b
    1012:	12 86       	std	Z+10, r1	; 0x0a
    1014:	9c 91       	ld	r25, X
    1016:	91 50       	subi	r25, 0x01	; 1
    1018:	9c 93       	st	X, r25
    101a:	a4 89       	ldd	r26, Z+20	; 0x14
    101c:	b5 89       	ldd	r27, Z+21	; 0x15
    101e:	10 97       	sbiw	r26, 0x00	; 0
    1020:	19 f1       	breq	.+70     	; 0x1068 <xTaskIncrementTick+0x14e>
    1022:	26 85       	ldd	r18, Z+14	; 0x0e
    1024:	37 85       	ldd	r19, Z+15	; 0x0f
    1026:	60 89       	ldd	r22, Z+16	; 0x10
    1028:	71 89       	ldd	r23, Z+17	; 0x11
    102a:	e9 01       	movw	r28, r18
    102c:	7d 83       	std	Y+5, r23	; 0x05
    102e:	6c 83       	std	Y+4, r22	; 0x04
    1030:	20 89       	ldd	r18, Z+16	; 0x10
    1032:	31 89       	ldd	r19, Z+17	; 0x11
    1034:	66 85       	ldd	r22, Z+14	; 0x0e
    1036:	77 85       	ldd	r23, Z+15	; 0x0f
    1038:	e9 01       	movw	r28, r18
    103a:	7b 83       	std	Y+3, r23	; 0x03
    103c:	6a 83       	std	Y+2, r22	; 0x02
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	6d 91       	ld	r22, X+
    1042:	7c 91       	ld	r23, X
    1044:	12 97       	sbiw	r26, 0x02	; 2
    1046:	9f 01       	movw	r18, r30
    1048:	24 5f       	subi	r18, 0xF4	; 244
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	62 17       	cp	r22, r18
    104e:	73 07       	cpc	r23, r19
    1050:	31 f4       	brne	.+12     	; 0x105e <xTaskIncrementTick+0x144>
    1052:	20 89       	ldd	r18, Z+16	; 0x10
    1054:	31 89       	ldd	r19, Z+17	; 0x11
    1056:	12 96       	adiw	r26, 0x02	; 2
    1058:	3c 93       	st	X, r19
    105a:	2e 93       	st	-X, r18
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	15 8a       	std	Z+21, r1	; 0x15
    1060:	14 8a       	std	Z+20, r1	; 0x14
    1062:	9c 91       	ld	r25, X
    1064:	91 50       	subi	r25, 0x01	; 1
    1066:	9c 93       	st	X, r25
    1068:	26 89       	ldd	r18, Z+22	; 0x16
    106a:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
    106e:	92 17       	cp	r25, r18
    1070:	10 f4       	brcc	.+4      	; 0x1076 <xTaskIncrementTick+0x15c>
    1072:	20 93 b5 06 	sts	0x06B5, r18	; 0x8006b5 <uxTopReadyPriority>
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	d9 01       	movw	r26, r18
    107a:	aa 0f       	add	r26, r26
    107c:	bb 1f       	adc	r27, r27
    107e:	aa 0f       	add	r26, r26
    1080:	bb 1f       	adc	r27, r27
    1082:	aa 0f       	add	r26, r26
    1084:	bb 1f       	adc	r27, r27
    1086:	2a 0f       	add	r18, r26
    1088:	3b 1f       	adc	r19, r27
    108a:	d9 01       	movw	r26, r18
    108c:	af 51       	subi	r26, 0x1F	; 31
    108e:	b9 4f       	sbci	r27, 0xF9	; 249
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	0d 90       	ld	r0, X+
    1094:	bc 91       	ld	r27, X
    1096:	a0 2d       	mov	r26, r0
    1098:	b5 83       	std	Z+5, r27	; 0x05
    109a:	a4 83       	std	Z+4, r26	; 0x04
    109c:	14 96       	adiw	r26, 0x04	; 4
    109e:	2d 91       	ld	r18, X+
    10a0:	3c 91       	ld	r19, X
    10a2:	15 97       	sbiw	r26, 0x05	; 5
    10a4:	37 83       	std	Z+7, r19	; 0x07
    10a6:	26 83       	std	Z+6, r18	; 0x06
    10a8:	14 96       	adiw	r26, 0x04	; 4
    10aa:	2d 91       	ld	r18, X+
    10ac:	3c 91       	ld	r19, X
    10ae:	15 97       	sbiw	r26, 0x05	; 5
    10b0:	e9 01       	movw	r28, r18
    10b2:	5b 83       	std	Y+3, r21	; 0x03
    10b4:	4a 83       	std	Y+2, r20	; 0x02
    10b6:	15 96       	adiw	r26, 0x05	; 5
    10b8:	5c 93       	st	X, r21
    10ba:	4e 93       	st	-X, r20
    10bc:	14 97       	sbiw	r26, 0x04	; 4
    10be:	a6 89       	ldd	r26, Z+22	; 0x16
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	9d 01       	movw	r18, r26
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	a2 0f       	add	r26, r18
    10d2:	b3 1f       	adc	r27, r19
    10d4:	af 51       	subi	r26, 0x1F	; 31
    10d6:	b9 4f       	sbci	r27, 0xF9	; 249
    10d8:	b3 87       	std	Z+11, r27	; 0x0b
    10da:	a2 87       	std	Z+10, r26	; 0x0a
    10dc:	9c 91       	ld	r25, X
    10de:	9f 5f       	subi	r25, 0xFF	; 255
    10e0:	9c 93       	st	X, r25
    10e2:	26 89       	ldd	r18, Z+22	; 0x16
    10e4:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    10e8:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    10ec:	96 89       	ldd	r25, Z+22	; 0x16
    10ee:	92 17       	cp	r25, r18
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <xTaskIncrementTick+0x1da>
    10f2:	49 cf       	rjmp	.-366    	; 0xf86 <xTaskIncrementTick+0x6c>
    10f4:	4b cf       	rjmp	.-362    	; 0xf8c <xTaskIncrementTick+0x72>
    10f6:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    10fa:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    10fe:	26 89       	ldd	r18, Z+22	; 0x16
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	f9 01       	movw	r30, r18
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	ee 0f       	add	r30, r30
    110a:	ff 1f       	adc	r31, r31
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	2e 0f       	add	r18, r30
    1112:	3f 1f       	adc	r19, r31
    1114:	f9 01       	movw	r30, r18
    1116:	ef 51       	subi	r30, 0x1F	; 31
    1118:	f9 4f       	sbci	r31, 0xF9	; 249
    111a:	90 81       	ld	r25, Z
    111c:	92 30       	cpi	r25, 0x02	; 2
    111e:	08 f0       	brcs	.+2      	; 0x1122 <xTaskIncrementTick+0x208>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 91 b1 06 	lds	r25, 0x06B1	; 0x8006b1 <xYieldPending>
    1126:	91 11       	cpse	r25, r1
    1128:	0c c0       	rjmp	.+24     	; 0x1142 <xTaskIncrementTick+0x228>
    112a:	0c c0       	rjmp	.+24     	; 0x1144 <xTaskIncrementTick+0x22a>
    112c:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <xPendedTicks>
    1130:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <xPendedTicks+0x1>
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <xPendedTicks+0x1>
    113a:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <xPendedTicks>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <xTaskIncrementTick+0x22a>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <xTaskResumeAll>:
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	0f 92       	push	r0
    1158:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxSchedulerSuspended>
    1162:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    1166:	81 11       	cpse	r24, r1
    1168:	bf c0       	rjmp	.+382    	; 0x12e8 <xTaskResumeAll+0x19a>
    116a:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <uxCurrentNumberOfTasks>
    116e:	81 11       	cpse	r24, r1
    1170:	96 c0       	rjmp	.+300    	; 0x129e <xTaskResumeAll+0x150>
    1172:	bd c0       	rjmp	.+378    	; 0x12ee <xTaskResumeAll+0x1a0>
    1174:	e0 91 c7 06 	lds	r30, 0x06C7	; 0x8006c7 <xPendingReadyList+0x5>
    1178:	f0 91 c8 06 	lds	r31, 0x06C8	; 0x8006c8 <xPendingReadyList+0x6>
    117c:	06 80       	ldd	r0, Z+6	; 0x06
    117e:	f7 81       	ldd	r31, Z+7	; 0x07
    1180:	e0 2d       	mov	r30, r0
    1182:	a4 89       	ldd	r26, Z+20	; 0x14
    1184:	b5 89       	ldd	r27, Z+21	; 0x15
    1186:	c6 85       	ldd	r28, Z+14	; 0x0e
    1188:	d7 85       	ldd	r29, Z+15	; 0x0f
    118a:	80 89       	ldd	r24, Z+16	; 0x10
    118c:	91 89       	ldd	r25, Z+17	; 0x11
    118e:	9d 83       	std	Y+5, r25	; 0x05
    1190:	8c 83       	std	Y+4, r24	; 0x04
    1192:	c0 89       	ldd	r28, Z+16	; 0x10
    1194:	d1 89       	ldd	r29, Z+17	; 0x11
    1196:	86 85       	ldd	r24, Z+14	; 0x0e
    1198:	97 85       	ldd	r25, Z+15	; 0x0f
    119a:	9b 83       	std	Y+3, r25	; 0x03
    119c:	8a 83       	std	Y+2, r24	; 0x02
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	2d 91       	ld	r18, X+
    11a2:	3c 91       	ld	r19, X
    11a4:	12 97       	sbiw	r26, 0x02	; 2
    11a6:	cf 01       	movw	r24, r30
    11a8:	0c 96       	adiw	r24, 0x0c	; 12
    11aa:	28 17       	cp	r18, r24
    11ac:	39 07       	cpc	r19, r25
    11ae:	31 f4       	brne	.+12     	; 0x11bc <xTaskResumeAll+0x6e>
    11b0:	80 89       	ldd	r24, Z+16	; 0x10
    11b2:	91 89       	ldd	r25, Z+17	; 0x11
    11b4:	12 96       	adiw	r26, 0x02	; 2
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
    11ba:	11 97       	sbiw	r26, 0x01	; 1
    11bc:	15 8a       	std	Z+21, r1	; 0x15
    11be:	14 8a       	std	Z+20, r1	; 0x14
    11c0:	8c 91       	ld	r24, X
    11c2:	81 50       	subi	r24, 0x01	; 1
    11c4:	8c 93       	st	X, r24
    11c6:	a2 85       	ldd	r26, Z+10	; 0x0a
    11c8:	b3 85       	ldd	r27, Z+11	; 0x0b
    11ca:	c4 81       	ldd	r28, Z+4	; 0x04
    11cc:	d5 81       	ldd	r29, Z+5	; 0x05
    11ce:	86 81       	ldd	r24, Z+6	; 0x06
    11d0:	97 81       	ldd	r25, Z+7	; 0x07
    11d2:	9d 83       	std	Y+5, r25	; 0x05
    11d4:	8c 83       	std	Y+4, r24	; 0x04
    11d6:	c6 81       	ldd	r28, Z+6	; 0x06
    11d8:	d7 81       	ldd	r29, Z+7	; 0x07
    11da:	84 81       	ldd	r24, Z+4	; 0x04
    11dc:	95 81       	ldd	r25, Z+5	; 0x05
    11de:	9b 83       	std	Y+3, r25	; 0x03
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	11 96       	adiw	r26, 0x01	; 1
    11e4:	8d 91       	ld	r24, X+
    11e6:	9c 91       	ld	r25, X
    11e8:	12 97       	sbiw	r26, 0x02	; 2
    11ea:	9f 01       	movw	r18, r30
    11ec:	2e 5f       	subi	r18, 0xFE	; 254
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	31 f4       	brne	.+12     	; 0x1202 <xTaskResumeAll+0xb4>
    11f6:	86 81       	ldd	r24, Z+6	; 0x06
    11f8:	97 81       	ldd	r25, Z+7	; 0x07
    11fa:	12 96       	adiw	r26, 0x02	; 2
    11fc:	9c 93       	st	X, r25
    11fe:	8e 93       	st	-X, r24
    1200:	11 97       	sbiw	r26, 0x01	; 1
    1202:	13 86       	std	Z+11, r1	; 0x0b
    1204:	12 86       	std	Z+10, r1	; 0x0a
    1206:	8c 91       	ld	r24, X
    1208:	81 50       	subi	r24, 0x01	; 1
    120a:	8c 93       	st	X, r24
    120c:	86 89       	ldd	r24, Z+22	; 0x16
    120e:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
    1212:	98 17       	cp	r25, r24
    1214:	10 f4       	brcc	.+4      	; 0x121a <xTaskResumeAll+0xcc>
    1216:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxTopReadyPriority>
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	dc 01       	movw	r26, r24
    121e:	aa 0f       	add	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	aa 0f       	add	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	aa 0f       	add	r26, r26
    1228:	bb 1f       	adc	r27, r27
    122a:	8a 0f       	add	r24, r26
    122c:	9b 1f       	adc	r25, r27
    122e:	dc 01       	movw	r26, r24
    1230:	af 51       	subi	r26, 0x1F	; 31
    1232:	b9 4f       	sbci	r27, 0xF9	; 249
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	0d 90       	ld	r0, X+
    1238:	bc 91       	ld	r27, X
    123a:	a0 2d       	mov	r26, r0
    123c:	b5 83       	std	Z+5, r27	; 0x05
    123e:	a4 83       	std	Z+4, r26	; 0x04
    1240:	14 96       	adiw	r26, 0x04	; 4
    1242:	8d 91       	ld	r24, X+
    1244:	9c 91       	ld	r25, X
    1246:	15 97       	sbiw	r26, 0x05	; 5
    1248:	97 83       	std	Z+7, r25	; 0x07
    124a:	86 83       	std	Z+6, r24	; 0x06
    124c:	14 96       	adiw	r26, 0x04	; 4
    124e:	cd 91       	ld	r28, X+
    1250:	dc 91       	ld	r29, X
    1252:	15 97       	sbiw	r26, 0x05	; 5
    1254:	3b 83       	std	Y+3, r19	; 0x03
    1256:	2a 83       	std	Y+2, r18	; 0x02
    1258:	15 96       	adiw	r26, 0x05	; 5
    125a:	3c 93       	st	X, r19
    125c:	2e 93       	st	-X, r18
    125e:	14 97       	sbiw	r26, 0x04	; 4
    1260:	a6 89       	ldd	r26, Z+22	; 0x16
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	cd 01       	movw	r24, r26
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	a8 0f       	add	r26, r24
    1274:	b9 1f       	adc	r27, r25
    1276:	af 51       	subi	r26, 0x1F	; 31
    1278:	b9 4f       	sbci	r27, 0xF9	; 249
    127a:	b3 87       	std	Z+11, r27	; 0x0b
    127c:	a2 87       	std	Z+10, r26	; 0x0a
    127e:	8c 91       	ld	r24, X
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	8c 93       	st	X, r24
    1284:	96 89       	ldd	r25, Z+22	; 0x16
    1286:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
    128a:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    128e:	56 96       	adiw	r26, 0x16	; 22
    1290:	8c 91       	ld	r24, X
    1292:	98 17       	cp	r25, r24
    1294:	30 f0       	brcs	.+12     	; 0x12a2 <xTaskResumeAll+0x154>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <xTaskResumeAll+0x154>
    129e:	e0 e0       	ldi	r30, 0x00	; 0
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <xPendingReadyList>
    12a6:	81 11       	cpse	r24, r1
    12a8:	65 cf       	rjmp	.-310    	; 0x1174 <xTaskResumeAll+0x26>
    12aa:	ef 2b       	or	r30, r31
    12ac:	11 f0       	breq	.+4      	; 0x12b2 <xTaskResumeAll+0x164>
    12ae:	0e 94 45 05 	call	0xa8a	; 0xa8a <prvResetNextTaskUnblockTime>
    12b2:	c0 91 b2 06 	lds	r28, 0x06B2	; 0x8006b2 <xPendedTicks>
    12b6:	d0 91 b3 06 	lds	r29, 0x06B3	; 0x8006b3 <xPendedTicks+0x1>
    12ba:	20 97       	sbiw	r28, 0x00	; 0
    12bc:	69 f0       	breq	.+26     	; 0x12d8 <xTaskResumeAll+0x18a>
    12be:	0e 94 8d 07 	call	0xf1a	; 0xf1a <xTaskIncrementTick>
    12c2:	88 23       	and	r24, r24
    12c4:	19 f0       	breq	.+6      	; 0x12cc <xTaskResumeAll+0x17e>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    12cc:	21 97       	sbiw	r28, 0x01	; 1
    12ce:	b9 f7       	brne	.-18     	; 0x12be <xTaskResumeAll+0x170>
    12d0:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <xPendedTicks+0x1>
    12d4:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <xPendedTicks>
    12d8:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <xYieldPending>
    12dc:	88 23       	and	r24, r24
    12de:	31 f0       	breq	.+12     	; 0x12ec <xTaskResumeAll+0x19e>
    12e0:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <xTaskResumeAll+0x1a0>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <xTaskResumeAll+0x1a0>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <vTaskDelay>:
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
    12fe:	89 2b       	or	r24, r25
    1300:	49 f0       	breq	.+18     	; 0x1314 <vTaskDelay+0x1c>
    1302:	0e 94 87 07 	call	0xf0e	; 0xf0e <vTaskSuspendAll>
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	ce 01       	movw	r24, r28
    130a:	0e 94 81 06 	call	0xd02	; 0xd02 <prvAddCurrentTaskToDelayedList>
    130e:	0e 94 a7 08 	call	0x114e	; 0x114e <xTaskResumeAll>
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <vTaskDelay+0x1e>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	81 11       	cpse	r24, r1
    1318:	02 c0       	rjmp	.+4      	; 0x131e <vTaskDelay+0x26>
    131a:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortYield>
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <vTaskSwitchContext>:
    1324:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    1328:	88 23       	and	r24, r24
    132a:	21 f0       	breq	.+8      	; 0x1334 <vTaskSwitchContext+0x10>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    1332:	08 95       	ret
    1334:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <xYieldPending>
    1338:	20 91 b5 06 	lds	r18, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <vTaskSwitchContext+0x1c>
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	82 2f       	mov	r24, r18
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	fc 01       	movw	r30, r24
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	e8 0f       	add	r30, r24
    1354:	f9 1f       	adc	r31, r25
    1356:	ef 51       	subi	r30, 0x1F	; 31
    1358:	f9 4f       	sbci	r31, 0xF9	; 249
    135a:	30 81       	ld	r19, Z
    135c:	33 23       	and	r19, r19
    135e:	79 f3       	breq	.-34     	; 0x133e <vTaskSwitchContext+0x1a>
    1360:	ac 01       	movw	r20, r24
    1362:	44 0f       	add	r20, r20
    1364:	55 1f       	adc	r21, r21
    1366:	44 0f       	add	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	44 0f       	add	r20, r20
    136c:	55 1f       	adc	r21, r21
    136e:	48 0f       	add	r20, r24
    1370:	59 1f       	adc	r21, r25
    1372:	df 01       	movw	r26, r30
    1374:	01 80       	ldd	r0, Z+1	; 0x01
    1376:	f2 81       	ldd	r31, Z+2	; 0x02
    1378:	e0 2d       	mov	r30, r0
    137a:	02 80       	ldd	r0, Z+2	; 0x02
    137c:	f3 81       	ldd	r31, Z+3	; 0x03
    137e:	e0 2d       	mov	r30, r0
    1380:	12 96       	adiw	r26, 0x02	; 2
    1382:	fc 93       	st	X, r31
    1384:	ee 93       	st	-X, r30
    1386:	11 97       	sbiw	r26, 0x01	; 1
    1388:	4c 51       	subi	r20, 0x1C	; 28
    138a:	59 4f       	sbci	r21, 0xF9	; 249
    138c:	e4 17       	cp	r30, r20
    138e:	f5 07       	cpc	r31, r21
    1390:	29 f4       	brne	.+10     	; 0x139c <vTaskSwitchContext+0x78>
    1392:	42 81       	ldd	r20, Z+2	; 0x02
    1394:	53 81       	ldd	r21, Z+3	; 0x03
    1396:	fd 01       	movw	r30, r26
    1398:	52 83       	std	Z+2, r21	; 0x02
    139a:	41 83       	std	Z+1, r20	; 0x01
    139c:	fc 01       	movw	r30, r24
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	8e 0f       	add	r24, r30
    13ac:	9f 1f       	adc	r25, r31
    13ae:	fc 01       	movw	r30, r24
    13b0:	ef 51       	subi	r30, 0x1F	; 31
    13b2:	f9 4f       	sbci	r31, 0xF9	; 249
    13b4:	01 80       	ldd	r0, Z+1	; 0x01
    13b6:	f2 81       	ldd	r31, Z+2	; 0x02
    13b8:	e0 2d       	mov	r30, r0
    13ba:	86 81       	ldd	r24, Z+6	; 0x06
    13bc:	97 81       	ldd	r25, Z+7	; 0x07
    13be:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <pxCurrentTCB+0x1>
    13c2:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <pxCurrentTCB>
    13c6:	20 93 b5 06 	sts	0x06B5, r18	; 0x8006b5 <uxTopReadyPriority>
    13ca:	08 95       	ret

000013cc <vTaskPlaceOnEventList>:
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	eb 01       	movw	r28, r22
    13d2:	60 91 05 07 	lds	r22, 0x0705	; 0x800705 <pxCurrentTCB>
    13d6:	70 91 06 07 	lds	r23, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    13da:	64 5f       	subi	r22, 0xF4	; 244
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	0e 94 12 01 	call	0x224	; 0x224 <vListInsert>
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	ce 01       	movw	r24, r28
    13e6:	0e 94 81 06 	call	0xd02	; 0xd02 <prvAddCurrentTaskToDelayedList>
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <xTaskRemoveFromEventList>:
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	dc 01       	movw	r26, r24
    13f6:	15 96       	adiw	r26, 0x05	; 5
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	16 97       	sbiw	r26, 0x06	; 6
    13fe:	06 80       	ldd	r0, Z+6	; 0x06
    1400:	f7 81       	ldd	r31, Z+7	; 0x07
    1402:	e0 2d       	mov	r30, r0
    1404:	a4 89       	ldd	r26, Z+20	; 0x14
    1406:	b5 89       	ldd	r27, Z+21	; 0x15
    1408:	c6 85       	ldd	r28, Z+14	; 0x0e
    140a:	d7 85       	ldd	r29, Z+15	; 0x0f
    140c:	80 89       	ldd	r24, Z+16	; 0x10
    140e:	91 89       	ldd	r25, Z+17	; 0x11
    1410:	9d 83       	std	Y+5, r25	; 0x05
    1412:	8c 83       	std	Y+4, r24	; 0x04
    1414:	c0 89       	ldd	r28, Z+16	; 0x10
    1416:	d1 89       	ldd	r29, Z+17	; 0x11
    1418:	86 85       	ldd	r24, Z+14	; 0x0e
    141a:	97 85       	ldd	r25, Z+15	; 0x0f
    141c:	9b 83       	std	Y+3, r25	; 0x03
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	8d 91       	ld	r24, X+
    1424:	9c 91       	ld	r25, X
    1426:	12 97       	sbiw	r26, 0x02	; 2
    1428:	9f 01       	movw	r18, r30
    142a:	24 5f       	subi	r18, 0xF4	; 244
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	82 17       	cp	r24, r18
    1430:	93 07       	cpc	r25, r19
    1432:	31 f4       	brne	.+12     	; 0x1440 <xTaskRemoveFromEventList+0x50>
    1434:	80 89       	ldd	r24, Z+16	; 0x10
    1436:	91 89       	ldd	r25, Z+17	; 0x11
    1438:	12 96       	adiw	r26, 0x02	; 2
    143a:	9c 93       	st	X, r25
    143c:	8e 93       	st	-X, r24
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	15 8a       	std	Z+21, r1	; 0x15
    1442:	14 8a       	std	Z+20, r1	; 0x14
    1444:	8c 91       	ld	r24, X
    1446:	81 50       	subi	r24, 0x01	; 1
    1448:	8c 93       	st	X, r24
    144a:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    144e:	81 11       	cpse	r24, r1
    1450:	60 c0       	rjmp	.+192    	; 0x1512 <xTaskRemoveFromEventList+0x122>
    1452:	a2 85       	ldd	r26, Z+10	; 0x0a
    1454:	b3 85       	ldd	r27, Z+11	; 0x0b
    1456:	c4 81       	ldd	r28, Z+4	; 0x04
    1458:	d5 81       	ldd	r29, Z+5	; 0x05
    145a:	86 81       	ldd	r24, Z+6	; 0x06
    145c:	97 81       	ldd	r25, Z+7	; 0x07
    145e:	9d 83       	std	Y+5, r25	; 0x05
    1460:	8c 83       	std	Y+4, r24	; 0x04
    1462:	c6 81       	ldd	r28, Z+6	; 0x06
    1464:	d7 81       	ldd	r29, Z+7	; 0x07
    1466:	84 81       	ldd	r24, Z+4	; 0x04
    1468:	95 81       	ldd	r25, Z+5	; 0x05
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	8a 83       	std	Y+2, r24	; 0x02
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	12 97       	sbiw	r26, 0x02	; 2
    1476:	9f 01       	movw	r18, r30
    1478:	2e 5f       	subi	r18, 0xFE	; 254
    147a:	3f 4f       	sbci	r19, 0xFF	; 255
    147c:	82 17       	cp	r24, r18
    147e:	93 07       	cpc	r25, r19
    1480:	31 f4       	brne	.+12     	; 0x148e <xTaskRemoveFromEventList+0x9e>
    1482:	86 81       	ldd	r24, Z+6	; 0x06
    1484:	97 81       	ldd	r25, Z+7	; 0x07
    1486:	12 96       	adiw	r26, 0x02	; 2
    1488:	9c 93       	st	X, r25
    148a:	8e 93       	st	-X, r24
    148c:	11 97       	sbiw	r26, 0x01	; 1
    148e:	13 86       	std	Z+11, r1	; 0x0b
    1490:	12 86       	std	Z+10, r1	; 0x0a
    1492:	8c 91       	ld	r24, X
    1494:	81 50       	subi	r24, 0x01	; 1
    1496:	8c 93       	st	X, r24
    1498:	86 89       	ldd	r24, Z+22	; 0x16
    149a:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
    149e:	98 17       	cp	r25, r24
    14a0:	10 f4       	brcc	.+4      	; 0x14a6 <xTaskRemoveFromEventList+0xb6>
    14a2:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxTopReadyPriority>
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	dc 01       	movw	r26, r24
    14aa:	aa 0f       	add	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	aa 0f       	add	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	aa 0f       	add	r26, r26
    14b4:	bb 1f       	adc	r27, r27
    14b6:	8a 0f       	add	r24, r26
    14b8:	9b 1f       	adc	r25, r27
    14ba:	dc 01       	movw	r26, r24
    14bc:	af 51       	subi	r26, 0x1F	; 31
    14be:	b9 4f       	sbci	r27, 0xF9	; 249
    14c0:	11 96       	adiw	r26, 0x01	; 1
    14c2:	0d 90       	ld	r0, X+
    14c4:	bc 91       	ld	r27, X
    14c6:	a0 2d       	mov	r26, r0
    14c8:	b5 83       	std	Z+5, r27	; 0x05
    14ca:	a4 83       	std	Z+4, r26	; 0x04
    14cc:	14 96       	adiw	r26, 0x04	; 4
    14ce:	8d 91       	ld	r24, X+
    14d0:	9c 91       	ld	r25, X
    14d2:	15 97       	sbiw	r26, 0x05	; 5
    14d4:	97 83       	std	Z+7, r25	; 0x07
    14d6:	86 83       	std	Z+6, r24	; 0x06
    14d8:	14 96       	adiw	r26, 0x04	; 4
    14da:	cd 91       	ld	r28, X+
    14dc:	dc 91       	ld	r29, X
    14de:	15 97       	sbiw	r26, 0x05	; 5
    14e0:	3b 83       	std	Y+3, r19	; 0x03
    14e2:	2a 83       	std	Y+2, r18	; 0x02
    14e4:	15 96       	adiw	r26, 0x05	; 5
    14e6:	3c 93       	st	X, r19
    14e8:	2e 93       	st	-X, r18
    14ea:	14 97       	sbiw	r26, 0x04	; 4
    14ec:	a6 89       	ldd	r26, Z+22	; 0x16
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	cd 01       	movw	r24, r26
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	a8 0f       	add	r26, r24
    1500:	b9 1f       	adc	r27, r25
    1502:	af 51       	subi	r26, 0x1F	; 31
    1504:	b9 4f       	sbci	r27, 0xF9	; 249
    1506:	b3 87       	std	Z+11, r27	; 0x0b
    1508:	a2 87       	std	Z+10, r26	; 0x0a
    150a:	8c 91       	ld	r24, X
    150c:	8f 5f       	subi	r24, 0xFF	; 255
    150e:	8c 93       	st	X, r24
    1510:	1c c0       	rjmp	.+56     	; 0x154a <xTaskRemoveFromEventList+0x15a>
    1512:	42 ec       	ldi	r20, 0xC2	; 194
    1514:	56 e0       	ldi	r21, 0x06	; 6
    1516:	da 01       	movw	r26, r20
    1518:	11 96       	adiw	r26, 0x01	; 1
    151a:	cd 91       	ld	r28, X+
    151c:	dc 91       	ld	r29, X
    151e:	12 97       	sbiw	r26, 0x02	; 2
    1520:	d7 87       	std	Z+15, r29	; 0x0f
    1522:	c6 87       	std	Z+14, r28	; 0x0e
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	91 8b       	std	Z+17, r25	; 0x11
    152a:	80 8b       	std	Z+16, r24	; 0x10
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	dc 01       	movw	r26, r24
    1532:	13 96       	adiw	r26, 0x03	; 3
    1534:	3c 93       	st	X, r19
    1536:	2e 93       	st	-X, r18
    1538:	12 97       	sbiw	r26, 0x02	; 2
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	55 8b       	std	Z+21, r21	; 0x15
    1540:	44 8b       	std	Z+20, r20	; 0x14
    1542:	da 01       	movw	r26, r20
    1544:	8c 91       	ld	r24, X
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	8c 93       	st	X, r24
    154a:	96 89       	ldd	r25, Z+22	; 0x16
    154c:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    1550:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    1554:	86 89       	ldd	r24, Z+22	; 0x16
    1556:	89 17       	cp	r24, r25
    1558:	20 f4       	brcc	.+8      	; 0x1562 <xTaskRemoveFromEventList+0x172>
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <xTaskRemoveFromEventList+0x174>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    156a:	20 91 b0 06 	lds	r18, 0x06B0	; 0x8006b0 <xNumOfOverflows>
    156e:	fc 01       	movw	r30, r24
    1570:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1572:	20 91 b6 06 	lds	r18, 0x06B6	; 0x8006b6 <xTickCount>
    1576:	30 91 b7 06 	lds	r19, 0x06B7	; 0x8006b7 <xTickCount+0x1>
    157a:	32 83       	std	Z+2, r19	; 0x02
    157c:	21 83       	std	Z+1, r18	; 0x01
    157e:	08 95       	ret

00001580 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    158c:	e0 91 b6 06 	lds	r30, 0x06B6	; 0x8006b6 <xTickCount>
    1590:	f0 91 b7 06 	lds	r31, 0x06B7	; 0x8006b7 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1594:	dc 01       	movw	r26, r24
    1596:	11 96       	adiw	r26, 0x01	; 1
    1598:	4d 91       	ld	r20, X+
    159a:	5c 91       	ld	r21, X
    159c:	12 97       	sbiw	r26, 0x02	; 2
    159e:	df 01       	movw	r26, r30
    15a0:	a4 1b       	sub	r26, r20
    15a2:	b5 0b       	sbc	r27, r21
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
    15a4:	eb 01       	movw	r28, r22
    15a6:	28 81       	ld	r18, Y
    15a8:	39 81       	ldd	r19, Y+1	; 0x01
    15aa:	2f 3f       	cpi	r18, 0xFF	; 255
    15ac:	df ef       	ldi	r29, 0xFF	; 255
    15ae:	3d 07       	cpc	r19, r29
    15b0:	f9 f0       	breq	.+62     	; 0x15f0 <xTaskCheckForTimeOut+0x70>
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    15b2:	ec 01       	movw	r28, r24
    15b4:	18 81       	ld	r17, Y
    15b6:	c0 91 b0 06 	lds	r28, 0x06B0	; 0x8006b0 <xNumOfOverflows>
    15ba:	1c 17       	cp	r17, r28
    15bc:	41 f0       	breq	.+16     	; 0x15ce <xTaskCheckForTimeOut+0x4e>
    15be:	e4 17       	cp	r30, r20
    15c0:	f5 07       	cpc	r31, r21
    15c2:	28 f0       	brcs	.+10     	; 0x15ce <xTaskCheckForTimeOut+0x4e>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    15c4:	fb 01       	movw	r30, r22
    15c6:	11 82       	std	Z+1, r1	; 0x01
    15c8:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    15cc:	12 c0       	rjmp	.+36     	; 0x15f2 <xTaskCheckForTimeOut+0x72>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    15ce:	a2 17       	cp	r26, r18
    15d0:	b3 07       	cpc	r27, r19
    15d2:	48 f4       	brcc	.+18     	; 0x15e6 <xTaskCheckForTimeOut+0x66>
    15d4:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    15d6:	2a 1b       	sub	r18, r26
    15d8:	3b 0b       	sbc	r19, r27
    15da:	31 83       	std	Z+1, r19	; 0x01
    15dc:	20 83       	st	Z, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    15de:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <xTaskCheckForTimeOut+0x72>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    15e6:	db 01       	movw	r26, r22
    15e8:	1d 92       	st	X+, r1
    15ea:	1c 92       	st	X, r1
            xReturn = pdTRUE;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <xTaskCheckForTimeOut+0x72>
            if( *pxTicksToWait == portMAX_DELAY )
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
    15f0:	80 e0       	ldi	r24, 0x00	; 0
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	08 95       	ret

000015fe <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    1604:	08 95       	ret

00001606 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	00 f5       	brcc	.+64     	; 0x164a <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
    160a:	61 11       	cpse	r22, r1
    160c:	0e c0       	rjmp	.+28     	; 0x162a <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
    160e:	4a b3       	in	r20, 0x1a	; 26
    1610:	21 e0       	ldi	r18, 0x01	; 1
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	b9 01       	movw	r22, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_setPinDir+0x16>
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_setPinDir+0x12>
    1620:	cb 01       	movw	r24, r22
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8a bb       	out	0x1a, r24	; 26
    1628:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    162a:	61 30       	cpi	r22, 0x01	; 1
    162c:	09 f0       	breq	.+2      	; 0x1630 <DIO_setPinDir+0x2a>
    162e:	75 c0       	rjmp	.+234    	; 0x171a <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
    1630:	4a b3       	in	r20, 0x1a	; 26
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	b9 01       	movw	r22, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_setPinDir+0x38>
    163a:	66 0f       	add	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	8a 95       	dec	r24
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_setPinDir+0x34>
    1642:	cb 01       	movw	r24, r22
    1644:	84 2b       	or	r24, r20
    1646:	8a bb       	out	0x1a, r24	; 26
    1648:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    164a:	98 ef       	ldi	r25, 0xF8	; 248
    164c:	98 0f       	add	r25, r24
    164e:	98 30       	cpi	r25, 0x08	; 8
    1650:	00 f5       	brcc	.+64     	; 0x1692 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
    1652:	61 11       	cpse	r22, r1
    1654:	0e c0       	rjmp	.+28     	; 0x1672 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
    1656:	47 b3       	in	r20, 0x17	; 23
    1658:	21 e0       	ldi	r18, 0x01	; 1
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	b9 01       	movw	r22, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_setPinDir+0x5e>
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	9a 95       	dec	r25
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_setPinDir+0x5a>
    1668:	cb 01       	movw	r24, r22
    166a:	80 95       	com	r24
    166c:	84 23       	and	r24, r20
    166e:	87 bb       	out	0x17, r24	; 23
    1670:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    1672:	61 30       	cpi	r22, 0x01	; 1
    1674:	09 f0       	breq	.+2      	; 0x1678 <DIO_setPinDir+0x72>
    1676:	51 c0       	rjmp	.+162    	; 0x171a <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
    1678:	47 b3       	in	r20, 0x17	; 23
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	b9 01       	movw	r22, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_setPinDir+0x80>
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	9a 95       	dec	r25
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_setPinDir+0x7c>
    168a:	cb 01       	movw	r24, r22
    168c:	84 2b       	or	r24, r20
    168e:	87 bb       	out	0x17, r24	; 23
    1690:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    1692:	90 ef       	ldi	r25, 0xF0	; 240
    1694:	98 0f       	add	r25, r24
    1696:	98 30       	cpi	r25, 0x08	; 8
    1698:	f8 f4       	brcc	.+62     	; 0x16d8 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
    169a:	61 11       	cpse	r22, r1
    169c:	0e c0       	rjmp	.+28     	; 0x16ba <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
    169e:	44 b3       	in	r20, 0x14	; 20
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_setPinDir+0xa6>
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	9a 95       	dec	r25
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_setPinDir+0xa2>
    16b0:	cb 01       	movw	r24, r22
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	84 bb       	out	0x14, r24	; 20
    16b8:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    16ba:	61 30       	cpi	r22, 0x01	; 1
    16bc:	71 f5       	brne	.+92     	; 0x171a <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
    16be:	44 b3       	in	r20, 0x14	; 20
    16c0:	21 e0       	ldi	r18, 0x01	; 1
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	b9 01       	movw	r22, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_setPinDir+0xc6>
    16c8:	66 0f       	add	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	9a 95       	dec	r25
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_setPinDir+0xc2>
    16d0:	cb 01       	movw	r24, r22
    16d2:	84 2b       	or	r24, r20
    16d4:	84 bb       	out	0x14, r24	; 20
    16d6:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    16d8:	88 51       	subi	r24, 0x18	; 24
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	f0 f4       	brcc	.+60     	; 0x171a <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
    16de:	61 11       	cpse	r22, r1
    16e0:	0e c0       	rjmp	.+28     	; 0x16fe <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRD,pinNum);
    16e2:	41 b3       	in	r20, 0x11	; 17
    16e4:	21 e0       	ldi	r18, 0x01	; 1
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	b9 01       	movw	r22, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_setPinDir+0xea>
    16ec:	66 0f       	add	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	8a 95       	dec	r24
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_setPinDir+0xe6>
    16f4:	cb 01       	movw	r24, r22
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	81 bb       	out	0x11, r24	; 17
    16fc:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    16fe:	61 30       	cpi	r22, 0x01	; 1
    1700:	61 f4       	brne	.+24     	; 0x171a <DIO_setPinDir+0x114>
			SET_BIT(DDRD,pinNum);
    1702:	41 b3       	in	r20, 0x11	; 17
    1704:	21 e0       	ldi	r18, 0x01	; 1
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	b9 01       	movw	r22, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_setPinDir+0x10a>
    170c:	66 0f       	add	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	8a 95       	dec	r24
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_setPinDir+0x106>
    1714:	cb 01       	movw	r24, r22
    1716:	84 2b       	or	r24, r20
    1718:	81 bb       	out	0x11, r24	; 17
    171a:	08 95       	ret

0000171c <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    171c:	88 30       	cpi	r24, 0x08	; 8
    171e:	00 f5       	brcc	.+64     	; 0x1760 <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
    1720:	61 11       	cpse	r22, r1
    1722:	0e c0       	rjmp	.+28     	; 0x1740 <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
    1724:	4b b3       	in	r20, 0x1b	; 27
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	b9 01       	movw	r22, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_setPinValue+0x16>
    172e:	66 0f       	add	r22, r22
    1730:	77 1f       	adc	r23, r23
    1732:	8a 95       	dec	r24
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_setPinValue+0x12>
    1736:	cb 01       	movw	r24, r22
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8b bb       	out	0x1b, r24	; 27
    173e:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1740:	61 30       	cpi	r22, 0x01	; 1
    1742:	09 f0       	breq	.+2      	; 0x1746 <DIO_setPinValue+0x2a>
    1744:	75 c0       	rjmp	.+234    	; 0x1830 <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
    1746:	4b b3       	in	r20, 0x1b	; 27
    1748:	21 e0       	ldi	r18, 0x01	; 1
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	b9 01       	movw	r22, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_setPinValue+0x38>
    1750:	66 0f       	add	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	8a 95       	dec	r24
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_setPinValue+0x34>
    1758:	cb 01       	movw	r24, r22
    175a:	84 2b       	or	r24, r20
    175c:	8b bb       	out	0x1b, r24	; 27
    175e:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    1760:	98 ef       	ldi	r25, 0xF8	; 248
    1762:	98 0f       	add	r25, r24
    1764:	98 30       	cpi	r25, 0x08	; 8
    1766:	00 f5       	brcc	.+64     	; 0x17a8 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
    1768:	61 11       	cpse	r22, r1
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
    176c:	48 b3       	in	r20, 0x18	; 24
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	b9 01       	movw	r22, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_setPinValue+0x5e>
    1776:	66 0f       	add	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	9a 95       	dec	r25
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_setPinValue+0x5a>
    177e:	cb 01       	movw	r24, r22
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	88 bb       	out	0x18, r24	; 24
    1786:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1788:	61 30       	cpi	r22, 0x01	; 1
    178a:	09 f0       	breq	.+2      	; 0x178e <DIO_setPinValue+0x72>
    178c:	51 c0       	rjmp	.+162    	; 0x1830 <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
    178e:	48 b3       	in	r20, 0x18	; 24
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	b9 01       	movw	r22, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_setPinValue+0x80>
    1798:	66 0f       	add	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	9a 95       	dec	r25
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_setPinValue+0x7c>
    17a0:	cb 01       	movw	r24, r22
    17a2:	84 2b       	or	r24, r20
    17a4:	88 bb       	out	0x18, r24	; 24
    17a6:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    17a8:	90 ef       	ldi	r25, 0xF0	; 240
    17aa:	98 0f       	add	r25, r24
    17ac:	98 30       	cpi	r25, 0x08	; 8
    17ae:	f8 f4       	brcc	.+62     	; 0x17ee <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
    17b0:	61 11       	cpse	r22, r1
    17b2:	0e c0       	rjmp	.+28     	; 0x17d0 <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
    17b4:	45 b3       	in	r20, 0x15	; 21
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	b9 01       	movw	r22, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_setPinValue+0xa6>
    17be:	66 0f       	add	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	9a 95       	dec	r25
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_setPinValue+0xa2>
    17c6:	cb 01       	movw	r24, r22
    17c8:	80 95       	com	r24
    17ca:	84 23       	and	r24, r20
    17cc:	85 bb       	out	0x15, r24	; 21
    17ce:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    17d0:	61 30       	cpi	r22, 0x01	; 1
    17d2:	71 f5       	brne	.+92     	; 0x1830 <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
    17d4:	45 b3       	in	r20, 0x15	; 21
    17d6:	21 e0       	ldi	r18, 0x01	; 1
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	b9 01       	movw	r22, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_setPinValue+0xc6>
    17de:	66 0f       	add	r22, r22
    17e0:	77 1f       	adc	r23, r23
    17e2:	9a 95       	dec	r25
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_setPinValue+0xc2>
    17e6:	cb 01       	movw	r24, r22
    17e8:	84 2b       	or	r24, r20
    17ea:	85 bb       	out	0x15, r24	; 21
    17ec:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    17ee:	88 51       	subi	r24, 0x18	; 24
    17f0:	88 30       	cpi	r24, 0x08	; 8
    17f2:	f0 f4       	brcc	.+60     	; 0x1830 <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
    17f4:	61 11       	cpse	r22, r1
    17f6:	0e c0       	rjmp	.+28     	; 0x1814 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
    17f8:	42 b3       	in	r20, 0x12	; 18
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	b9 01       	movw	r22, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <DIO_setPinValue+0xea>
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	8a 95       	dec	r24
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <DIO_setPinValue+0xe6>
    180a:	cb 01       	movw	r24, r22
    180c:	80 95       	com	r24
    180e:	84 23       	and	r24, r20
    1810:	82 bb       	out	0x12, r24	; 18
    1812:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1814:	61 30       	cpi	r22, 0x01	; 1
    1816:	61 f4       	brne	.+24     	; 0x1830 <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
    1818:	42 b3       	in	r20, 0x12	; 18
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	b9 01       	movw	r22, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_setPinValue+0x10a>
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	8a 95       	dec	r24
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_setPinValue+0x106>
    182a:	cb 01       	movw	r24, r22
    182c:	84 2b       	or	r24, r20
    182e:	82 bb       	out	0x12, r24	; 18
    1830:	08 95       	ret

00001832 <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	58 f4       	brcc	.+22     	; 0x184c <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
    1836:	29 b3       	in	r18, 0x19	; 25
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	a9 01       	movw	r20, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_readPinValue+0x10>
    183e:	55 95       	asr	r21
    1840:	47 95       	ror	r20
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_readPinValue+0xc>
    1846:	ca 01       	movw	r24, r20
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
    184c:	28 ef       	ldi	r18, 0xF8	; 248
    184e:	28 0f       	add	r18, r24
    1850:	28 30       	cpi	r18, 0x08	; 8
    1852:	48 f4       	brcc	.+18     	; 0x1866 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
    1854:	86 b3       	in	r24, 0x16	; 22
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_readPinValue+0x2c>
    185a:	95 95       	asr	r25
    185c:	87 95       	ror	r24
    185e:	2a 95       	dec	r18
    1860:	e2 f7       	brpl	.-8      	; 0x185a <DIO_readPinValue+0x28>
    1862:	81 70       	andi	r24, 0x01	; 1
    1864:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
    1866:	20 ef       	ldi	r18, 0xF0	; 240
    1868:	28 0f       	add	r18, r24
    186a:	28 30       	cpi	r18, 0x08	; 8
    186c:	48 f4       	brcc	.+18     	; 0x1880 <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
    186e:	83 b3       	in	r24, 0x13	; 19
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <DIO_readPinValue+0x46>
    1874:	95 95       	asr	r25
    1876:	87 95       	ror	r24
    1878:	2a 95       	dec	r18
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <DIO_readPinValue+0x42>
    187c:	81 70       	andi	r24, 0x01	; 1
    187e:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
    1880:	28 ee       	ldi	r18, 0xE8	; 232
    1882:	28 0f       	add	r18, r24
    1884:	28 30       	cpi	r18, 0x08	; 8
    1886:	50 f4       	brcc	.+20     	; 0x189c <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
    1888:	90 b3       	in	r25, 0x10	; 16
    188a:	89 2f       	mov	r24, r25
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_readPinValue+0x62>
    1890:	95 95       	asr	r25
    1892:	87 95       	ror	r24
    1894:	2a 95       	dec	r18
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_readPinValue+0x5e>
    1898:	81 70       	andi	r24, 0x01	; 1
    189a:	08 95       	ret
	}
}
    189c:	08 95       	ret

0000189e <DIO_togglePinValue>:

void DIO_togglePinValue(u8 pinNum){
    189e:	cf 93       	push	r28
    18a0:	c8 2f       	mov	r28, r24
	DIO_setPinValue(pinNum,!DIO_readPinValue(pinNum));
    18a2:	0e 94 19 0c 	call	0x1832	; 0x1832 <DIO_readPinValue>
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	81 11       	cpse	r24, r1
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	8c 2f       	mov	r24, r28
    18ae:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_setPinValue>
}
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <EXT_int0Func>
    18dc:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <EXT_int0Func+0x1>
    18e0:	09 95       	icall
    18e2:	ff 91       	pop	r31
    18e4:	ef 91       	pop	r30
    18e6:	bf 91       	pop	r27
    18e8:	af 91       	pop	r26
    18ea:	9f 91       	pop	r25
    18ec:	8f 91       	pop	r24
    18ee:	7f 91       	pop	r23
    18f0:	6f 91       	pop	r22
    18f2:	5f 91       	pop	r21
    18f4:	4f 91       	pop	r20
    18f6:	3f 91       	pop	r19
    18f8:	2f 91       	pop	r18
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <__vector_2>:
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	11 24       	eor	r1, r1
    190e:	2f 93       	push	r18
    1910:	3f 93       	push	r19
    1912:	4f 93       	push	r20
    1914:	5f 93       	push	r21
    1916:	6f 93       	push	r22
    1918:	7f 93       	push	r23
    191a:	8f 93       	push	r24
    191c:	9f 93       	push	r25
    191e:	af 93       	push	r26
    1920:	bf 93       	push	r27
    1922:	ef 93       	push	r30
    1924:	ff 93       	push	r31
    1926:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <EXT_int1Func>
    192a:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <EXT_int1Func+0x1>
    192e:	09 95       	icall
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
	EXT_int2Func();
    1974:	e0 91 0f 07 	lds	r30, 0x070F	; 0x80070f <EXT_int2Func>
    1978:	f0 91 10 07 	lds	r31, 0x0710	; 0x800710 <EXT_int2Func+0x1>
    197c:	09 95       	icall
    197e:	ff 91       	pop	r31
    1980:	ef 91       	pop	r30
    1982:	bf 91       	pop	r27
    1984:	af 91       	pop	r26
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	7f 91       	pop	r23
    198c:	6f 91       	pop	r22
    198e:	5f 91       	pop	r21
    1990:	4f 91       	pop	r20
    1992:	3f 91       	pop	r19
    1994:	2f 91       	pop	r18
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	0f 90       	pop	r0
    199c:	1f 90       	pop	r1
    199e:	18 95       	reti

000019a0 <__vector_11>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
    19a0:	1f 92       	push	r1
    19a2:	0f 92       	push	r0
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	0f 92       	push	r0
    19a8:	11 24       	eor	r1, r1
    19aa:	2f 93       	push	r18
    19ac:	3f 93       	push	r19
    19ae:	4f 93       	push	r20
    19b0:	5f 93       	push	r21
    19b2:	6f 93       	push	r22
    19b4:	7f 93       	push	r23
    19b6:	8f 93       	push	r24
    19b8:	9f 93       	push	r25
    19ba:	af 93       	push	r26
    19bc:	bf 93       	push	r27
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31
    19c2:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <TIMER0_OvFunc>
    19c6:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <TIMER0_OvFunc+0x1>
    19ca:	09 95       	icall
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	bf 91       	pop	r27
    19d2:	af 91       	pop	r26
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	7f 91       	pop	r23
    19da:	6f 91       	pop	r22
    19dc:	5f 91       	pop	r21
    19de:	4f 91       	pop	r20
    19e0:	3f 91       	pop	r19
    19e2:	2f 91       	pop	r18
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
    19ee:	1f 92       	push	r1
    19f0:	0f 92       	push	r0
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	0f 92       	push	r0
    19f6:	11 24       	eor	r1, r1
    19f8:	2f 93       	push	r18
    19fa:	3f 93       	push	r19
    19fc:	4f 93       	push	r20
    19fe:	5f 93       	push	r21
    1a00:	6f 93       	push	r22
    1a02:	7f 93       	push	r23
    1a04:	8f 93       	push	r24
    1a06:	9f 93       	push	r25
    1a08:	af 93       	push	r26
    1a0a:	bf 93       	push	r27
    1a0c:	ef 93       	push	r30
    1a0e:	ff 93       	push	r31
	TIMER0_CTCFunc();
    1a10:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <TIMER0_CTCFunc>
    1a14:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <TIMER0_CTCFunc+0x1>
    1a18:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
    1a1a:	ff 91       	pop	r31
    1a1c:	ef 91       	pop	r30
    1a1e:	bf 91       	pop	r27
    1a20:	af 91       	pop	r26
    1a22:	9f 91       	pop	r25
    1a24:	8f 91       	pop	r24
    1a26:	7f 91       	pop	r23
    1a28:	6f 91       	pop	r22
    1a2a:	5f 91       	pop	r21
    1a2c:	4f 91       	pop	r20
    1a2e:	3f 91       	pop	r19
    1a30:	2f 91       	pop	r18
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	0f 90       	pop	r0
    1a38:	1f 90       	pop	r1
    1a3a:	18 95       	reti

00001a3c <__vector_6>:
}

//Vector Table Function that belongs to TIMER1
//number(in vector table) - 1
void __vector_6() __attribute__((signal));
void __vector_6(){
    1a3c:	1f 92       	push	r1
    1a3e:	0f 92       	push	r0
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	0f 92       	push	r0
    1a44:	11 24       	eor	r1, r1
    1a46:	2f 93       	push	r18
    1a48:	3f 93       	push	r19
    1a4a:	4f 93       	push	r20
    1a4c:	5f 93       	push	r21
    1a4e:	6f 93       	push	r22
    1a50:	7f 93       	push	r23
    1a52:	8f 93       	push	r24
    1a54:	9f 93       	push	r25
    1a56:	af 93       	push	r26
    1a58:	bf 93       	push	r27
    1a5a:	ef 93       	push	r30
    1a5c:	ff 93       	push	r31
	TIMER1_IcuFunc();
    1a5e:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <TIMER1_IcuFunc>
    1a62:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <TIMER1_IcuFunc+0x1>
    1a66:	09 95       	icall
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	bf 91       	pop	r27
    1a6e:	af 91       	pop	r26
    1a70:	9f 91       	pop	r25
    1a72:	8f 91       	pop	r24
    1a74:	7f 91       	pop	r23
    1a76:	6f 91       	pop	r22
    1a78:	5f 91       	pop	r21
    1a7a:	4f 91       	pop	r20
    1a7c:	3f 91       	pop	r19
    1a7e:	2f 91       	pop	r18
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_13>:
}

//Vector Table Function that belongs to UART_INT
//number(in vector table) - 1
void __vector_13() __attribute__((signal));
void __vector_13(){
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
	UART_INTFunc();
    1aac:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <UART_INTFunc>
    1ab0:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <UART_INTFunc+0x1>
    1ab4:	09 95       	icall
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti

00001ad8 <__udivmodhi4>:
    1ad8:	aa 1b       	sub	r26, r26
    1ada:	bb 1b       	sub	r27, r27
    1adc:	51 e1       	ldi	r21, 0x11	; 17
    1ade:	07 c0       	rjmp	.+14     	; 0x1aee <__udivmodhi4_ep>

00001ae0 <__udivmodhi4_loop>:
    1ae0:	aa 1f       	adc	r26, r26
    1ae2:	bb 1f       	adc	r27, r27
    1ae4:	a6 17       	cp	r26, r22
    1ae6:	b7 07       	cpc	r27, r23
    1ae8:	10 f0       	brcs	.+4      	; 0x1aee <__udivmodhi4_ep>
    1aea:	a6 1b       	sub	r26, r22
    1aec:	b7 0b       	sbc	r27, r23

00001aee <__udivmodhi4_ep>:
    1aee:	88 1f       	adc	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	5a 95       	dec	r21
    1af4:	a9 f7       	brne	.-22     	; 0x1ae0 <__udivmodhi4_loop>
    1af6:	80 95       	com	r24
    1af8:	90 95       	com	r25
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	08 95       	ret

00001b00 <memcpy>:
    1b00:	fb 01       	movw	r30, r22
    1b02:	dc 01       	movw	r26, r24
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <memcpy+0xa>
    1b06:	01 90       	ld	r0, Z+
    1b08:	0d 92       	st	X+, r0
    1b0a:	41 50       	subi	r20, 0x01	; 1
    1b0c:	50 40       	sbci	r21, 0x00	; 0
    1b0e:	d8 f7       	brcc	.-10     	; 0x1b06 <memcpy+0x6>
    1b10:	08 95       	ret

00001b12 <_exit>:
    1b12:	f8 94       	cli

00001b14 <__stop_program>:
    1b14:	ff cf       	rjmp	.-2      	; 0x1b14 <__stop_program>
