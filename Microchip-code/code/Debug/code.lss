
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000472  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f30  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000988  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2d  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065f  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d6  00000000  00000000  00003457  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00003e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_1>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_2>
   c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_10>
  2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 37 02 	jmp	0x46e	; 0x46e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
 */ 

#include "Sess24MOTOR/SERVO/SERVO_INT.h"

int main(){
	source_code();
  7c:	0e 94 43 00 	call	0x86	; 0x86 <source_code>
	return 0;
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <source_code>:
int source_code()
{	
	//motor pins
	
	//enable
	DIO_setPinDir(DIO_PIND5,DIO_OUTPUT);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	8d e1       	ldi	r24, 0x1D	; 29
  8a:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_setPinDir>
	
	GI_enable();
  8e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <GI_enable>
	
	TIMER1_initFastPwmMod14();
  92:	0e 94 c0 01 	call	0x380	; 0x380 <TIMER1_initFastPwmMod14>
	
	TIMER1_setFrequency(1000);
  96:	88 ee       	ldi	r24, 0xE8	; 232
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <TIMER1_setFrequency>
	
	TIMER1_setOcr(249);
  9e:	89 ef       	ldi	r24, 0xF9	; 249
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <TIMER1_setOcr>
		
	while (1)
	{
		TIMER1_setOcr(499);
  a6:	83 ef       	ldi	r24, 0xF3	; 243
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <TIMER1_setOcr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <source_code+0x2e>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <source_code+0x38>
  be:	00 00       	nop
		_delay_ms(1000);
		TIMER1_setOcr(249);
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <TIMER1_setOcr>
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <source_code+0x48>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <source_code+0x52>
  d8:	00 00       	nop
  da:	e5 cf       	rjmp	.-54     	; 0xa6 <source_code+0x20>

000000dc <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	00 f5       	brcc	.+64     	; 0x120 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
  e0:	61 11       	cpse	r22, r1
  e2:	0e c0       	rjmp	.+28     	; 0x100 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
  e4:	4a b3       	in	r20, 0x1a	; 26
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_setPinDir+0x16>
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	8a 95       	dec	r24
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_setPinDir+0x12>
  f6:	cb 01       	movw	r24, r22
  f8:	80 95       	com	r24
  fa:	84 23       	and	r24, r20
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	09 f0       	breq	.+2      	; 0x106 <DIO_setPinDir+0x2a>
 104:	75 c0       	rjmp	.+234    	; 0x1f0 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
 106:	4a b3       	in	r20, 0x1a	; 26
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_setPinDir+0x38>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_setPinDir+0x34>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 120:	98 ef       	ldi	r25, 0xF8	; 248
 122:	98 0f       	add	r25, r24
 124:	98 30       	cpi	r25, 0x08	; 8
 126:	00 f5       	brcc	.+64     	; 0x168 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 128:	61 11       	cpse	r22, r1
 12a:	0e c0       	rjmp	.+28     	; 0x148 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 12c:	47 b3       	in	r20, 0x17	; 23
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_setPinDir+0x5e>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	9a 95       	dec	r25
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_setPinDir+0x5a>
 13e:	cb 01       	movw	r24, r22
 140:	80 95       	com	r24
 142:	84 23       	and	r24, r20
 144:	87 bb       	out	0x17, r24	; 23
 146:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 148:	61 30       	cpi	r22, 0x01	; 1
 14a:	09 f0       	breq	.+2      	; 0x14e <DIO_setPinDir+0x72>
 14c:	51 c0       	rjmp	.+162    	; 0x1f0 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 14e:	47 b3       	in	r20, 0x17	; 23
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDir+0x80>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	9a 95       	dec	r25
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDir+0x7c>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	87 bb       	out	0x17, r24	; 23
 166:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 168:	90 ef       	ldi	r25, 0xF0	; 240
 16a:	98 0f       	add	r25, r24
 16c:	98 30       	cpi	r25, 0x08	; 8
 16e:	f8 f4       	brcc	.+62     	; 0x1ae <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 170:	61 11       	cpse	r22, r1
 172:	0e c0       	rjmp	.+28     	; 0x190 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 174:	44 b3       	in	r20, 0x14	; 20
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_setPinDir+0xa6>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	9a 95       	dec	r25
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_setPinDir+0xa2>
 186:	cb 01       	movw	r24, r22
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	84 bb       	out	0x14, r24	; 20
 18e:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	71 f5       	brne	.+92     	; 0x1f0 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 194:	44 b3       	in	r20, 0x14	; 20
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinDir+0xc6>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	9a 95       	dec	r25
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinDir+0xc2>
 1a6:	cb 01       	movw	r24, r22
 1a8:	84 2b       	or	r24, r20
 1aa:	84 bb       	out	0x14, r24	; 20
 1ac:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 1ae:	88 51       	subi	r24, 0x18	; 24
 1b0:	88 30       	cpi	r24, 0x08	; 8
 1b2:	f0 f4       	brcc	.+60     	; 0x1f0 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 1b4:	61 11       	cpse	r22, r1
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 1b8:	44 b3       	in	r20, 0x14	; 20
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	b9 01       	movw	r22, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_setPinDir+0xea>
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	8a 95       	dec	r24
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_setPinDir+0xe6>
 1ca:	cb 01       	movw	r24, r22
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	84 bb       	out	0x14, r24	; 20
 1d2:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 1d4:	61 30       	cpi	r22, 0x01	; 1
 1d6:	61 f4       	brne	.+24     	; 0x1f0 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 1d8:	44 b3       	in	r20, 0x14	; 20
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_setPinDir+0x10a>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_setPinDir+0x106>
 1ea:	cb 01       	movw	r24, r22
 1ec:	84 2b       	or	r24, r20
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	08 95       	ret

000001f2 <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
 214:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXT_int0Func>
 218:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXT_int0Func+0x1>
 21c:	09 95       	icall
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_2>:
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
 262:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 266:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26a:	09 95       	icall
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	EXT_int2Func();
 2b0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXT_int2Func>
 2b4:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXT_int2Func+0x1>
 2b8:	09 95       	icall
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <GI_enable>:
 */ 

#include "GI_INT.h"

void GI_enable(){
	SET_BIT(SREG,I);
 2dc:	8f b7       	in	r24, 0x3f	; 63
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	8f bf       	out	0x3f, r24	; 63
 2e2:	08 95       	ret

000002e4 <__vector_11>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
 306:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TIMER0_OvFunc>
 30a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TIMER0_OvFunc+0x1>
 30e:	09 95       	icall
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	TIMER0_CTCFunc();
 354:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER0_CTCFunc>
 358:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER0_CTCFunc+0x1>
 35c:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <TIMER1_initFastPwmMod14>:
#include "STD_TYPES.h"

void TIMER1_initFastPwmMod14()
{
	//select mode 14(Fast PWM)
	CLEAR_BIT(TCCR1A,WGM10);
 380:	8f b5       	in	r24, 0x2f	; 47
 382:	8e 7f       	andi	r24, 0xFE	; 254
 384:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
 386:	8f b5       	in	r24, 0x2f	; 47
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
 38c:	8e b5       	in	r24, 0x2e	; 46
 38e:	88 60       	ori	r24, 0x08	; 8
 390:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
 392:	8e b5       	in	r24, 0x2e	; 46
 394:	80 61       	ori	r24, 0x10	; 16
 396:	8e bd       	out	0x2e, r24	; 46
	
	//select non inverting
	CLEAR_BIT(TCCR1A,COM1A0);
 398:	8f b5       	in	r24, 0x2f	; 47
 39a:	8f 7b       	andi	r24, 0xBF	; 191
 39c:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
 39e:	8f b5       	in	r24, 0x2f	; 47
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	8f bd       	out	0x2f, r24	; 47
 3a4:	08 95       	ret

000003a6 <TIMER1_setOcr>:
}

void TIMER1_setOcr(u16 value)
{
	OCR1A = value;
 3a6:	9b bd       	out	0x2b, r25	; 43
 3a8:	8a bd       	out	0x2a, r24	; 42
 3aa:	08 95       	ret

000003ac <TIMER1_setFrequency>:
}

void TIMER1_setFrequency(u16 pwm_frequency)
{
	//f = 50 Hz
	ICR1 = (16000000/(pwm_frequency*64))-1;
 3ac:	00 24       	eor	r0, r0
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	07 94       	ror	r0
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	07 94       	ror	r0
 3ba:	98 2f       	mov	r25, r24
 3bc:	80 2d       	mov	r24, r0
 3be:	9c 01       	movw	r18, r24
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	74 e2       	ldi	r23, 0x24	; 36
 3c8:	84 ef       	ldi	r24, 0xF4	; 244
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__divmodsi4>
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	31 09       	sbc	r19, r1
 3d4:	37 bd       	out	0x27, r19	; 39
 3d6:	26 bd       	out	0x26, r18	; 38
	//top = 4999
	//ICR1 = 4999;
	
	//select prescaler = 64
	SET_BIT(TCCR1B,CS10);
 3d8:	8e b5       	in	r24, 0x2e	; 46
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS11);
 3de:	8e b5       	in	r24, 0x2e	; 46
 3e0:	82 60       	ori	r24, 0x02	; 2
 3e2:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,CS12);
 3e4:	8e b5       	in	r24, 0x2e	; 46
 3e6:	8b 7f       	andi	r24, 0xFB	; 251
 3e8:	8e bd       	out	0x2e, r24	; 46
 3ea:	08 95       	ret

000003ec <__divmodsi4>:
 3ec:	05 2e       	mov	r0, r21
 3ee:	97 fb       	bst	r25, 7
 3f0:	1e f4       	brtc	.+6      	; 0x3f8 <__divmodsi4+0xc>
 3f2:	00 94       	com	r0
 3f4:	0e 94 0d 02 	call	0x41a	; 0x41a <__negsi2>
 3f8:	57 fd       	sbrc	r21, 7
 3fa:	07 d0       	rcall	.+14     	; 0x40a <__divmodsi4_neg2>
 3fc:	0e 94 15 02 	call	0x42a	; 0x42a <__udivmodsi4>
 400:	07 fc       	sbrc	r0, 7
 402:	03 d0       	rcall	.+6      	; 0x40a <__divmodsi4_neg2>
 404:	4e f4       	brtc	.+18     	; 0x418 <__divmodsi4_exit>
 406:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__negsi2>

0000040a <__divmodsi4_neg2>:
 40a:	50 95       	com	r21
 40c:	40 95       	com	r20
 40e:	30 95       	com	r19
 410:	21 95       	neg	r18
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	4f 4f       	sbci	r20, 0xFF	; 255
 416:	5f 4f       	sbci	r21, 0xFF	; 255

00000418 <__divmodsi4_exit>:
 418:	08 95       	ret

0000041a <__negsi2>:
 41a:	90 95       	com	r25
 41c:	80 95       	com	r24
 41e:	70 95       	com	r23
 420:	61 95       	neg	r22
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	8f 4f       	sbci	r24, 0xFF	; 255
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	08 95       	ret

0000042a <__udivmodsi4>:
 42a:	a1 e2       	ldi	r26, 0x21	; 33
 42c:	1a 2e       	mov	r1, r26
 42e:	aa 1b       	sub	r26, r26
 430:	bb 1b       	sub	r27, r27
 432:	fd 01       	movw	r30, r26
 434:	0d c0       	rjmp	.+26     	; 0x450 <__udivmodsi4_ep>

00000436 <__udivmodsi4_loop>:
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	ee 1f       	adc	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	a2 17       	cp	r26, r18
 440:	b3 07       	cpc	r27, r19
 442:	e4 07       	cpc	r30, r20
 444:	f5 07       	cpc	r31, r21
 446:	20 f0       	brcs	.+8      	; 0x450 <__udivmodsi4_ep>
 448:	a2 1b       	sub	r26, r18
 44a:	b3 0b       	sbc	r27, r19
 44c:	e4 0b       	sbc	r30, r20
 44e:	f5 0b       	sbc	r31, r21

00000450 <__udivmodsi4_ep>:
 450:	66 1f       	adc	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	1a 94       	dec	r1
 45a:	69 f7       	brne	.-38     	; 0x436 <__udivmodsi4_loop>
 45c:	60 95       	com	r22
 45e:	70 95       	com	r23
 460:	80 95       	com	r24
 462:	90 95       	com	r25
 464:	9b 01       	movw	r18, r22
 466:	ac 01       	movw	r20, r24
 468:	bd 01       	movw	r22, r26
 46a:	cf 01       	movw	r24, r30
 46c:	08 95       	ret

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>
