
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000466  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c45  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a9  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000625  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064d  00000000  00000000  00002515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002b62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "Sess18\ses.h"

int main(){
	source_code();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <source_code>
	return 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <source_code>:
	
	u8 stop_state, reset_state;
	
	
	//7-seg_set
	SS_init();
  76:	0e 94 6c 00 	call	0xd8	; 0xd8 <SS_init>
	
	//stop button
	DIO_setPinDir(DIO_PINB0,DIO_INPUT);
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
	
	//reset button
	DIO_setPinDir(DIO_PIND2,DIO_INPUT);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	8a e1       	ldi	r24, 0x1A	; 26
  86:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
 */

#include "Sess18\ses.h"

int source_code()
{
  8a:	c0 e0       	ldi	r28, 0x00	; 0
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	10 e0       	ldi	r17, 0x00	; 0
			while (DIO_readPinValue(DIO_PINB0)==DIO_HIGH);
			counter++;
		}
		SS_writeNum(counter);*/
		
		SS_writeNum(counter);
  92:	81 2f       	mov	r24, r17
  94:	0e 94 85 00 	call	0x10a	; 0x10a <SS_writeNum>
		
		//timer delay without stopping the 7 seg
		timer++;
  98:	21 96       	adiw	r28, 0x01	; 1
		if (timer==500 && flage==0)
  9a:	c4 3f       	cpi	r28, 0xF4	; 244
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	d8 07       	cpc	r29, r24
  a0:	29 f4       	brne	.+10     	; 0xac <source_code+0x36>
  a2:	01 11       	cpse	r16, r1
  a4:	03 c0       	rjmp	.+6      	; 0xac <source_code+0x36>
		{
			counter++;
  a6:	1f 5f       	subi	r17, 0xFF	; 255
			timer = 0;
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//When the stop button is pressed
		stop_state = DIO_readPinValue(DIO_PINB0);
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_readPinValue>
		if (stop_state==DIO_HIGH)
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	31 f4       	brne	.+12     	; 0xc2 <source_code+0x4c>
		{
			flage = 1;
			while (DIO_readPinValue(DIO_PINB0)==DIO_HIGH);
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_readPinValue>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	d9 f3       	breq	.-10     	; 0xb6 <source_code+0x40>
		
		//When the stop button is pressed
		stop_state = DIO_readPinValue(DIO_PINB0);
		if (stop_state==DIO_HIGH)
		{
			flage = 1;
  c0:	01 e0       	ldi	r16, 0x01	; 1
			while (DIO_readPinValue(DIO_PINB0)==DIO_HIGH);
		}
		
		//When the reset button is pressed
		reset_state = DIO_readPinValue(DIO_PIND2);
  c2:	8a e1       	ldi	r24, 0x1A	; 26
  c4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_readPinValue>
		if (reset_state==DIO_HIGH)
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	19 f7       	brne	.-58     	; 0x92 <source_code+0x1c>
		{
			flage = 0;
			timer=0;
			counter = 0;
			while (DIO_readPinValue(DIO_PIND2)==DIO_HIGH);
  cc:	8a e1       	ldi	r24, 0x1A	; 26
  ce:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_readPinValue>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	d9 f3       	breq	.-10     	; 0xcc <source_code+0x56>
  d6:	d9 cf       	rjmp	.-78     	; 0x8a <source_code+0x14>

000000d8 <SS_init>:
 */ 

#include "SS_INT.h"

void SS_init(){
	DIO_setPinDir(SS_S0,DIO_OUTPUT);
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
	DIO_setPinDir(SS_S1,DIO_OUTPUT);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
	DIO_setPinDir(SS_S2,DIO_OUTPUT);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
	DIO_setPinDir(SS_S3,DIO_OUTPUT);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
	
	DIO_setPinDir(SS_ENABLE1,DIO_OUTPUT);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
	DIO_setPinDir(SS_ENABLE2,DIO_OUTPUT);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	89 e0       	ldi	r24, 0x09	; 9
 104:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_setPinDir>
 108:	08 95       	ret

0000010a <SS_writeNum>:
}

void SS_writeNum(u8 num){
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	18 2f       	mov	r17, r24
	//disable2
	DIO_setPinValue(SS_ENABLE2,DIO_LOW);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	
	//write num1
	u8 num1 = num/10;
 11a:	cd ec       	ldi	r28, 0xCD	; 205
 11c:	1c 9f       	mul	r17, r28
 11e:	c1 2d       	mov	r28, r1
 120:	11 24       	eor	r1, r1
 122:	c6 95       	lsr	r28
 124:	c6 95       	lsr	r28
 126:	c6 95       	lsr	r28
	DIO_setPinValue(SS_S0,GET_BIT(num1,0));
 128:	6c 2f       	mov	r22, r28
 12a:	61 70       	andi	r22, 0x01	; 1
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	DIO_setPinValue(SS_S1,GET_BIT(num1,1));
 132:	c1 fb       	bst	r28, 1
 134:	66 27       	eor	r22, r22
 136:	60 f9       	bld	r22, 0
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	DIO_setPinValue(SS_S2,GET_BIT(num1,2));
 13e:	c2 fb       	bst	r28, 2
 140:	66 27       	eor	r22, r22
 142:	60 f9       	bld	r22, 0
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	DIO_setPinValue(SS_S3,GET_BIT(num1,3));
 14a:	c3 fb       	bst	r28, 3
 14c:	66 27       	eor	r22, r22
 14e:	60 f9       	bld	r22, 0
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	
	//enable1
	DIO_setPinValue(SS_ENABLE1,DIO_HIGH);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <SS_writeNum+0x58>
 166:	00 c0       	rjmp	.+0      	; 0x168 <SS_writeNum+0x5e>
 168:	00 00       	nop
	_delay_ms(1);
	
	//disable1
	DIO_setPinValue(SS_ENABLE1,DIO_LOW);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	//write num2
	u8 num2 = num%10;
 172:	cc 0f       	add	r28, r28
 174:	8c 2f       	mov	r24, r28
 176:	88 0f       	add	r24, r24
 178:	88 0f       	add	r24, r24
 17a:	c8 0f       	add	r28, r24
 17c:	d1 2f       	mov	r29, r17
 17e:	dc 1b       	sub	r29, r28
	DIO_setPinValue(SS_S0,GET_BIT(num2,0));
 180:	6d 2f       	mov	r22, r29
 182:	61 70       	andi	r22, 0x01	; 1
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	DIO_setPinValue(SS_S1,GET_BIT(num2,1));
 18a:	d1 fb       	bst	r29, 1
 18c:	66 27       	eor	r22, r22
 18e:	60 f9       	bld	r22, 0
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	DIO_setPinValue(SS_S2,GET_BIT(num2,2));
 196:	d2 fb       	bst	r29, 2
 198:	66 27       	eor	r22, r22
 19a:	60 f9       	bld	r22, 0
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	DIO_setPinValue(SS_S3,GET_BIT(num2,3));
 1a2:	d3 fb       	bst	r29, 3
 1a4:	66 27       	eor	r22, r22
 1a6:	60 f9       	bld	r22, 0
 1a8:	87 e0       	ldi	r24, 0x07	; 7
 1aa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
	
	//enable2
	DIO_setPinValue(SS_ENABLE2,DIO_HIGH);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	89 e0       	ldi	r24, 0x09	; 9
 1b2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_setPinValue>
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <SS_writeNum+0xb0>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <SS_writeNum+0xb6>
 1c0:	00 00       	nop
	_delay_ms(1);
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	08 95       	ret

000001ca <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 1ca:	88 30       	cpi	r24, 0x08	; 8
 1cc:	00 f5       	brcc	.+64     	; 0x20e <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 1ce:	61 11       	cpse	r22, r1
 1d0:	0e c0       	rjmp	.+28     	; 0x1ee <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 1d2:	4a b3       	in	r20, 0x1a	; 26
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	b9 01       	movw	r22, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_setPinDir+0x16>
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	8a 95       	dec	r24
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_setPinDir+0x12>
 1e4:	cb 01       	movw	r24, r22
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8a bb       	out	0x1a, r24	; 26
 1ec:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <DIO_setPinDir+0x2a>
 1f2:	75 c0       	rjmp	.+234    	; 0x2de <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
 1f4:	4a b3       	in	r20, 0x1a	; 26
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_setPinDir+0x38>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_setPinDir+0x34>
 206:	cb 01       	movw	r24, r22
 208:	84 2b       	or	r24, r20
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 20e:	98 ef       	ldi	r25, 0xF8	; 248
 210:	98 0f       	add	r25, r24
 212:	98 30       	cpi	r25, 0x08	; 8
 214:	00 f5       	brcc	.+64     	; 0x256 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 216:	61 11       	cpse	r22, r1
 218:	0e c0       	rjmp	.+28     	; 0x236 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 21a:	47 b3       	in	r20, 0x17	; 23
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_setPinDir+0x5e>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	9a 95       	dec	r25
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_setPinDir+0x5a>
 22c:	cb 01       	movw	r24, r22
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	87 bb       	out	0x17, r24	; 23
 234:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 236:	61 30       	cpi	r22, 0x01	; 1
 238:	09 f0       	breq	.+2      	; 0x23c <DIO_setPinDir+0x72>
 23a:	51 c0       	rjmp	.+162    	; 0x2de <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 23c:	47 b3       	in	r20, 0x17	; 23
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	b9 01       	movw	r22, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_setPinDir+0x80>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	9a 95       	dec	r25
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_setPinDir+0x7c>
 24e:	cb 01       	movw	r24, r22
 250:	84 2b       	or	r24, r20
 252:	87 bb       	out	0x17, r24	; 23
 254:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 256:	90 ef       	ldi	r25, 0xF0	; 240
 258:	98 0f       	add	r25, r24
 25a:	98 30       	cpi	r25, 0x08	; 8
 25c:	f8 f4       	brcc	.+62     	; 0x29c <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 25e:	61 11       	cpse	r22, r1
 260:	0e c0       	rjmp	.+28     	; 0x27e <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 262:	44 b3       	in	r20, 0x14	; 20
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_setPinDir+0xa6>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	9a 95       	dec	r25
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_setPinDir+0xa2>
 274:	cb 01       	movw	r24, r22
 276:	80 95       	com	r24
 278:	84 23       	and	r24, r20
 27a:	84 bb       	out	0x14, r24	; 20
 27c:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 27e:	61 30       	cpi	r22, 0x01	; 1
 280:	71 f5       	brne	.+92     	; 0x2de <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 282:	44 b3       	in	r20, 0x14	; 20
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_setPinDir+0xc6>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	9a 95       	dec	r25
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_setPinDir+0xc2>
 294:	cb 01       	movw	r24, r22
 296:	84 2b       	or	r24, r20
 298:	84 bb       	out	0x14, r24	; 20
 29a:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 29c:	88 51       	subi	r24, 0x18	; 24
 29e:	88 30       	cpi	r24, 0x08	; 8
 2a0:	f0 f4       	brcc	.+60     	; 0x2de <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 2a2:	61 11       	cpse	r22, r1
 2a4:	0e c0       	rjmp	.+28     	; 0x2c2 <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 2a6:	44 b3       	in	r20, 0x14	; 20
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_setPinDir+0xea>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_setPinDir+0xe6>
 2b8:	cb 01       	movw	r24, r22
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	84 bb       	out	0x14, r24	; 20
 2c0:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 2c2:	61 30       	cpi	r22, 0x01	; 1
 2c4:	61 f4       	brne	.+24     	; 0x2de <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 2c6:	44 b3       	in	r20, 0x14	; 20
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_setPinDir+0x10a>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_setPinDir+0x106>
 2d8:	cb 01       	movw	r24, r22
 2da:	84 2b       	or	r24, r20
 2dc:	84 bb       	out	0x14, r24	; 20
 2de:	08 95       	ret

000002e0 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 2e0:	88 30       	cpi	r24, 0x08	; 8
 2e2:	00 f5       	brcc	.+64     	; 0x324 <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 2e4:	61 11       	cpse	r22, r1
 2e6:	0e c0       	rjmp	.+28     	; 0x304 <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 2e8:	4b b3       	in	r20, 0x1b	; 27
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	b9 01       	movw	r22, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_setPinValue+0x16>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	8a 95       	dec	r24
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_setPinValue+0x12>
 2fa:	cb 01       	movw	r24, r22
 2fc:	80 95       	com	r24
 2fe:	84 23       	and	r24, r20
 300:	8b bb       	out	0x1b, r24	; 27
 302:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 304:	61 30       	cpi	r22, 0x01	; 1
 306:	09 f0       	breq	.+2      	; 0x30a <DIO_setPinValue+0x2a>
 308:	75 c0       	rjmp	.+234    	; 0x3f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 30a:	4b b3       	in	r20, 0x1b	; 27
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	b9 01       	movw	r22, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_setPinValue+0x38>
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	8a 95       	dec	r24
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_setPinValue+0x34>
 31c:	cb 01       	movw	r24, r22
 31e:	84 2b       	or	r24, r20
 320:	8b bb       	out	0x1b, r24	; 27
 322:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 324:	98 ef       	ldi	r25, 0xF8	; 248
 326:	98 0f       	add	r25, r24
 328:	98 30       	cpi	r25, 0x08	; 8
 32a:	00 f5       	brcc	.+64     	; 0x36c <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 32c:	61 11       	cpse	r22, r1
 32e:	0e c0       	rjmp	.+28     	; 0x34c <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 330:	48 b3       	in	r20, 0x18	; 24
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	b9 01       	movw	r22, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_setPinValue+0x5e>
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	9a 95       	dec	r25
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_setPinValue+0x5a>
 342:	cb 01       	movw	r24, r22
 344:	80 95       	com	r24
 346:	84 23       	and	r24, r20
 348:	88 bb       	out	0x18, r24	; 24
 34a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 34c:	61 30       	cpi	r22, 0x01	; 1
 34e:	09 f0       	breq	.+2      	; 0x352 <DIO_setPinValue+0x72>
 350:	51 c0       	rjmp	.+162    	; 0x3f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 352:	48 b3       	in	r20, 0x18	; 24
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_setPinValue+0x80>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	9a 95       	dec	r25
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_setPinValue+0x7c>
 364:	cb 01       	movw	r24, r22
 366:	84 2b       	or	r24, r20
 368:	88 bb       	out	0x18, r24	; 24
 36a:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 36c:	90 ef       	ldi	r25, 0xF0	; 240
 36e:	98 0f       	add	r25, r24
 370:	98 30       	cpi	r25, 0x08	; 8
 372:	f8 f4       	brcc	.+62     	; 0x3b2 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 374:	61 11       	cpse	r22, r1
 376:	0e c0       	rjmp	.+28     	; 0x394 <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 378:	45 b3       	in	r20, 0x15	; 21
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_setPinValue+0xa6>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	9a 95       	dec	r25
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_setPinValue+0xa2>
 38a:	cb 01       	movw	r24, r22
 38c:	80 95       	com	r24
 38e:	84 23       	and	r24, r20
 390:	85 bb       	out	0x15, r24	; 21
 392:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 394:	61 30       	cpi	r22, 0x01	; 1
 396:	71 f5       	brne	.+92     	; 0x3f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 398:	45 b3       	in	r20, 0x15	; 21
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_setPinValue+0xc6>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	9a 95       	dec	r25
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_setPinValue+0xc2>
 3aa:	cb 01       	movw	r24, r22
 3ac:	84 2b       	or	r24, r20
 3ae:	85 bb       	out	0x15, r24	; 21
 3b0:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 3b2:	88 51       	subi	r24, 0x18	; 24
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	f0 f4       	brcc	.+60     	; 0x3f4 <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 3b8:	61 11       	cpse	r22, r1
 3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 3bc:	42 b3       	in	r20, 0x12	; 18
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	b9 01       	movw	r22, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_setPinValue+0xea>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_setPinValue+0xe6>
 3ce:	cb 01       	movw	r24, r22
 3d0:	80 95       	com	r24
 3d2:	84 23       	and	r24, r20
 3d4:	82 bb       	out	0x12, r24	; 18
 3d6:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 3d8:	61 30       	cpi	r22, 0x01	; 1
 3da:	61 f4       	brne	.+24     	; 0x3f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 3dc:	42 b3       	in	r20, 0x12	; 18
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_setPinValue+0x10a>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_setPinValue+0x106>
 3ee:	cb 01       	movw	r24, r22
 3f0:	84 2b       	or	r24, r20
 3f2:	82 bb       	out	0x12, r24	; 18
 3f4:	08 95       	ret

000003f6 <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 3f6:	88 30       	cpi	r24, 0x08	; 8
 3f8:	58 f4       	brcc	.+22     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{
		return GET_BIT(PINA,pinNum);
 3fa:	29 b3       	in	r18, 0x19	; 25
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	a9 01       	movw	r20, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	55 95       	asr	r21
 404:	47 95       	ror	r20
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	ca 01       	movw	r24, r20
 40c:	81 70       	andi	r24, 0x01	; 1
 40e:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 410:	28 ef       	ldi	r18, 0xF8	; 248
 412:	28 0f       	add	r18, r24
 414:	28 30       	cpi	r18, 0x08	; 8
 416:	48 f4       	brcc	.+18     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 418:	86 b3       	in	r24, 0x16	; 22
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	95 95       	asr	r25
 420:	87 95       	ror	r24
 422:	2a 95       	dec	r18
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	81 70       	andi	r24, 0x01	; 1
 428:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 42a:	20 ef       	ldi	r18, 0xF0	; 240
 42c:	28 0f       	add	r18, r24
 42e:	28 30       	cpi	r18, 0x08	; 8
 430:	48 f4       	brcc	.+18     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 432:	83 b3       	in	r24, 0x13	; 19
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	95 95       	asr	r25
 43a:	87 95       	ror	r24
 43c:	2a 95       	dec	r18
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	81 70       	andi	r24, 0x01	; 1
 442:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 444:	28 ee       	ldi	r18, 0xE8	; 232
 446:	28 0f       	add	r18, r24
 448:	28 30       	cpi	r18, 0x08	; 8
 44a:	50 f4       	brcc	.+20     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 44c:	90 b3       	in	r25, 0x10	; 16
 44e:	89 2f       	mov	r24, r25
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 454:	95 95       	asr	r25
 456:	87 95       	ror	r24
 458:	2a 95       	dec	r18
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 45c:	81 70       	andi	r24, 0x01	; 1
 45e:	08 95       	ret
	}
}
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
