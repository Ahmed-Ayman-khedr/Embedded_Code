
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000838  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000447  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ba  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043b  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001fdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL
#include<util/delay.h>

int main(void)
{
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	82 e1       	ldi	r24, 0x12	; 18
  70:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_setPinDir>
	DIO_setPinDir(DIO_PINB2,DIO_INPUT);
  74:	60 e0       	ldi	r22, 0x00	; 0
  76:	8a e0       	ldi	r24, 0x0A	; 10
  78:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_setPinDir>
	DIO_setPullUp(DIO_PINB2);
  7c:	8a e0       	ldi	r24, 0x0A	; 10
  7e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_setPullUp>
	//	if (state== DIO_HIGH)
		//{
			
			//DIO_togglePinValue(DIO_PINB2);
		//}
		 if (DIO_readPinValue(DIO_PINB2) == DIO_LOW)
  82:	8a e0       	ldi	r24, 0x0A	; 10
  84:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_readPinValue>
  88:	81 11       	cpse	r24, r1
  8a:	0d c0       	rjmp	.+26     	; 0xa6 <main+0x3a>
		 {
			DIO_setPinValue(DIO_PINC2,DIO_HIGH);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	82 e1       	ldi	r24, 0x12	; 18
  90:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	89 e6       	ldi	r24, 0x69	; 105
  98:	98 e1       	ldi	r25, 0x18	; 24
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
			//DIO_togglePinValue(DIO_PINB2);
			_delay_ms(500);
		}
		DIO_setPinValue(DIO_PINC2,DIO_LOW);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	82 e1       	ldi	r24, 0x12	; 18
  aa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinValue>
	}
  ae:	e9 cf       	rjmp	.-46     	; 0x82 <main+0x16>

000000b0 <DIO_setPinDir>:
 */ 

#include "DIO_INT.h"
void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	00 f5       	brcc	.+64     	; 0xf4 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
  b4:	61 11       	cpse	r22, r1
  b6:	0e c0       	rjmp	.+28     	; 0xd4 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
  b8:	4a b3       	in	r20, 0x1a	; 26
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	b9 01       	movw	r22, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDir+0x16>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDir+0x12>
  ca:	cb 01       	movw	r24, r22
  cc:	80 95       	com	r24
  ce:	84 23       	and	r24, r20
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	09 f0       	breq	.+2      	; 0xda <DIO_setPinDir+0x2a>
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
  da:	4a b3       	in	r20, 0x1a	; 26
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	b9 01       	movw	r22, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDir+0x38>
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	8a 95       	dec	r24
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDir+0x34>
  ec:	cb 01       	movw	r24, r22
  ee:	84 2b       	or	r24, r20
  f0:	8a bb       	out	0x1a, r24	; 26
  f2:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
  f4:	98 ef       	ldi	r25, 0xF8	; 248
  f6:	98 0f       	add	r25, r24
  f8:	98 30       	cpi	r25, 0x08	; 8
  fa:	00 f5       	brcc	.+64     	; 0x13c <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
  fc:	61 11       	cpse	r22, r1
  fe:	0e c0       	rjmp	.+28     	; 0x11c <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 100:	47 b3       	in	r20, 0x17	; 23
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPinDir+0x5e>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	9a 95       	dec	r25
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPinDir+0x5a>
 112:	cb 01       	movw	r24, r22
 114:	80 95       	com	r24
 116:	84 23       	and	r24, r20
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	09 f0       	breq	.+2      	; 0x122 <DIO_setPinDir+0x72>
 120:	51 c0       	rjmp	.+162    	; 0x1c4 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 122:	47 b3       	in	r20, 0x17	; 23
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDir+0x80>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	9a 95       	dec	r25
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDir+0x7c>
 134:	cb 01       	movw	r24, r22
 136:	84 2b       	or	r24, r20
 138:	87 bb       	out	0x17, r24	; 23
 13a:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 13c:	90 ef       	ldi	r25, 0xF0	; 240
 13e:	98 0f       	add	r25, r24
 140:	98 30       	cpi	r25, 0x08	; 8
 142:	f8 f4       	brcc	.+62     	; 0x182 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 144:	61 11       	cpse	r22, r1
 146:	0e c0       	rjmp	.+28     	; 0x164 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 148:	44 b3       	in	r20, 0x14	; 20
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_setPinDir+0xa6>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_setPinDir+0xa2>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	84 bb       	out	0x14, r24	; 20
 162:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	71 f5       	brne	.+92     	; 0x1c4 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 168:	44 b3       	in	r20, 0x14	; 20
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_setPinDir+0xc6>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	9a 95       	dec	r25
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_setPinDir+0xc2>
 17a:	cb 01       	movw	r24, r22
 17c:	84 2b       	or	r24, r20
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 182:	88 51       	subi	r24, 0x18	; 24
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	f0 f4       	brcc	.+60     	; 0x1c4 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 188:	61 11       	cpse	r22, r1
 18a:	0e c0       	rjmp	.+28     	; 0x1a8 <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 18c:	44 b3       	in	r20, 0x14	; 20
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinDir+0xea>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinDir+0xe6>
 19e:	cb 01       	movw	r24, r22
 1a0:	80 95       	com	r24
 1a2:	84 23       	and	r24, r20
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	61 f4       	brne	.+24     	; 0x1c4 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 1ac:	44 b3       	in	r20, 0x14	; 20
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setPinDir+0x10a>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setPinDir+0x106>
 1be:	cb 01       	movw	r24, r22
 1c0:	84 2b       	or	r24, r20
 1c2:	84 bb       	out	0x14, r24	; 20
 1c4:	08 95       	ret

000001c6 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 1c6:	88 30       	cpi	r24, 0x08	; 8
 1c8:	00 f5       	brcc	.+64     	; 0x20a <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 1ca:	61 11       	cpse	r22, r1
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 1ce:	4b b3       	in	r20, 0x1b	; 27
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_setPinValue+0x16>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_setPinValue+0x12>
 1e0:	cb 01       	movw	r24, r22
 1e2:	80 95       	com	r24
 1e4:	84 23       	and	r24, r20
 1e6:	8b bb       	out	0x1b, r24	; 27
 1e8:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 1ea:	61 30       	cpi	r22, 0x01	; 1
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <DIO_setPinValue+0x2a>
 1ee:	75 c0       	rjmp	.+234    	; 0x2da <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 1f0:	4b b3       	in	r20, 0x1b	; 27
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_setPinValue+0x38>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_setPinValue+0x34>
 202:	cb 01       	movw	r24, r22
 204:	84 2b       	or	r24, r20
 206:	8b bb       	out	0x1b, r24	; 27
 208:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 20a:	98 ef       	ldi	r25, 0xF8	; 248
 20c:	98 0f       	add	r25, r24
 20e:	98 30       	cpi	r25, 0x08	; 8
 210:	00 f5       	brcc	.+64     	; 0x252 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 212:	61 11       	cpse	r22, r1
 214:	0e c0       	rjmp	.+28     	; 0x232 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 216:	48 b3       	in	r20, 0x18	; 24
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_setPinValue+0x5e>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	9a 95       	dec	r25
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_setPinValue+0x5a>
 228:	cb 01       	movw	r24, r22
 22a:	80 95       	com	r24
 22c:	84 23       	and	r24, r20
 22e:	88 bb       	out	0x18, r24	; 24
 230:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	09 f0       	breq	.+2      	; 0x238 <DIO_setPinValue+0x72>
 236:	51 c0       	rjmp	.+162    	; 0x2da <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 238:	48 b3       	in	r20, 0x18	; 24
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_setPinValue+0x80>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	9a 95       	dec	r25
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_setPinValue+0x7c>
 24a:	cb 01       	movw	r24, r22
 24c:	84 2b       	or	r24, r20
 24e:	88 bb       	out	0x18, r24	; 24
 250:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 252:	90 ef       	ldi	r25, 0xF0	; 240
 254:	98 0f       	add	r25, r24
 256:	98 30       	cpi	r25, 0x08	; 8
 258:	f8 f4       	brcc	.+62     	; 0x298 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 25a:	61 11       	cpse	r22, r1
 25c:	0e c0       	rjmp	.+28     	; 0x27a <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 25e:	45 b3       	in	r20, 0x15	; 21
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	b9 01       	movw	r22, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_setPinValue+0xa6>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	9a 95       	dec	r25
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_setPinValue+0xa2>
 270:	cb 01       	movw	r24, r22
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	85 bb       	out	0x15, r24	; 21
 278:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 27a:	61 30       	cpi	r22, 0x01	; 1
 27c:	71 f5       	brne	.+92     	; 0x2da <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 27e:	45 b3       	in	r20, 0x15	; 21
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_setPinValue+0xc6>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	9a 95       	dec	r25
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_setPinValue+0xc2>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 298:	88 51       	subi	r24, 0x18	; 24
 29a:	88 30       	cpi	r24, 0x08	; 8
 29c:	f0 f4       	brcc	.+60     	; 0x2da <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 29e:	61 11       	cpse	r22, r1
 2a0:	0e c0       	rjmp	.+28     	; 0x2be <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 2a2:	42 b3       	in	r20, 0x12	; 18
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_setPinValue+0xea>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_setPinValue+0xe6>
 2b4:	cb 01       	movw	r24, r22
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	82 bb       	out	0x12, r24	; 18
 2bc:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 2be:	61 30       	cpi	r22, 0x01	; 1
 2c0:	61 f4       	brne	.+24     	; 0x2da <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 2c2:	42 b3       	in	r20, 0x12	; 18
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_setPinValue+0x10a>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_setPinValue+0x106>
 2d4:	cb 01       	movw	r24, r22
 2d6:	84 2b       	or	r24, r20
 2d8:	82 bb       	out	0x12, r24	; 18
 2da:	08 95       	ret

000002dc <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	58 f4       	brcc	.+22     	; 0x2f6 <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
 2e0:	29 b3       	in	r18, 0x19	; 25
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a9 01       	movw	r20, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_readPinValue+0x10>
 2e8:	55 95       	asr	r21
 2ea:	47 95       	ror	r20
 2ec:	8a 95       	dec	r24
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_readPinValue+0xc>
 2f0:	ca 01       	movw	r24, r20
 2f2:	81 70       	andi	r24, 0x01	; 1
 2f4:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 2f6:	28 ef       	ldi	r18, 0xF8	; 248
 2f8:	28 0f       	add	r18, r24
 2fa:	28 30       	cpi	r18, 0x08	; 8
 2fc:	48 f4       	brcc	.+18     	; 0x310 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 2fe:	86 b3       	in	r24, 0x16	; 22
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_readPinValue+0x2c>
 304:	95 95       	asr	r25
 306:	87 95       	ror	r24
 308:	2a 95       	dec	r18
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_readPinValue+0x28>
 30c:	81 70       	andi	r24, 0x01	; 1
 30e:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 310:	20 ef       	ldi	r18, 0xF0	; 240
 312:	28 0f       	add	r18, r24
 314:	28 30       	cpi	r18, 0x08	; 8
 316:	48 f4       	brcc	.+18     	; 0x32a <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 318:	83 b3       	in	r24, 0x13	; 19
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_readPinValue+0x46>
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	2a 95       	dec	r18
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_readPinValue+0x42>
 326:	81 70       	andi	r24, 0x01	; 1
 328:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 32a:	28 ee       	ldi	r18, 0xE8	; 232
 32c:	28 0f       	add	r18, r24
 32e:	28 30       	cpi	r18, 0x08	; 8
 330:	50 f4       	brcc	.+20     	; 0x346 <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 332:	90 b3       	in	r25, 0x10	; 16
 334:	89 2f       	mov	r24, r25
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_readPinValue+0x62>
 33a:	95 95       	asr	r25
 33c:	87 95       	ror	r24
 33e:	2a 95       	dec	r18
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_readPinValue+0x5e>
 342:	81 70       	andi	r24, 0x01	; 1
 344:	08 95       	ret
	}
}
 346:	08 95       	ret

00000348 <DIO_setPullUp>:

void DIO_setPullUp(u8 pinNum){
	DIO_setPinValue(pinNum,DIO_HIGH);
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinValue>
 34e:	08 95       	ret

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
