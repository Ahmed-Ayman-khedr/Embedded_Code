
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000063c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a8  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000873  00000000  00000000  000021d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000936  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 1c 03 	jmp	0x638	; 0x638 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "BIT_MATH.h"

#include "Sess18/ASG2/ASS_INT.h"

int main(){
	source_code();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <source_code>
	return 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <source_code>:
#include "Sess18\ASG2\ASS_INT.h"

int source_code()
{
	//LCD initialization
	LCD_int();
  76:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_int>
	//Counter
	s8 counter=0;
	
	//Increment button
	u8 increment_state;
	DIO_setPinDir(DIO_PIND0,DIO_OUTPUT);
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	88 e1       	ldi	r24, 0x18	; 24
  7e:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
	
	//Decrement button
	u8 decrement_state;
	DIO_setPinDir(DIO_PIND6,DIO_OUTPUT);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	8e e1       	ldi	r24, 0x1E	; 30
  86:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
	
	//clear and start display at 0
	LCD_clearDis();
  8a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_clearDis>
	LCD_sendNum(counter);
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_sendNum>
{
	//LCD initialization
	LCD_int();
	
	//Counter
	s8 counter=0;
  96:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_clearDis();
	LCD_sendNum(counter);
	while (1)
	{
		//Increment button
		increment_state = DIO_readPinValue(DIO_PIND0);
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_readPinValue>
		if (increment_state==DIO_HIGH && counter<9)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	81 f4       	brne	.+32     	; 0xc2 <source_code+0x4c>
  a2:	c9 30       	cpi	r28, 0x09	; 9
  a4:	74 f4       	brge	.+28     	; 0xc2 <source_code+0x4c>
		{
			counter++;
  a6:	cf 5f       	subi	r28, 0xFF	; 255
			LCD_clearDis();
  a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_clearDis>
			while (DIO_readPinValue(DIO_PIND0)==DIO_HIGH);
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_readPinValue>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	d9 f3       	breq	.-10     	; 0xac <source_code+0x36>
			LCD_sendNum(counter);
  b6:	8c 2f       	mov	r24, r28
  b8:	0c 2e       	mov	r0, r28
  ba:	00 0c       	add	r0, r0
  bc:	99 0b       	sbc	r25, r25
  be:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_sendNum>
		}
		
		//Decrement button
		decrement_state = DIO_readPinValue(DIO_PIND6);
  c2:	8e e1       	ldi	r24, 0x1E	; 30
  c4:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_readPinValue>
		if (decrement_state==DIO_HIGH  && counter>0)
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	31 f7       	brne	.-52     	; 0x98 <source_code+0x22>
  cc:	1c 16       	cp	r1, r28
  ce:	24 f7       	brge	.-56     	; 0x98 <source_code+0x22>
		{
			counter--;
  d0:	c1 50       	subi	r28, 0x01	; 1
			LCD_clearDis();
  d2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_clearDis>
			while (DIO_readPinValue(DIO_PIND6)==DIO_HIGH);
  d6:	8e e1       	ldi	r24, 0x1E	; 30
  d8:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_readPinValue>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	d9 f3       	breq	.-10     	; 0xd6 <source_code+0x60>
			if (counter==-1)
  e0:	cf 3f       	cpi	r28, 0xFF	; 255
  e2:	09 f4       	brne	.+2      	; 0xe6 <source_code+0x70>
			{
				counter=0;
  e4:	c0 e0       	ldi	r28, 0x00	; 0
			}
			LCD_sendNum(counter);
  e6:	8c 2f       	mov	r24, r28
  e8:	0c 2e       	mov	r0, r28
  ea:	00 0c       	add	r0, r0
  ec:	99 0b       	sbc	r25, r25
  ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_sendNum>
  f2:	d2 cf       	rjmp	.-92     	; 0x98 <source_code+0x22>

000000f4 <LCD_Instruction>:
	{
		LCD_sendData(str[i]);
		i++;
	}
	
}
  f4:	84 34       	cpi	r24, 0x44	; 68
  f6:	49 f4       	brne	.+18     	; 0x10a <LCD_Instruction+0x16>
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	89 e0       	ldi	r24, 0x09	; 9
 104:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 108:	08 95       	ret
 10a:	83 34       	cpi	r24, 0x43	; 67
 10c:	41 f4       	brne	.+16     	; 0x11e <LCD_Instruction+0x2a>
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	8a e0       	ldi	r24, 0x0A	; 10
 112:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	89 e0       	ldi	r24, 0x09	; 9
 11a:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 11e:	08 95       	ret

00000120 <LCD_pulse>:
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	8b e0       	ldi	r24, 0x0B	; 11
 124:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 128:	8f e9       	ldi	r24, 0x9F	; 159
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_pulse+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_pulse+0x12>
 132:	00 00       	nop
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 13c:	08 95       	ret

0000013e <LCD_sendData>:
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
 142:	84 e4       	ldi	r24, 0x44	; 68
 144:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_Instruction>
 148:	c4 fb       	bst	r28, 4
 14a:	66 27       	eor	r22, r22
 14c:	60 f9       	bld	r22, 0
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 154:	c5 fb       	bst	r28, 5
 156:	66 27       	eor	r22, r22
 158:	60 f9       	bld	r22, 0
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 160:	c6 fb       	bst	r28, 6
 162:	66 27       	eor	r22, r22
 164:	60 f9       	bld	r22, 0
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 16c:	6c 2f       	mov	r22, r28
 16e:	66 1f       	adc	r22, r22
 170:	66 27       	eor	r22, r22
 172:	66 1f       	adc	r22, r22
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 17a:	0e 94 90 00 	call	0x120	; 0x120 <LCD_pulse>
 17e:	6c 2f       	mov	r22, r28
 180:	61 70       	andi	r22, 0x01	; 1
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 188:	c1 fb       	bst	r28, 1
 18a:	66 27       	eor	r22, r22
 18c:	60 f9       	bld	r22, 0
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 194:	c2 fb       	bst	r28, 2
 196:	66 27       	eor	r22, r22
 198:	60 f9       	bld	r22, 0
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 1a0:	c3 fb       	bst	r28, 3
 1a2:	66 27       	eor	r22, r22
 1a4:	60 f9       	bld	r22, 0
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 1ac:	0e 94 90 00 	call	0x120	; 0x120 <LCD_pulse>
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <LCD_sendCmd>:
 1b4:	cf 93       	push	r28
 1b6:	c8 2f       	mov	r28, r24
 1b8:	83 e4       	ldi	r24, 0x43	; 67
 1ba:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_Instruction>
 1be:	c4 fb       	bst	r28, 4
 1c0:	66 27       	eor	r22, r22
 1c2:	60 f9       	bld	r22, 0
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 1ca:	c5 fb       	bst	r28, 5
 1cc:	66 27       	eor	r22, r22
 1ce:	60 f9       	bld	r22, 0
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 1d6:	c6 fb       	bst	r28, 6
 1d8:	66 27       	eor	r22, r22
 1da:	60 f9       	bld	r22, 0
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 1e2:	6c 2f       	mov	r22, r28
 1e4:	66 1f       	adc	r22, r22
 1e6:	66 27       	eor	r22, r22
 1e8:	66 1f       	adc	r22, r22
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 1f0:	0e 94 90 00 	call	0x120	; 0x120 <LCD_pulse>
 1f4:	6c 2f       	mov	r22, r28
 1f6:	61 70       	andi	r22, 0x01	; 1
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 1fe:	c1 fb       	bst	r28, 1
 200:	66 27       	eor	r22, r22
 202:	60 f9       	bld	r22, 0
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 20a:	c2 fb       	bst	r28, 2
 20c:	66 27       	eor	r22, r22
 20e:	60 f9       	bld	r22, 0
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 216:	c3 fb       	bst	r28, 3
 218:	66 27       	eor	r22, r22
 21a:	60 f9       	bld	r22, 0
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	0e 94 33 02 	call	0x466	; 0x466 <DIO_setPinValue>
 222:	0e 94 90 00 	call	0x120	; 0x120 <LCD_pulse>
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <LCD_int>:
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	87 e0       	ldi	r24, 0x07	; 7
 246:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	8b e0       	ldi	r24, 0x0B	; 11
 24e:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	89 e0       	ldi	r24, 0x09	; 9
 25e:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_setPinDir>
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_sendCmd>
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	86 e7       	ldi	r24, 0x76	; 118
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <LCD_int+0x44>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_int+0x4e>
 278:	00 00       	nop
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_sendCmd>
 280:	8f e9       	ldi	r24, 0x9F	; 159
 282:	9f e0       	ldi	r25, 0x0F	; 15
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_int+0x5a>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_int+0x60>
 28a:	00 00       	nop
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_sendCmd>
 292:	8f e9       	ldi	r24, 0x9F	; 159
 294:	9f e0       	ldi	r25, 0x0F	; 15
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_int+0x6c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_int+0x72>
 29c:	00 00       	nop
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_sendCmd>
 2a4:	8f e3       	ldi	r24, 0x3F	; 63
 2a6:	9f e1       	ldi	r25, 0x1F	; 31
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_int+0x7e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_int+0x84>
 2ae:	00 00       	nop
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_sendCmd>
 2b6:	08 95       	ret

000002b8 <LCD_clearDis>:
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_sendCmd>
 2be:	08 95       	ret

000002c0 <LCD_sendNum>:


void LCD_sendNum(s32 num){
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	2a 97       	sbiw	r28, 0x0a	; 10
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
	u8 arr_numbers[10] ;
	s8 i=0;
	//u32 remainder=0;
	
	if(num==0){
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <LCD_sendNum+0x22>
		LCD_sendData('0');
 2da:	80 e3       	ldi	r24, 0x30	; 48
 2dc:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_sendData>
 2e0:	2d c0       	rjmp	.+90     	; 0x33c <LCD_sendNum+0x7c>
		return;
	}
	else if (num<0)
 2e2:	99 23       	and	r25, r25
 2e4:	bc f4       	brge	.+46     	; 0x314 <LCD_sendNum+0x54>
	{
		LCD_sendData('-');
 2e6:	8d e2       	ldi	r24, 0x2D	; 45
 2e8:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_sendData>
}


void LCD_sendNum(s32 num){
	u8 arr_numbers[10] ;
	s8 i=0;
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	16 c0       	rjmp	.+44     	; 0x31c <LCD_sendNum+0x5c>
	}
	else 
	
	while (num>0)
	{
		arr_numbers[i]=(num%10)+48;
 2f0:	6a e0       	ldi	r22, 0x0A	; 10
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__divmodhi4>
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	e1 0f       	add	r30, r17
 302:	f1 1d       	adc	r31, r1
 304:	17 fd       	sbrc	r17, 7
 306:	fa 95       	dec	r31
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	80 83       	st	Z, r24
		
		num=num/10;
 30c:	86 2f       	mov	r24, r22
 30e:	97 2f       	mov	r25, r23
		i++;
 310:	1f 5f       	subi	r17, 0xFF	; 255
 312:	01 c0       	rjmp	.+2      	; 0x316 <LCD_sendNum+0x56>
 314:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_sendData('-');
	}
	else 
	
	while (num>0)
 316:	18 16       	cp	r1, r24
 318:	19 06       	cpc	r1, r25
 31a:	54 f3       	brlt	.-44     	; 0x2f0 <LCD_sendNum+0x30>
		arr_numbers[i]=(num%10)+48;
		
		num=num/10;
		i++;
	}
	i--;
 31c:	11 50       	subi	r17, 0x01	; 1
	while (i>=0)
 31e:	0c c0       	rjmp	.+24     	; 0x338 <LCD_sendNum+0x78>
	{
		LCD_sendData(arr_numbers[i]);
 320:	e1 e0       	ldi	r30, 0x01	; 1
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ec 0f       	add	r30, r28
 326:	fd 1f       	adc	r31, r29
 328:	e1 0f       	add	r30, r17
 32a:	f1 1d       	adc	r31, r1
 32c:	17 fd       	sbrc	r17, 7
 32e:	fa 95       	dec	r31
 330:	80 81       	ld	r24, Z
 332:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_sendData>
		i--;
 336:	11 50       	subi	r17, 0x01	; 1
		
		num=num/10;
		i++;
	}
	i--;
	while (i>=0)
 338:	11 23       	and	r17, r17
 33a:	94 f7       	brge	.-28     	; 0x320 <LCD_sendNum+0x60>
	{
		LCD_sendData(arr_numbers[i]);
		i--;
	}
}
 33c:	2a 96       	adiw	r28, 0x0a	; 10
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	08 95       	ret

00000350 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 350:	88 30       	cpi	r24, 0x08	; 8
 352:	00 f5       	brcc	.+64     	; 0x394 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 354:	61 11       	cpse	r22, r1
 356:	0e c0       	rjmp	.+28     	; 0x374 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 358:	4a b3       	in	r20, 0x1a	; 26
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_setPinDir+0x16>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_setPinDir+0x12>
 36a:	cb 01       	movw	r24, r22
 36c:	80 95       	com	r24
 36e:	84 23       	and	r24, r20
 370:	8a bb       	out	0x1a, r24	; 26
 372:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 374:	61 30       	cpi	r22, 0x01	; 1
 376:	09 f0       	breq	.+2      	; 0x37a <DIO_setPinDir+0x2a>
 378:	75 c0       	rjmp	.+234    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			SET_BIT(DDRA,pinNum);
 37a:	4a b3       	in	r20, 0x1a	; 26
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_setPinDir+0x38>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	8a 95       	dec	r24
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_setPinDir+0x34>
 38c:	cb 01       	movw	r24, r22
 38e:	84 2b       	or	r24, r20
 390:	8a bb       	out	0x1a, r24	; 26
 392:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 394:	98 ef       	ldi	r25, 0xF8	; 248
 396:	98 0f       	add	r25, r24
 398:	98 30       	cpi	r25, 0x08	; 8
 39a:	00 f5       	brcc	.+64     	; 0x3dc <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 39c:	61 11       	cpse	r22, r1
 39e:	0e c0       	rjmp	.+28     	; 0x3bc <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 3a0:	47 b3       	in	r20, 0x17	; 23
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_setPinDir+0x5e>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	9a 95       	dec	r25
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_setPinDir+0x5a>
 3b2:	cb 01       	movw	r24, r22
 3b4:	80 95       	com	r24
 3b6:	84 23       	and	r24, r20
 3b8:	87 bb       	out	0x17, r24	; 23
 3ba:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 3bc:	61 30       	cpi	r22, 0x01	; 1
 3be:	09 f0       	breq	.+2      	; 0x3c2 <DIO_setPinDir+0x72>
 3c0:	51 c0       	rjmp	.+162    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			SET_BIT(DDRB,pinNum);
 3c2:	47 b3       	in	r20, 0x17	; 23
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_setPinDir+0x80>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	9a 95       	dec	r25
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_setPinDir+0x7c>
 3d4:	cb 01       	movw	r24, r22
 3d6:	84 2b       	or	r24, r20
 3d8:	87 bb       	out	0x17, r24	; 23
 3da:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 3dc:	90 ef       	ldi	r25, 0xF0	; 240
 3de:	98 0f       	add	r25, r24
 3e0:	98 30       	cpi	r25, 0x08	; 8
 3e2:	f8 f4       	brcc	.+62     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 3e4:	61 11       	cpse	r22, r1
 3e6:	0e c0       	rjmp	.+28     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			CLEAR_BIT(DDRC,pinNum);
 3e8:	44 b3       	in	r20, 0x14	; 20
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	b9 01       	movw	r22, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_setPinDir+0xa6>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	9a 95       	dec	r25
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_setPinDir+0xa2>
 3fa:	cb 01       	movw	r24, r22
 3fc:	80 95       	com	r24
 3fe:	84 23       	and	r24, r20
 400:	84 bb       	out	0x14, r24	; 20
 402:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 404:	61 30       	cpi	r22, 0x01	; 1
 406:	71 f5       	brne	.+92     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			SET_BIT(DDRC,pinNum);
 408:	44 b3       	in	r20, 0x14	; 20
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	9a 95       	dec	r25
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	84 2b       	or	r24, r20
 41e:	84 bb       	out	0x14, r24	; 20
 420:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 422:	88 51       	subi	r24, 0x18	; 24
 424:	88 30       	cpi	r24, 0x08	; 8
 426:	f0 f4       	brcc	.+60     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 428:	61 11       	cpse	r22, r1
 42a:	0e c0       	rjmp	.+28     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			CLEAR_BIT(DDRC,pinNum);
 42c:	44 b3       	in	r20, 0x14	; 20
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	cb 01       	movw	r24, r22
 440:	80 95       	com	r24
 442:	84 23       	and	r24, r20
 444:	84 bb       	out	0x14, r24	; 20
 446:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 448:	61 30       	cpi	r22, 0x01	; 1
 44a:	61 f4       	brne	.+24     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			SET_BIT(DDRC,pinNum);
 44c:	44 b3       	in	r20, 0x14	; 20
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	cb 01       	movw	r24, r22
 460:	84 2b       	or	r24, r20
 462:	84 bb       	out	0x14, r24	; 20
 464:	08 95       	ret

00000466 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 466:	88 30       	cpi	r24, 0x08	; 8
 468:	00 f5       	brcc	.+64     	; 0x4aa <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 46a:	61 11       	cpse	r22, r1
 46c:	0e c0       	rjmp	.+28     	; 0x48a <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 46e:	4b b3       	in	r20, 0x1b	; 27
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_setPinValue+0x16>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_setPinValue+0x12>
 480:	cb 01       	movw	r24, r22
 482:	80 95       	com	r24
 484:	84 23       	and	r24, r20
 486:	8b bb       	out	0x1b, r24	; 27
 488:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 48a:	61 30       	cpi	r22, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <DIO_setPinValue+0x2a>
 48e:	75 c0       	rjmp	.+234    	; 0x57a <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 490:	4b b3       	in	r20, 0x1b	; 27
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_setPinValue+0x38>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_setPinValue+0x34>
 4a2:	cb 01       	movw	r24, r22
 4a4:	84 2b       	or	r24, r20
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 4aa:	98 ef       	ldi	r25, 0xF8	; 248
 4ac:	98 0f       	add	r25, r24
 4ae:	98 30       	cpi	r25, 0x08	; 8
 4b0:	00 f5       	brcc	.+64     	; 0x4f2 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 4b2:	61 11       	cpse	r22, r1
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 4b6:	48 b3       	in	r20, 0x18	; 24
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_setPinValue+0x5e>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	9a 95       	dec	r25
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_setPinValue+0x5a>
 4c8:	cb 01       	movw	r24, r22
 4ca:	80 95       	com	r24
 4cc:	84 23       	and	r24, r20
 4ce:	88 bb       	out	0x18, r24	; 24
 4d0:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4d2:	61 30       	cpi	r22, 0x01	; 1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <DIO_setPinValue+0x72>
 4d6:	51 c0       	rjmp	.+162    	; 0x57a <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 4d8:	48 b3       	in	r20, 0x18	; 24
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_setPinValue+0x80>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	9a 95       	dec	r25
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_setPinValue+0x7c>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 2b       	or	r24, r20
 4ee:	88 bb       	out	0x18, r24	; 24
 4f0:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 4f2:	90 ef       	ldi	r25, 0xF0	; 240
 4f4:	98 0f       	add	r25, r24
 4f6:	98 30       	cpi	r25, 0x08	; 8
 4f8:	f8 f4       	brcc	.+62     	; 0x538 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 4fa:	61 11       	cpse	r22, r1
 4fc:	0e c0       	rjmp	.+28     	; 0x51a <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 4fe:	45 b3       	in	r20, 0x15	; 21
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	b9 01       	movw	r22, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_setPinValue+0xa6>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	9a 95       	dec	r25
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_setPinValue+0xa2>
 510:	cb 01       	movw	r24, r22
 512:	80 95       	com	r24
 514:	84 23       	and	r24, r20
 516:	85 bb       	out	0x15, r24	; 21
 518:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 51a:	61 30       	cpi	r22, 0x01	; 1
 51c:	71 f5       	brne	.+92     	; 0x57a <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 51e:	45 b3       	in	r20, 0x15	; 21
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_setPinValue+0xc6>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	9a 95       	dec	r25
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_setPinValue+0xc2>
 530:	cb 01       	movw	r24, r22
 532:	84 2b       	or	r24, r20
 534:	85 bb       	out	0x15, r24	; 21
 536:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 538:	88 51       	subi	r24, 0x18	; 24
 53a:	88 30       	cpi	r24, 0x08	; 8
 53c:	f0 f4       	brcc	.+60     	; 0x57a <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 53e:	61 11       	cpse	r22, r1
 540:	0e c0       	rjmp	.+28     	; 0x55e <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 542:	42 b3       	in	r20, 0x12	; 18
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	b9 01       	movw	r22, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_setPinValue+0xea>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_setPinValue+0xe6>
 554:	cb 01       	movw	r24, r22
 556:	80 95       	com	r24
 558:	84 23       	and	r24, r20
 55a:	82 bb       	out	0x12, r24	; 18
 55c:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 55e:	61 30       	cpi	r22, 0x01	; 1
 560:	61 f4       	brne	.+24     	; 0x57a <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 562:	42 b3       	in	r20, 0x12	; 18
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_setPinValue+0x10a>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_setPinValue+0x106>
 574:	cb 01       	movw	r24, r22
 576:	84 2b       	or	r24, r20
 578:	82 bb       	out	0x12, r24	; 18
 57a:	08 95       	ret

0000057c <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 57c:	88 30       	cpi	r24, 0x08	; 8
 57e:	58 f4       	brcc	.+22     	; 0x596 <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
 580:	29 b3       	in	r18, 0x19	; 25
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	a9 01       	movw	r20, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_readPinValue+0x10>
 588:	55 95       	asr	r21
 58a:	47 95       	ror	r20
 58c:	8a 95       	dec	r24
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_readPinValue+0xc>
 590:	ca 01       	movw	r24, r20
 592:	81 70       	andi	r24, 0x01	; 1
 594:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 596:	28 ef       	ldi	r18, 0xF8	; 248
 598:	28 0f       	add	r18, r24
 59a:	28 30       	cpi	r18, 0x08	; 8
 59c:	48 f4       	brcc	.+18     	; 0x5b0 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 59e:	86 b3       	in	r24, 0x16	; 22
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_readPinValue+0x2c>
 5a4:	95 95       	asr	r25
 5a6:	87 95       	ror	r24
 5a8:	2a 95       	dec	r18
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_readPinValue+0x28>
 5ac:	81 70       	andi	r24, 0x01	; 1
 5ae:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 5b0:	20 ef       	ldi	r18, 0xF0	; 240
 5b2:	28 0f       	add	r18, r24
 5b4:	28 30       	cpi	r18, 0x08	; 8
 5b6:	48 f4       	brcc	.+18     	; 0x5ca <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 5b8:	83 b3       	in	r24, 0x13	; 19
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_readPinValue+0x46>
 5be:	95 95       	asr	r25
 5c0:	87 95       	ror	r24
 5c2:	2a 95       	dec	r18
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_readPinValue+0x42>
 5c6:	81 70       	andi	r24, 0x01	; 1
 5c8:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 5ca:	28 ee       	ldi	r18, 0xE8	; 232
 5cc:	28 0f       	add	r18, r24
 5ce:	28 30       	cpi	r18, 0x08	; 8
 5d0:	50 f4       	brcc	.+20     	; 0x5e6 <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 5d2:	90 b3       	in	r25, 0x10	; 16
 5d4:	89 2f       	mov	r24, r25
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_readPinValue+0x62>
 5da:	95 95       	asr	r25
 5dc:	87 95       	ror	r24
 5de:	2a 95       	dec	r18
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_readPinValue+0x5e>
 5e2:	81 70       	andi	r24, 0x01	; 1
 5e4:	08 95       	ret
	}
}
 5e6:	08 95       	ret

000005e8 <__divmodhi4>:
 5e8:	97 fb       	bst	r25, 7
 5ea:	07 2e       	mov	r0, r23
 5ec:	16 f4       	brtc	.+4      	; 0x5f2 <__divmodhi4+0xa>
 5ee:	00 94       	com	r0
 5f0:	07 d0       	rcall	.+14     	; 0x600 <__divmodhi4_neg1>
 5f2:	77 fd       	sbrc	r23, 7
 5f4:	09 d0       	rcall	.+18     	; 0x608 <__divmodhi4_neg2>
 5f6:	0e 94 08 03 	call	0x610	; 0x610 <__udivmodhi4>
 5fa:	07 fc       	sbrc	r0, 7
 5fc:	05 d0       	rcall	.+10     	; 0x608 <__divmodhi4_neg2>
 5fe:	3e f4       	brtc	.+14     	; 0x60e <__divmodhi4_exit>

00000600 <__divmodhi4_neg1>:
 600:	90 95       	com	r25
 602:	81 95       	neg	r24
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	08 95       	ret

00000608 <__divmodhi4_neg2>:
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255

0000060e <__divmodhi4_exit>:
 60e:	08 95       	ret

00000610 <__udivmodhi4>:
 610:	aa 1b       	sub	r26, r26
 612:	bb 1b       	sub	r27, r27
 614:	51 e1       	ldi	r21, 0x11	; 17
 616:	07 c0       	rjmp	.+14     	; 0x626 <__udivmodhi4_ep>

00000618 <__udivmodhi4_loop>:
 618:	aa 1f       	adc	r26, r26
 61a:	bb 1f       	adc	r27, r27
 61c:	a6 17       	cp	r26, r22
 61e:	b7 07       	cpc	r27, r23
 620:	10 f0       	brcs	.+4      	; 0x626 <__udivmodhi4_ep>
 622:	a6 1b       	sub	r26, r22
 624:	b7 0b       	sbc	r27, r23

00000626 <__udivmodhi4_ep>:
 626:	88 1f       	adc	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	5a 95       	dec	r21
 62c:	a9 f7       	brne	.-22     	; 0x618 <__udivmodhi4_loop>
 62e:	80 95       	com	r24
 630:	90 95       	com	r25
 632:	bc 01       	movw	r22, r24
 634:	cd 01       	movw	r24, r26
 636:	08 95       	ret

00000638 <_exit>:
 638:	f8 94       	cli

0000063a <__stop_program>:
 63a:	ff cf       	rjmp	.-2      	; 0x63a <__stop_program>
