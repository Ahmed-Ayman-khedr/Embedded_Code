
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  000005e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079c  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00002458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052c  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086b  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000034ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_1>
   8:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_2>
   c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "BIT_MATH.h"

#include "Sess22TI1/SESSTI1_INT.h"

int main(){
	source_code();
  7c:	0e 94 6a 00 	call	0xd4	; 0xd4 <source_code>
	return 0;
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <toggleled_1>:


void toggleled_1(){
	static u16 counter_1 = 0, counter_2 = 0;
	//led2 0.5 sec
	counter_1++;
  86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter_1.1785>
  8a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter_1.1785+0x1>
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter_1.1785+0x1>
  94:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter_1.1785>
	if (counter_1==3906)
  98:	82 34       	cpi	r24, 0x42	; 66
  9a:	9f 40       	sbci	r25, 0x0F	; 15
  9c:	39 f4       	brne	.+14     	; 0xac <toggleled_1+0x26>
	{
		DIO_togglePinValue(DIO_PINC2);
  9e:	82 e1       	ldi	r24, 0x12	; 18
  a0:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_togglePinValue>
		counter_1 = 0 ;
  a4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter_1.1785+0x1>
  a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter_1.1785>
	}
	//led2 1 sec
	counter_2++;
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (counter_2==7812)
  be:	84 38       	cpi	r24, 0x84	; 132
  c0:	9e 41       	sbci	r25, 0x1E	; 30
  c2:	39 f4       	brne	.+14     	; 0xd2 <toggleled_1+0x4c>
	{
		DIO_togglePinValue(DIO_PINC3);
  c4:	83 e1       	ldi	r24, 0x13	; 19
  c6:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_togglePinValue>
		counter_2 = 0;
  ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	08 95       	ret

000000d4 <source_code>:
	}
}

int source_code()
{
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	82 e1       	ldi	r24, 0x12	; 18
  d8:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_setPinDir>
	DIO_setPinDir(DIO_PINC3,DIO_OUTPUT);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	83 e1       	ldi	r24, 0x13	; 19
  e0:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_setPinDir>
	
	
	GI_enable();
  e4:	0e 94 4b 02 	call	0x496	; 0x496 <GI_enable>
	TIMER0_initNormal();
  e8:	0e 94 4f 02 	call	0x49e	; 0x49e <TIMER0_initNormal>
	TIMER0_start(TIMER0_DIV8);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 59 02 	call	0x4b2	; 0x4b2 <TIMER0_start>
	TIMER_setcallbackOv(toggleled_1);
  f2:	83 e4       	ldi	r24, 0x43	; 67
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 89 02 	call	0x512	; 0x512 <TIMER_setcallbackOv>
  fa:	ff cf       	rjmp	.-2      	; 0xfa <source_code+0x26>

000000fc <DIO_setPinDir>:
		return GET_BIT(PIND,pinNum);
	}
}

void DIO_setPullUp(u8 pinNum){
	DIO_setPinValue(pinNum,DIO_HIGH);
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	00 f5       	brcc	.+64     	; 0x140 <DIO_setPinDir+0x44>
 100:	61 11       	cpse	r22, r1
 102:	0e c0       	rjmp	.+28     	; 0x120 <DIO_setPinDir+0x24>
 104:	4a b3       	in	r20, 0x1a	; 26
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_setPinDir+0x16>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_setPinDir+0x12>
 116:	cb 01       	movw	r24, r22
 118:	80 95       	com	r24
 11a:	84 23       	and	r24, r20
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	08 95       	ret
 120:	61 30       	cpi	r22, 0x01	; 1
 122:	09 f0       	breq	.+2      	; 0x126 <DIO_setPinDir+0x2a>
 124:	75 c0       	rjmp	.+234    	; 0x210 <DIO_setPinDir+0x114>
 126:	4a b3       	in	r20, 0x1a	; 26
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_setPinDir+0x38>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_setPinDir+0x34>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	8a bb       	out	0x1a, r24	; 26
 13e:	08 95       	ret
 140:	98 ef       	ldi	r25, 0xF8	; 248
 142:	98 0f       	add	r25, r24
 144:	98 30       	cpi	r25, 0x08	; 8
 146:	00 f5       	brcc	.+64     	; 0x188 <DIO_setPinDir+0x8c>
 148:	61 11       	cpse	r22, r1
 14a:	0e c0       	rjmp	.+28     	; 0x168 <DIO_setPinDir+0x6c>
 14c:	47 b3       	in	r20, 0x17	; 23
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_setPinDir+0x5e>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	9a 95       	dec	r25
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_setPinDir+0x5a>
 15e:	cb 01       	movw	r24, r22
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	87 bb       	out	0x17, r24	; 23
 166:	08 95       	ret
 168:	61 30       	cpi	r22, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <DIO_setPinDir+0x72>
 16c:	51 c0       	rjmp	.+162    	; 0x210 <DIO_setPinDir+0x114>
 16e:	47 b3       	in	r20, 0x17	; 23
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_setPinDir+0x80>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	9a 95       	dec	r25
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_setPinDir+0x7c>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	87 bb       	out	0x17, r24	; 23
 186:	08 95       	ret
 188:	90 ef       	ldi	r25, 0xF0	; 240
 18a:	98 0f       	add	r25, r24
 18c:	98 30       	cpi	r25, 0x08	; 8
 18e:	f8 f4       	brcc	.+62     	; 0x1ce <DIO_setPinDir+0xd2>
 190:	61 11       	cpse	r22, r1
 192:	0e c0       	rjmp	.+28     	; 0x1b0 <DIO_setPinDir+0xb4>
 194:	44 b3       	in	r20, 0x14	; 20
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinDir+0xa6>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	9a 95       	dec	r25
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinDir+0xa2>
 1a6:	cb 01       	movw	r24, r22
 1a8:	80 95       	com	r24
 1aa:	84 23       	and	r24, r20
 1ac:	84 bb       	out	0x14, r24	; 20
 1ae:	08 95       	ret
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	71 f5       	brne	.+92     	; 0x210 <DIO_setPinDir+0x114>
 1b4:	44 b3       	in	r20, 0x14	; 20
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_setPinDir+0xc6>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	9a 95       	dec	r25
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_setPinDir+0xc2>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 2b       	or	r24, r20
 1ca:	84 bb       	out	0x14, r24	; 20
 1cc:	08 95       	ret
 1ce:	88 51       	subi	r24, 0x18	; 24
 1d0:	88 30       	cpi	r24, 0x08	; 8
 1d2:	f0 f4       	brcc	.+60     	; 0x210 <DIO_setPinDir+0x114>
 1d4:	61 11       	cpse	r22, r1
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <DIO_setPinDir+0xf8>
 1d8:	44 b3       	in	r20, 0x14	; 20
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_setPinDir+0xea>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_setPinDir+0xe6>
 1ea:	cb 01       	movw	r24, r22
 1ec:	80 95       	com	r24
 1ee:	84 23       	and	r24, r20
 1f0:	84 bb       	out	0x14, r24	; 20
 1f2:	08 95       	ret
 1f4:	61 30       	cpi	r22, 0x01	; 1
 1f6:	61 f4       	brne	.+24     	; 0x210 <DIO_setPinDir+0x114>
 1f8:	44 b3       	in	r20, 0x14	; 20
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinDir+0x10a>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	8a 95       	dec	r24
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinDir+0x106>
 20a:	cb 01       	movw	r24, r22
 20c:	84 2b       	or	r24, r20
 20e:	84 bb       	out	0x14, r24	; 20
 210:	08 95       	ret

00000212 <DIO_setPinValue>:
 212:	88 30       	cpi	r24, 0x08	; 8
 214:	00 f5       	brcc	.+64     	; 0x256 <DIO_setPinValue+0x44>
 216:	61 11       	cpse	r22, r1
 218:	0e c0       	rjmp	.+28     	; 0x236 <DIO_setPinValue+0x24>
 21a:	4b b3       	in	r20, 0x1b	; 27
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_setPinValue+0x16>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	8a 95       	dec	r24
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_setPinValue+0x12>
 22c:	cb 01       	movw	r24, r22
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	8b bb       	out	0x1b, r24	; 27
 234:	08 95       	ret
 236:	61 30       	cpi	r22, 0x01	; 1
 238:	09 f0       	breq	.+2      	; 0x23c <DIO_setPinValue+0x2a>
 23a:	75 c0       	rjmp	.+234    	; 0x326 <DIO_setPinValue+0x114>
 23c:	4b b3       	in	r20, 0x1b	; 27
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	b9 01       	movw	r22, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_setPinValue+0x38>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	8a 95       	dec	r24
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_setPinValue+0x34>
 24e:	cb 01       	movw	r24, r22
 250:	84 2b       	or	r24, r20
 252:	8b bb       	out	0x1b, r24	; 27
 254:	08 95       	ret
 256:	98 ef       	ldi	r25, 0xF8	; 248
 258:	98 0f       	add	r25, r24
 25a:	98 30       	cpi	r25, 0x08	; 8
 25c:	00 f5       	brcc	.+64     	; 0x29e <DIO_setPinValue+0x8c>
 25e:	61 11       	cpse	r22, r1
 260:	0e c0       	rjmp	.+28     	; 0x27e <DIO_setPinValue+0x6c>
 262:	48 b3       	in	r20, 0x18	; 24
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_setPinValue+0x5e>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	9a 95       	dec	r25
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_setPinValue+0x5a>
 274:	cb 01       	movw	r24, r22
 276:	80 95       	com	r24
 278:	84 23       	and	r24, r20
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	08 95       	ret
 27e:	61 30       	cpi	r22, 0x01	; 1
 280:	09 f0       	breq	.+2      	; 0x284 <DIO_setPinValue+0x72>
 282:	51 c0       	rjmp	.+162    	; 0x326 <DIO_setPinValue+0x114>
 284:	48 b3       	in	r20, 0x18	; 24
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_setPinValue+0x80>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	9a 95       	dec	r25
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_setPinValue+0x7c>
 296:	cb 01       	movw	r24, r22
 298:	84 2b       	or	r24, r20
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	08 95       	ret
 29e:	90 ef       	ldi	r25, 0xF0	; 240
 2a0:	98 0f       	add	r25, r24
 2a2:	98 30       	cpi	r25, 0x08	; 8
 2a4:	f8 f4       	brcc	.+62     	; 0x2e4 <DIO_setPinValue+0xd2>
 2a6:	61 11       	cpse	r22, r1
 2a8:	0e c0       	rjmp	.+28     	; 0x2c6 <DIO_setPinValue+0xb4>
 2aa:	45 b3       	in	r20, 0x15	; 21
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	b9 01       	movw	r22, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_setPinValue+0xa6>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	9a 95       	dec	r25
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_setPinValue+0xa2>
 2bc:	cb 01       	movw	r24, r22
 2be:	80 95       	com	r24
 2c0:	84 23       	and	r24, r20
 2c2:	85 bb       	out	0x15, r24	; 21
 2c4:	08 95       	ret
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	71 f5       	brne	.+92     	; 0x326 <DIO_setPinValue+0x114>
 2ca:	45 b3       	in	r20, 0x15	; 21
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_setPinValue+0xc6>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	9a 95       	dec	r25
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_setPinValue+0xc2>
 2dc:	cb 01       	movw	r24, r22
 2de:	84 2b       	or	r24, r20
 2e0:	85 bb       	out	0x15, r24	; 21
 2e2:	08 95       	ret
 2e4:	88 51       	subi	r24, 0x18	; 24
 2e6:	88 30       	cpi	r24, 0x08	; 8
 2e8:	f0 f4       	brcc	.+60     	; 0x326 <DIO_setPinValue+0x114>
 2ea:	61 11       	cpse	r22, r1
 2ec:	0e c0       	rjmp	.+28     	; 0x30a <DIO_setPinValue+0xf8>
 2ee:	42 b3       	in	r20, 0x12	; 18
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_setPinValue+0xea>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	8a 95       	dec	r24
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_setPinValue+0xe6>
 300:	cb 01       	movw	r24, r22
 302:	80 95       	com	r24
 304:	84 23       	and	r24, r20
 306:	82 bb       	out	0x12, r24	; 18
 308:	08 95       	ret
 30a:	61 30       	cpi	r22, 0x01	; 1
 30c:	61 f4       	brne	.+24     	; 0x326 <DIO_setPinValue+0x114>
 30e:	42 b3       	in	r20, 0x12	; 18
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	b9 01       	movw	r22, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_setPinValue+0x10a>
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	8a 95       	dec	r24
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_setPinValue+0x106>
 320:	cb 01       	movw	r24, r22
 322:	84 2b       	or	r24, r20
 324:	82 bb       	out	0x12, r24	; 18
 326:	08 95       	ret

00000328 <DIO_readPinValue>:
 328:	88 30       	cpi	r24, 0x08	; 8
 32a:	58 f4       	brcc	.+22     	; 0x342 <DIO_readPinValue+0x1a>
 32c:	29 b3       	in	r18, 0x19	; 25
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	a9 01       	movw	r20, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_readPinValue+0x10>
 334:	55 95       	asr	r21
 336:	47 95       	ror	r20
 338:	8a 95       	dec	r24
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_readPinValue+0xc>
 33c:	ca 01       	movw	r24, r20
 33e:	81 70       	andi	r24, 0x01	; 1
 340:	08 95       	ret
 342:	28 ef       	ldi	r18, 0xF8	; 248
 344:	28 0f       	add	r18, r24
 346:	28 30       	cpi	r18, 0x08	; 8
 348:	48 f4       	brcc	.+18     	; 0x35c <DIO_readPinValue+0x34>
 34a:	86 b3       	in	r24, 0x16	; 22
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_readPinValue+0x2c>
 350:	95 95       	asr	r25
 352:	87 95       	ror	r24
 354:	2a 95       	dec	r18
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_readPinValue+0x28>
 358:	81 70       	andi	r24, 0x01	; 1
 35a:	08 95       	ret
 35c:	20 ef       	ldi	r18, 0xF0	; 240
 35e:	28 0f       	add	r18, r24
 360:	28 30       	cpi	r18, 0x08	; 8
 362:	48 f4       	brcc	.+18     	; 0x376 <DIO_readPinValue+0x4e>
 364:	83 b3       	in	r24, 0x13	; 19
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_readPinValue+0x46>
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	2a 95       	dec	r18
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_readPinValue+0x42>
 372:	81 70       	andi	r24, 0x01	; 1
 374:	08 95       	ret
 376:	28 ee       	ldi	r18, 0xE8	; 232
 378:	28 0f       	add	r18, r24
 37a:	28 30       	cpi	r18, 0x08	; 8
 37c:	50 f4       	brcc	.+20     	; 0x392 <DIO_readPinValue+0x6a>
 37e:	90 b3       	in	r25, 0x10	; 16
 380:	89 2f       	mov	r24, r25
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_readPinValue+0x62>
 386:	95 95       	asr	r25
 388:	87 95       	ror	r24
 38a:	2a 95       	dec	r18
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_readPinValue+0x5e>
 38e:	81 70       	andi	r24, 0x01	; 1
 390:	08 95       	ret
 392:	08 95       	ret

00000394 <DIO_togglePinValue>:
}

void DIO_togglePinValue(u8 pinNum){
 394:	cf 93       	push	r28
 396:	c8 2f       	mov	r28, r24
	DIO_setPinValue(pinNum,!DIO_readPinValue(pinNum));
 398:	0e 94 94 01 	call	0x328	; 0x328 <DIO_readPinValue>
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	81 11       	cpse	r24, r1
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
}
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <__vector_1>:

void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
 3ce:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <EXT_int0Func>
 3d2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <EXT_int0Func+0x1>
 3d6:	09 95       	icall
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_2>:
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
 41c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXT_int1Func>
 420:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXT_int1Func+0x1>
 424:	09 95       	icall
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_3>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	EXT_int2Func();
 46a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EXT_int2Func>
 46e:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EXT_int2Func+0x1>
 472:	09 95       	icall
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <GI_enable>:
 */ 

#include "GI_INT.h"

void GI_enable(){
	SET_BIT(SREG,I);
 496:	8f b7       	in	r24, 0x3f	; 63
 498:	80 68       	ori	r24, 0x80	; 128
 49a:	8f bf       	out	0x3f, r24	; 63
 49c:	08 95       	ret

0000049e <TIMER0_initNormal>:
#include "TIMRE0_INT.h"

void TIMER0_initNormal()
{
	//select normal mode
	CLEAR_BIT(TCCR0,WGM00);
 49e:	83 b7       	in	r24, 0x33	; 51
 4a0:	8f 7b       	andi	r24, 0xBF	; 191
 4a2:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM01);
 4a4:	83 b7       	in	r24, 0x33	; 51
 4a6:	87 7f       	andi	r24, 0xF7	; 247
 4a8:	83 bf       	out	0x33, r24	; 51
	
	//enable
	SET_BIT(TIMSK,TOIE0);
 4aa:	89 b7       	in	r24, 0x39	; 57
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	89 bf       	out	0x39, r24	; 57
 4b0:	08 95       	ret

000004b2 <TIMER0_start>:
}

void TIMER0_start(u8 prescaler)
{
	if(prescaler == TIMER0_DIV0)
 4b2:	81 11       	cpse	r24, r1
 4b4:	0a c0       	rjmp	.+20     	; 0x4ca <TIMER0_start+0x18>
	{
		SET_BIT(TCCR0,CS00);
 4b6:	83 b7       	in	r24, 0x33	; 51
 4b8:	81 60       	ori	r24, 0x01	; 1
 4ba:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS01);
 4bc:	83 b7       	in	r24, 0x33	; 51
 4be:	8d 7f       	andi	r24, 0xFD	; 253
 4c0:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS02);
 4c2:	83 b7       	in	r24, 0x33	; 51
 4c4:	8b 7f       	andi	r24, 0xFB	; 251
 4c6:	83 bf       	out	0x33, r24	; 51
 4c8:	08 95       	ret
	}
	else if(prescaler == TIMER0_DIV8)
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	51 f4       	brne	.+20     	; 0x4e2 <TIMER0_start+0x30>
	{
		CLEAR_BIT(TCCR0,CS00);
 4ce:	83 b7       	in	r24, 0x33	; 51
 4d0:	8e 7f       	andi	r24, 0xFE	; 254
 4d2:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
 4d4:	83 b7       	in	r24, 0x33	; 51
 4d6:	82 60       	ori	r24, 0x02	; 2
 4d8:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS02);
 4da:	83 b7       	in	r24, 0x33	; 51
 4dc:	8b 7f       	andi	r24, 0xFB	; 251
 4de:	83 bf       	out	0x33, r24	; 51
 4e0:	08 95       	ret
	}
	else if(prescaler == TIMER0_DIV64)
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	51 f4       	brne	.+20     	; 0x4fa <TIMER0_start+0x48>
	{
		SET_BIT(TCCR0,CS00);
 4e6:	83 b7       	in	r24, 0x33	; 51
 4e8:	81 60       	ori	r24, 0x01	; 1
 4ea:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
 4ec:	83 b7       	in	r24, 0x33	; 51
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS02);
 4f2:	83 b7       	in	r24, 0x33	; 51
 4f4:	8b 7f       	andi	r24, 0xFB	; 251
 4f6:	83 bf       	out	0x33, r24	; 51
 4f8:	08 95       	ret
	}
	else if(prescaler == TIMER0_DIV256)
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	49 f4       	brne	.+18     	; 0x510 <TIMER0_start+0x5e>
	{
		CLEAR_BIT(TCCR0,CS00);
 4fe:	83 b7       	in	r24, 0x33	; 51
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS01);
 504:	83 b7       	in	r24, 0x33	; 51
 506:	8d 7f       	andi	r24, 0xFD	; 253
 508:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
 50a:	83 b7       	in	r24, 0x33	; 51
 50c:	84 60       	ori	r24, 0x04	; 4
 50e:	83 bf       	out	0x33, r24	; 51
 510:	08 95       	ret

00000512 <TIMER_setcallbackOv>:

void (*TIMER0_OvFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackOv(void (*ptr)()){
	TIMER0_OvFunc = ptr;
 512:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <TIMER0_OvFunc+0x1>
 516:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <TIMER0_OvFunc>
 51a:	08 95       	ret

0000051c <__vector_11>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_11() __attribute__((signal));
void __vector_11(){
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	2f 93       	push	r18
 528:	3f 93       	push	r19
 52a:	4f 93       	push	r20
 52c:	5f 93       	push	r21
 52e:	6f 93       	push	r22
 530:	7f 93       	push	r23
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
 536:	af 93       	push	r26
 538:	bf 93       	push	r27
 53a:	ef 93       	push	r30
 53c:	ff 93       	push	r31
	TIMER0_OvFunc();
 53e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TIMER0_OvFunc>
 542:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TIMER0_OvFunc+0x1>
 546:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
