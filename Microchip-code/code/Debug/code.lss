
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000560  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001273  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b7  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095b  00000000  00000000  00002272  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053b  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ab8  00000000  00000000  0000330f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003dc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "BIT_MATH.h"

#include "Sess18/TASKNEWCHARACTER/NEWCHARACTER_INT.h"

int main(){
	source_code();
  82:	0e 94 46 00 	call	0x8c	; 0x8c <source_code>
	return 0;
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <source_code>:


#include "Sess18/TASKNEWCHARACTER/NEWCHARACTER_INT.h"

int source_code()
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	28 97       	sbiw	r28, 0x08	; 8
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
	//Initialize the LCD
	LCD_init();
  a0:	0e 94 13 01 	call	0x226	; 0x226 <LCD_init>
		0b00100,
		0b01010,
		0b10001,
		0b00000
	};
	u8 customCharacter2[8] = {
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	e0 e6       	ldi	r30, 0x60	; 96
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	de 01       	movw	r26, r28
  ac:	11 96       	adiw	r26, 0x01	; 1
  ae:	01 90       	ld	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	8a 95       	dec	r24
  b4:	e1 f7       	brne	.-8      	; 0xae <source_code+0x22>


#include "Sess18/TASKNEWCHARACTER/NEWCHARACTER_INT.h"

int source_code()
{
  b6:	10 e0       	ldi	r17, 0x00	; 0
	u8 position = 0;
	while (1)
	{
		//LCD_CreateNewCharacter(customCharacter1,1);
		//LCD_SendNewCharacter(1);
		LCD_CreateNewCharacter(customCharacter2,2);
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_CreateNewCharacter>
		LCD_SendNewCharacter(2);
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 89 01 	call	0x312	; 0x312 <LCD_SendNewCharacter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	81 ee       	ldi	r24, 0xE1	; 225
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <source_code+0x42>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <source_code+0x4c>
  d8:	00 00       	nop
		_delay_ms(100);
		LCD_Shift(LCD_SHIFT_DIS_RIGHT);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Shift>
		position++;
  e0:	1f 5f       	subi	r17, 0xFF	; 255
		if (position==8)
  e2:	18 30       	cpi	r17, 0x08	; 8
  e4:	49 f7       	brne	.-46     	; 0xb8 <source_code+0x2c>
		{
			LCD_GoTo(0,1);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_GoTo>
  ee:	e3 cf       	rjmp	.-58     	; 0xb6 <source_code+0x2a>

000000f0 <LCD_Instruction>:
	
	num = num - (u32) num;
	num = num * 1000;
	
	LCD_sendNum((u32)num);
}
  f0:	84 34       	cpi	r24, 0x44	; 68
  f2:	49 f4       	brne	.+18     	; 0x106 <LCD_Instruction+0x16>
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	8a e0       	ldi	r24, 0x0A	; 10
  f8:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 104:	08 95       	ret
 106:	83 34       	cpi	r24, 0x43	; 67
 108:	41 f4       	brne	.+16     	; 0x11a <LCD_Instruction+0x2a>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 11a:	08 95       	ret

0000011c <LCD_pulse>:
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	8b e0       	ldi	r24, 0x0B	; 11
 120:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_pulse+0xc>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_pulse+0x12>
 12e:	00 00       	nop
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	8b e0       	ldi	r24, 0x0B	; 11
 134:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 138:	08 95       	ret

0000013a <LCD_sendData>:
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	84 e4       	ldi	r24, 0x44	; 68
 140:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Instruction>
 144:	c4 fb       	bst	r28, 4
 146:	66 27       	eor	r22, r22
 148:	60 f9       	bld	r22, 0
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 150:	c5 fb       	bst	r28, 5
 152:	66 27       	eor	r22, r22
 154:	60 f9       	bld	r22, 0
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 15c:	c6 fb       	bst	r28, 6
 15e:	66 27       	eor	r22, r22
 160:	60 f9       	bld	r22, 0
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 168:	6c 2f       	mov	r22, r28
 16a:	66 1f       	adc	r22, r22
 16c:	66 27       	eor	r22, r22
 16e:	66 1f       	adc	r22, r22
 170:	87 e0       	ldi	r24, 0x07	; 7
 172:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 176:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_pulse>
 17a:	6c 2f       	mov	r22, r28
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 184:	c1 fb       	bst	r28, 1
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 190:	c2 fb       	bst	r28, 2
 192:	66 27       	eor	r22, r22
 194:	60 f9       	bld	r22, 0
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 19c:	c3 fb       	bst	r28, 3
 19e:	66 27       	eor	r22, r22
 1a0:	60 f9       	bld	r22, 0
 1a2:	87 e0       	ldi	r24, 0x07	; 7
 1a4:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 1a8:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_pulse>
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LCD_sendCmd>:
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	83 e4       	ldi	r24, 0x43	; 67
 1b6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Instruction>
 1ba:	c4 fb       	bst	r28, 4
 1bc:	66 27       	eor	r22, r22
 1be:	60 f9       	bld	r22, 0
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 1c6:	c5 fb       	bst	r28, 5
 1c8:	66 27       	eor	r22, r22
 1ca:	60 f9       	bld	r22, 0
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 1d2:	c6 fb       	bst	r28, 6
 1d4:	66 27       	eor	r22, r22
 1d6:	60 f9       	bld	r22, 0
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 1de:	6c 2f       	mov	r22, r28
 1e0:	66 1f       	adc	r22, r22
 1e2:	66 27       	eor	r22, r22
 1e4:	66 1f       	adc	r22, r22
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_pulse>
 1f0:	6c 2f       	mov	r22, r28
 1f2:	61 70       	andi	r22, 0x01	; 1
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 1fa:	c1 fb       	bst	r28, 1
 1fc:	66 27       	eor	r22, r22
 1fe:	60 f9       	bld	r22, 0
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 206:	c2 fb       	bst	r28, 2
 208:	66 27       	eor	r22, r22
 20a:	60 f9       	bld	r22, 0
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 212:	c3 fb       	bst	r28, 3
 214:	66 27       	eor	r22, r22
 216:	60 f9       	bld	r22, 0
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	0e 94 23 02 	call	0x446	; 0x446 <DIO_setPinValue>
 21e:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_pulse>
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <LCD_init>:
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPinDir>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	85 e0       	ldi	r24, 0x05	; 5
 232:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPinDir>
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPinDir>
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPinDir>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8b e0       	ldi	r24, 0x0B	; 11
 24a:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPinDir>
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPinDir>
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	89 e0       	ldi	r24, 0x09	; 9
 25a:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPinDir>
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	86 e7       	ldi	r24, 0x76	; 118
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <LCD_init+0x44>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_init+0x4e>
 274:	00 00       	nop
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 27c:	8f e9       	ldi	r24, 0x9F	; 159
 27e:	9f e0       	ldi	r25, 0x0F	; 15
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_init+0x5a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_init+0x60>
 286:	00 00       	nop
 288:	8f e0       	ldi	r24, 0x0F	; 15
 28a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_init+0x6c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_init+0x72>
 298:	00 00       	nop
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 2a0:	8f e3       	ldi	r24, 0x3F	; 63
 2a2:	9f e1       	ldi	r25, 0x1F	; 31
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_init+0x7e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_init+0x84>
 2aa:	00 00       	nop
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 2b2:	08 95       	ret

000002b4 <LCD_GoTo>:

void LCD_GoTo(u8 x, u8 line ){
	if (line==0)
 2b4:	61 11       	cpse	r22, r1
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <LCD_GoTo+0xc>
	{
		LCD_sendCmd(0b10000000+x);
 2b8:	80 58       	subi	r24, 0x80	; 128
 2ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 2be:	08 95       	ret
	}
	else if (line==1)
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	19 f4       	brne	.+6      	; 0x2ca <LCD_GoTo+0x16>
	{
		LCD_sendCmd(0b11000000+x);
 2c4:	80 54       	subi	r24, 0x40	; 64
 2c6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 2ca:	08 95       	ret

000002cc <LCD_CreateNewCharacter>:
	}
}

void LCD_CreateNewCharacter(u8* ArrCustumCharachter, u8 CharLocation){
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
	if (CharLocation<8 && CharLocation>0)
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	26 0f       	add	r18, r22
 2d6:	27 30       	cpi	r18, 0x07	; 7
 2d8:	c0 f4       	brcc	.+48     	; 0x30a <LCD_CreateNewCharacter+0x3e>
 2da:	8c 01       	movw	r16, r24
	{
		//Initialize the CGRAM to start taking data
		LCD_sendCmd(0x40+(CharLocation*8));
 2dc:	86 2f       	mov	r24, r22
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	08 96       	adiw	r24, 0x08	; 8
 2e2:	88 0f       	add	r24, r24
 2e4:	88 0f       	add	r24, r24
 2e6:	88 0f       	add	r24, r24
 2e8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
		
		//Send custom Character to the CGRAM
		u8 i=0;
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
		while (i<8)
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <LCD_CreateNewCharacter+0x32>
		{
			LCD_sendData(ArrCustumCharachter[i]);
 2f0:	f8 01       	movw	r30, r16
 2f2:	ec 0f       	add	r30, r28
 2f4:	f1 1d       	adc	r31, r1
 2f6:	80 81       	ld	r24, Z
 2f8:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendData>
			i++;
 2fc:	cf 5f       	subi	r28, 0xFF	; 255
		//Initialize the CGRAM to start taking data
		LCD_sendCmd(0x40+(CharLocation*8));
		
		//Send custom Character to the CGRAM
		u8 i=0;
		while (i<8)
 2fe:	c8 30       	cpi	r28, 0x08	; 8
 300:	b8 f3       	brcs	.-18     	; 0x2f0 <LCD_CreateNewCharacter+0x24>
			LCD_sendData(ArrCustumCharachter[i]);
			i++;
		}
		
		//Reset cursor
		LCD_GoTo(0,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_GoTo>
	}
}
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

00000312 <LCD_SendNewCharacter>:

void LCD_SendNewCharacter(u8 CharLocation){
	//Show the new character
	LCD_sendData(CharLocation);
 312:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendData>
 316:	08 95       	ret

00000318 <LCD_Shift>:
}

void LCD_Shift(u8 direction){
	if (direction==LCD_SHIFT_DIS_RIGHT)
 318:	81 11       	cpse	r24, r1
 31a:	04 c0       	rjmp	.+8      	; 0x324 <LCD_Shift+0xc>
	{
		//Shift right
		LCD_sendCmd(0b00011100);
 31c:	8c e1       	ldi	r24, 0x1C	; 28
 31e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 322:	08 95       	ret
	}
	else if (direction==LCD_SHIFT_DIS_LIFT)
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	19 f4       	brne	.+6      	; 0x32e <LCD_Shift+0x16>
	{
		//Shift left
		LCD_sendCmd(0b00011000);
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_sendCmd>
 32e:	08 95       	ret

00000330 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	00 f5       	brcc	.+64     	; 0x374 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 334:	61 11       	cpse	r22, r1
 336:	0e c0       	rjmp	.+28     	; 0x354 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 338:	4a b3       	in	r20, 0x1a	; 26
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_setPinDir+0x16>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	8a 95       	dec	r24
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_setPinDir+0x12>
 34a:	cb 01       	movw	r24, r22
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	8a bb       	out	0x1a, r24	; 26
 352:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 354:	61 30       	cpi	r22, 0x01	; 1
 356:	09 f0       	breq	.+2      	; 0x35a <DIO_setPinDir+0x2a>
 358:	75 c0       	rjmp	.+234    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			SET_BIT(DDRA,pinNum);
 35a:	4a b3       	in	r20, 0x1a	; 26
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_setPinDir+0x38>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_setPinDir+0x34>
 36c:	cb 01       	movw	r24, r22
 36e:	84 2b       	or	r24, r20
 370:	8a bb       	out	0x1a, r24	; 26
 372:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 374:	98 ef       	ldi	r25, 0xF8	; 248
 376:	98 0f       	add	r25, r24
 378:	98 30       	cpi	r25, 0x08	; 8
 37a:	00 f5       	brcc	.+64     	; 0x3bc <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 37c:	61 11       	cpse	r22, r1
 37e:	0e c0       	rjmp	.+28     	; 0x39c <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 380:	47 b3       	in	r20, 0x17	; 23
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	b9 01       	movw	r22, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_setPinDir+0x5e>
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	9a 95       	dec	r25
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_setPinDir+0x5a>
 392:	cb 01       	movw	r24, r22
 394:	80 95       	com	r24
 396:	84 23       	and	r24, r20
 398:	87 bb       	out	0x17, r24	; 23
 39a:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 39c:	61 30       	cpi	r22, 0x01	; 1
 39e:	09 f0       	breq	.+2      	; 0x3a2 <DIO_setPinDir+0x72>
 3a0:	51 c0       	rjmp	.+162    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			SET_BIT(DDRB,pinNum);
 3a2:	47 b3       	in	r20, 0x17	; 23
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	b9 01       	movw	r22, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_setPinDir+0x80>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	9a 95       	dec	r25
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_setPinDir+0x7c>
 3b4:	cb 01       	movw	r24, r22
 3b6:	84 2b       	or	r24, r20
 3b8:	87 bb       	out	0x17, r24	; 23
 3ba:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 3bc:	90 ef       	ldi	r25, 0xF0	; 240
 3be:	98 0f       	add	r25, r24
 3c0:	98 30       	cpi	r25, 0x08	; 8
 3c2:	f8 f4       	brcc	.+62     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 3c4:	61 11       	cpse	r22, r1
 3c6:	0e c0       	rjmp	.+28     	; 0x3e4 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 3c8:	44 b3       	in	r20, 0x14	; 20
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_setPinDir+0xa6>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	9a 95       	dec	r25
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_setPinDir+0xa2>
 3da:	cb 01       	movw	r24, r22
 3dc:	80 95       	com	r24
 3de:	84 23       	and	r24, r20
 3e0:	84 bb       	out	0x14, r24	; 20
 3e2:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 3e4:	61 30       	cpi	r22, 0x01	; 1
 3e6:	71 f5       	brne	.+92     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			SET_BIT(DDRC,pinNum);
 3e8:	44 b3       	in	r20, 0x14	; 20
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	b9 01       	movw	r22, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_setPinDir+0xc6>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	9a 95       	dec	r25
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_setPinDir+0xc2>
 3fa:	cb 01       	movw	r24, r22
 3fc:	84 2b       	or	r24, r20
 3fe:	84 bb       	out	0x14, r24	; 20
 400:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 402:	88 51       	subi	r24, 0x18	; 24
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	f0 f4       	brcc	.+60     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 408:	61 11       	cpse	r22, r1
 40a:	0e c0       	rjmp	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			CLEAR_BIT(DDRC,pinNum);
 40c:	44 b3       	in	r20, 0x14	; 20
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	b9 01       	movw	r22, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	8a 95       	dec	r24
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	cb 01       	movw	r24, r22
 420:	80 95       	com	r24
 422:	84 23       	and	r24, r20
 424:	84 bb       	out	0x14, r24	; 20
 426:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 428:	61 30       	cpi	r22, 0x01	; 1
 42a:	61 f4       	brne	.+24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			SET_BIT(DDRC,pinNum);
 42c:	44 b3       	in	r20, 0x14	; 20
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	cb 01       	movw	r24, r22
 440:	84 2b       	or	r24, r20
 442:	84 bb       	out	0x14, r24	; 20
 444:	08 95       	ret

00000446 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 446:	88 30       	cpi	r24, 0x08	; 8
 448:	00 f5       	brcc	.+64     	; 0x48a <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 44a:	61 11       	cpse	r22, r1
 44c:	0e c0       	rjmp	.+28     	; 0x46a <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 44e:	4b b3       	in	r20, 0x1b	; 27
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	b9 01       	movw	r22, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_setPinValue+0x16>
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	8a 95       	dec	r24
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_setPinValue+0x12>
 460:	cb 01       	movw	r24, r22
 462:	80 95       	com	r24
 464:	84 23       	and	r24, r20
 466:	8b bb       	out	0x1b, r24	; 27
 468:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 46a:	61 30       	cpi	r22, 0x01	; 1
 46c:	09 f0       	breq	.+2      	; 0x470 <DIO_setPinValue+0x2a>
 46e:	75 c0       	rjmp	.+234    	; 0x55a <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 470:	4b b3       	in	r20, 0x1b	; 27
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_setPinValue+0x38>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_setPinValue+0x34>
 482:	cb 01       	movw	r24, r22
 484:	84 2b       	or	r24, r20
 486:	8b bb       	out	0x1b, r24	; 27
 488:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 48a:	98 ef       	ldi	r25, 0xF8	; 248
 48c:	98 0f       	add	r25, r24
 48e:	98 30       	cpi	r25, 0x08	; 8
 490:	00 f5       	brcc	.+64     	; 0x4d2 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 492:	61 11       	cpse	r22, r1
 494:	0e c0       	rjmp	.+28     	; 0x4b2 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 496:	48 b3       	in	r20, 0x18	; 24
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	b9 01       	movw	r22, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_setPinValue+0x5e>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	9a 95       	dec	r25
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_setPinValue+0x5a>
 4a8:	cb 01       	movw	r24, r22
 4aa:	80 95       	com	r24
 4ac:	84 23       	and	r24, r20
 4ae:	88 bb       	out	0x18, r24	; 24
 4b0:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4b2:	61 30       	cpi	r22, 0x01	; 1
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <DIO_setPinValue+0x72>
 4b6:	51 c0       	rjmp	.+162    	; 0x55a <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 4b8:	48 b3       	in	r20, 0x18	; 24
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_setPinValue+0x80>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	9a 95       	dec	r25
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_setPinValue+0x7c>
 4ca:	cb 01       	movw	r24, r22
 4cc:	84 2b       	or	r24, r20
 4ce:	88 bb       	out	0x18, r24	; 24
 4d0:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 4d2:	90 ef       	ldi	r25, 0xF0	; 240
 4d4:	98 0f       	add	r25, r24
 4d6:	98 30       	cpi	r25, 0x08	; 8
 4d8:	f8 f4       	brcc	.+62     	; 0x518 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 4da:	61 11       	cpse	r22, r1
 4dc:	0e c0       	rjmp	.+28     	; 0x4fa <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 4de:	45 b3       	in	r20, 0x15	; 21
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_setPinValue+0xa6>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	9a 95       	dec	r25
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_setPinValue+0xa2>
 4f0:	cb 01       	movw	r24, r22
 4f2:	80 95       	com	r24
 4f4:	84 23       	and	r24, r20
 4f6:	85 bb       	out	0x15, r24	; 21
 4f8:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4fa:	61 30       	cpi	r22, 0x01	; 1
 4fc:	71 f5       	brne	.+92     	; 0x55a <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 4fe:	45 b3       	in	r20, 0x15	; 21
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	b9 01       	movw	r22, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_setPinValue+0xc6>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	9a 95       	dec	r25
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_setPinValue+0xc2>
 510:	cb 01       	movw	r24, r22
 512:	84 2b       	or	r24, r20
 514:	85 bb       	out	0x15, r24	; 21
 516:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 518:	88 51       	subi	r24, 0x18	; 24
 51a:	88 30       	cpi	r24, 0x08	; 8
 51c:	f0 f4       	brcc	.+60     	; 0x55a <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 51e:	61 11       	cpse	r22, r1
 520:	0e c0       	rjmp	.+28     	; 0x53e <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 522:	42 b3       	in	r20, 0x12	; 18
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_setPinValue+0xea>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	8a 95       	dec	r24
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_setPinValue+0xe6>
 534:	cb 01       	movw	r24, r22
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	82 bb       	out	0x12, r24	; 18
 53c:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 53e:	61 30       	cpi	r22, 0x01	; 1
 540:	61 f4       	brne	.+24     	; 0x55a <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 542:	42 b3       	in	r20, 0x12	; 18
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	b9 01       	movw	r22, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_setPinValue+0x10a>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_setPinValue+0x106>
 554:	cb 01       	movw	r24, r22
 556:	84 2b       	or	r24, r20
 558:	82 bb       	out	0x12, r24	; 18
 55a:	08 95       	ret

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
