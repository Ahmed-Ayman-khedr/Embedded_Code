
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000015a0  00001634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006b5  0080006c  0080006c  00001640  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034ae  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001107  00000000  00000000  00004f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000231c  00000000  00000000  000060a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c24  00000000  00000000  000083c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001337  00000000  00000000  00008fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000303b  00000000  00000000  0000a31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0000d356  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_1>
       8:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_2>
       c:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_6>
      1c:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_10>
      2c:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 

#include "Sess33FREERTOS/TASKSUSPENDBUTTON/sess_INT.h"

int main(){
	source_code();
      92:	0e 94 7f 00 	call	0xfe	; 0xfe <source_code>
	return 0;
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	08 95       	ret

0000009c <task1>:
TaskHandle_t xHandle3;

void task1(void * pvParameters){
	while (1)
	{
		DIO_togglePinValue(DIO_PINC2);
      9c:	82 e1       	ldi	r24, 0x12	; 18
      9e:	0e 94 b1 09 	call	0x1362	; 0x1362 <DIO_togglePinValue>
		vTaskDelay(500/portTICK_PERIOD_MS);
      a2:	84 ef       	ldi	r24, 0xF4	; 244
      a4:	91 e0       	ldi	r25, 0x01	; 1
      a6:	0e 94 9a 07 	call	0xf34	; 0xf34 <vTaskDelay>
      aa:	f8 cf       	rjmp	.-16     	; 0x9c <task1>

000000ac <task2>:
}

void task2(void * pvParameters){
	while (1)
	{
		DIO_togglePinValue(DIO_PINC7);
      ac:	87 e1       	ldi	r24, 0x17	; 23
      ae:	0e 94 b1 09 	call	0x1362	; 0x1362 <DIO_togglePinValue>
		vTaskDelay(500/portTICK_PERIOD_MS);
      b2:	84 ef       	ldi	r24, 0xF4	; 244
      b4:	91 e0       	ldi	r25, 0x01	; 1
      b6:	0e 94 9a 07 	call	0xf34	; 0xf34 <vTaskDelay>
      ba:	f8 cf       	rjmp	.-16     	; 0xac <task2>

000000bc <task3>:
	}
}

void task3(void * pvParameters){
	BOOL flage = FALSE;
      bc:	c0 e0       	ldi	r28, 0x00	; 0
	while (1)
	{
		u8 state = DIO_readPinValue(DIO_PIND0);
      be:	88 e1       	ldi	r24, 0x18	; 24
      c0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_readPinValue>
		if (state==DIO_HIGH)
      c4:	81 30       	cpi	r24, 0x01	; 1
      c6:	b1 f4       	brne	.+44     	; 0xf4 <task3+0x38>
		{
			if (flage == FALSE)
      c8:	c1 11       	cpse	r28, r1
      ca:	08 c0       	rjmp	.+16     	; 0xdc <task3+0x20>
			{
				vTaskSuspend(xHandle1);	
      cc:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xHandle1>
      d0:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <xHandle1+0x1>
      d4:	0e 94 04 08 	call	0x1008	; 0x1008 <vTaskSuspend>
				flage = TRUE;
      d8:	c1 e0       	ldi	r28, 0x01	; 1
      da:	07 c0       	rjmp	.+14     	; 0xea <task3+0x2e>
			}
			else
			{
				vTaskResume(xHandle1);
      dc:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xHandle1>
      e0:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <xHandle1+0x1>
      e4:	0e 94 13 05 	call	0xa26	; 0xa26 <vTaskResume>
				flage = FALSE;
      e8:	c0 e0       	ldi	r28, 0x00	; 0
			}
			while(DIO_readPinValue(DIO_PIND0)==DIO_HIGH);
      ea:	88 e1       	ldi	r24, 0x18	; 24
      ec:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_readPinValue>
      f0:	81 30       	cpi	r24, 0x01	; 1
      f2:	d9 f3       	breq	.-10     	; 0xea <task3+0x2e>
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 9a 07 	call	0xf34	; 0xf34 <vTaskDelay>
	}
      fc:	e0 cf       	rjmp	.-64     	; 0xbe <task3+0x2>

000000fe <source_code>:
}

int source_code()
{	
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	82 e1       	ldi	r24, 0x12	; 18
     102:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_setPinDir>
	DIO_setPinDir(DIO_PINC7,DIO_OUTPUT);
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	87 e1       	ldi	r24, 0x17	; 23
     10a:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_setPinDir>
	DIO_setPinDir(DIO_PINA3,DIO_OUTPUT);
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_setPinDir>
	
	DIO_setPinDir(DIO_PIND0,DIO_INPUT);
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	88 e1       	ldi	r24, 0x18	; 24
     11a:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_setPinDir>
	
	xTaskCreate(
     11e:	0f 2e       	mov	r0, r31
     120:	ff e0       	ldi	r31, 0x0F	; 15
     122:	ef 2e       	mov	r14, r31
     124:	f7 e0       	ldi	r31, 0x07	; 7
     126:	ff 2e       	mov	r15, r31
     128:	f0 2d       	mov	r31, r0
     12a:	01 e0       	ldi	r16, 0x01	; 1
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	44 e6       	ldi	r20, 0x64	; 100
     132:	50 e0       	ldi	r21, 0x00	; 0
     134:	61 e6       	ldi	r22, 0x61	; 97
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	8e e4       	ldi	r24, 0x4E	; 78
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 ba 04 	call	0x974	; 0x974 <xTaskCreate>
		100,      /* Stack size in words, not bytes. */
		NULL,    /* Parameter passed into the task. */
		1,/* Priority at which the task is created. */
		&xHandle1 ); /* Used to pass out the created task's handle. */
		
	xTaskCreate(task2,NULL,100,NULL,1,&xHandle2);
     140:	0f 2e       	mov	r0, r31
     142:	fd e0       	ldi	r31, 0x0D	; 13
     144:	ef 2e       	mov	r14, r31
     146:	f7 e0       	ldi	r31, 0x07	; 7
     148:	ff 2e       	mov	r15, r31
     14a:	f0 2d       	mov	r31, r0
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	44 e6       	ldi	r20, 0x64	; 100
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	86 e5       	ldi	r24, 0x56	; 86
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 ba 04 	call	0x974	; 0x974 <xTaskCreate>
	
	xTaskCreate(task3,NULL,100,NULL,0,&xHandle3);
     160:	0f 2e       	mov	r0, r31
     162:	f1 e1       	ldi	r31, 0x11	; 17
     164:	ef 2e       	mov	r14, r31
     166:	f7 e0       	ldi	r31, 0x07	; 7
     168:	ff 2e       	mov	r15, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	00 e0       	ldi	r16, 0x00	; 0
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	44 e6       	ldi	r20, 0x64	; 100
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	8e e5       	ldi	r24, 0x5E	; 94
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 ba 04 	call	0x974	; 0x974 <xTaskCreate>
	
	vTaskStartScheduler();
     182:	0e 94 79 05 	call	0xaf2	; 0xaf2 <vTaskStartScheduler>
     186:	ff cf       	rjmp	.-2      	; 0x186 <source_code+0x88>

00000188 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
     18e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     192:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     196:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
     19a:	89 2b       	or	r24, r25
     19c:	31 f4       	brne	.+12     	; 0x1aa <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     19e:	80 e7       	ldi	r24, 0x70	; 112
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
     1a6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     1aa:	20 97       	sbiw	r28, 0x00	; 0
     1ac:	c9 f0       	breq	.+50     	; 0x1e0 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     1ae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <xNextFreeByte>
     1b2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <xNextFreeByte+0x1>
     1b6:	9e 01       	movw	r18, r28
     1b8:	28 0f       	add	r18, r24
     1ba:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     1bc:	2f 33       	cpi	r18, 0x3F	; 63
     1be:	46 e0       	ldi	r20, 0x06	; 6
     1c0:	34 07       	cpc	r19, r20
     1c2:	88 f4       	brcc	.+34     	; 0x1e6 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     1c4:	82 17       	cp	r24, r18
     1c6:	93 07       	cpc	r25, r19
     1c8:	88 f4       	brcc	.+34     	; 0x1ec <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     1ca:	c0 91 6c 00 	lds	r28, 0x006C	; 0x80006c <__data_end>
     1ce:	d0 91 6d 00 	lds	r29, 0x006D	; 0x80006d <__data_end+0x1>
     1d2:	c8 0f       	add	r28, r24
     1d4:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     1d6:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <xNextFreeByte+0x1>
     1da:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <xNextFreeByte>
     1de:	08 c0       	rjmp	.+16     	; 0x1f0 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     1e0:	c0 e0       	ldi	r28, 0x00	; 0
     1e2:	d0 e0       	ldi	r29, 0x00	; 0
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <pvPortMalloc+0x68>
     1e6:	c0 e0       	ldi	r28, 0x00	; 0
     1e8:	d0 e0       	ldi	r29, 0x00	; 0
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <pvPortMalloc+0x68>
     1ec:	c0 e0       	ldi	r28, 0x00	; 0
     1ee:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     1f0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     1f4:	ce 01       	movw	r24, r28
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     1fc:	08 95       	ret

000001fe <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     1fe:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     200:	03 96       	adiw	r24, 0x03	; 3
     202:	92 83       	std	Z+2, r25	; 0x02
     204:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	34 83       	std	Z+4, r19	; 0x04
     20c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     20e:	96 83       	std	Z+6, r25	; 0x06
     210:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     212:	90 87       	std	Z+8, r25	; 0x08
     214:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     216:	10 82       	st	Z, r1
     218:	08 95       	ret

0000021a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     21a:	fc 01       	movw	r30, r24
     21c:	11 86       	std	Z+9, r1	; 0x09
     21e:	10 86       	std	Z+8, r1	; 0x08
     220:	08 95       	ret

00000222 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	9c 01       	movw	r18, r24
     228:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     22a:	dc 01       	movw	r26, r24
     22c:	11 96       	adiw	r26, 0x01	; 1
     22e:	cd 91       	ld	r28, X+
     230:	dc 91       	ld	r29, X
     232:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     234:	d3 83       	std	Z+3, r29	; 0x03
     236:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     238:	8c 81       	ldd	r24, Y+4	; 0x04
     23a:	9d 81       	ldd	r25, Y+5	; 0x05
     23c:	95 83       	std	Z+5, r25	; 0x05
     23e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     240:	8c 81       	ldd	r24, Y+4	; 0x04
     242:	9d 81       	ldd	r25, Y+5	; 0x05
     244:	dc 01       	movw	r26, r24
     246:	13 96       	adiw	r26, 0x03	; 3
     248:	7c 93       	st	X, r23
     24a:	6e 93       	st	-X, r22
     24c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     24e:	7d 83       	std	Y+5, r23	; 0x05
     250:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     252:	31 87       	std	Z+9, r19	; 0x09
     254:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     256:	f9 01       	movw	r30, r18
     258:	80 81       	ld	r24, Z
     25a:	8f 5f       	subi	r24, 0xFF	; 255
     25c:	80 83       	st	Z, r24
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     26a:	48 81       	ld	r20, Y
     26c:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     26e:	4f 3f       	cpi	r20, 0xFF	; 255
     270:	2f ef       	ldi	r18, 0xFF	; 255
     272:	52 07       	cpc	r21, r18
     274:	21 f4       	brne	.+8      	; 0x27e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     276:	fc 01       	movw	r30, r24
     278:	a7 81       	ldd	r26, Z+7	; 0x07
     27a:	b0 85       	ldd	r27, Z+8	; 0x08
     27c:	0d c0       	rjmp	.+26     	; 0x298 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     27e:	dc 01       	movw	r26, r24
     280:	13 96       	adiw	r26, 0x03	; 3
     282:	01 c0       	rjmp	.+2      	; 0x286 <vListInsert+0x22>
     284:	df 01       	movw	r26, r30
     286:	12 96       	adiw	r26, 0x02	; 2
     288:	ed 91       	ld	r30, X+
     28a:	fc 91       	ld	r31, X
     28c:	13 97       	sbiw	r26, 0x03	; 3
     28e:	20 81       	ld	r18, Z
     290:	31 81       	ldd	r19, Z+1	; 0x01
     292:	42 17       	cp	r20, r18
     294:	53 07       	cpc	r21, r19
     296:	b0 f7       	brcc	.-20     	; 0x284 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     298:	12 96       	adiw	r26, 0x02	; 2
     29a:	ed 91       	ld	r30, X+
     29c:	fc 91       	ld	r31, X
     29e:	13 97       	sbiw	r26, 0x03	; 3
     2a0:	fb 83       	std	Y+3, r31	; 0x03
     2a2:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     2a4:	d5 83       	std	Z+5, r29	; 0x05
     2a6:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     2a8:	bd 83       	std	Y+5, r27	; 0x05
     2aa:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     2ac:	13 96       	adiw	r26, 0x03	; 3
     2ae:	dc 93       	st	X, r29
     2b0:	ce 93       	st	-X, r28
     2b2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     2b4:	99 87       	std	Y+9, r25	; 0x09
     2b6:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 81       	ld	r18, Z
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	20 83       	st	Z, r18
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     2cc:	a0 85       	ldd	r26, Z+8	; 0x08
     2ce:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     2d0:	c2 81       	ldd	r28, Z+2	; 0x02
     2d2:	d3 81       	ldd	r29, Z+3	; 0x03
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
     2d6:	95 81       	ldd	r25, Z+5	; 0x05
     2d8:	9d 83       	std	Y+5, r25	; 0x05
     2da:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     2dc:	c4 81       	ldd	r28, Z+4	; 0x04
     2de:	d5 81       	ldd	r29, Z+5	; 0x05
     2e0:	82 81       	ldd	r24, Z+2	; 0x02
     2e2:	93 81       	ldd	r25, Z+3	; 0x03
     2e4:	9b 83       	std	Y+3, r25	; 0x03
     2e6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     2e8:	11 96       	adiw	r26, 0x01	; 1
     2ea:	8d 91       	ld	r24, X+
     2ec:	9c 91       	ld	r25, X
     2ee:	12 97       	sbiw	r26, 0x02	; 2
     2f0:	e8 17       	cp	r30, r24
     2f2:	f9 07       	cpc	r31, r25
     2f4:	31 f4       	brne	.+12     	; 0x302 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     2f6:	84 81       	ldd	r24, Z+4	; 0x04
     2f8:	95 81       	ldd	r25, Z+5	; 0x05
     2fa:	12 96       	adiw	r26, 0x02	; 2
     2fc:	9c 93       	st	X, r25
     2fe:	8e 93       	st	-X, r24
     300:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     302:	11 86       	std	Z+9, r1	; 0x09
     304:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     306:	8c 91       	ld	r24, X
     308:	81 50       	subi	r24, 0x01	; 1
     30a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     30c:	8c 91       	ld	r24, X
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     314:	1b bc       	out	0x2b, r1	; 43
     316:	89 ef       	ldi	r24, 0xF9	; 249
     318:	8a bd       	out	0x2a, r24	; 42
     31a:	8b e0       	ldi	r24, 0x0B	; 11
     31c:	8e bd       	out	0x2e, r24	; 46
     31e:	89 b7       	in	r24, 0x39	; 57
     320:	80 61       	ori	r24, 0x10	; 16
     322:	89 bf       	out	0x39, r24	; 57
     324:	08 95       	ret

00000326 <pxPortInitialiseStack>:
     326:	31 e1       	ldi	r19, 0x11	; 17
     328:	fc 01       	movw	r30, r24
     32a:	30 83       	st	Z, r19
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	22 e2       	ldi	r18, 0x22	; 34
     330:	20 83       	st	Z, r18
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	a3 e3       	ldi	r26, 0x33	; 51
     336:	a0 83       	st	Z, r26
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	60 83       	st	Z, r22
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	70 83       	st	Z, r23
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	10 82       	st	Z, r1
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	60 e8       	ldi	r22, 0x80	; 128
     348:	60 83       	st	Z, r22
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	10 82       	st	Z, r1
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	62 e0       	ldi	r22, 0x02	; 2
     352:	60 83       	st	Z, r22
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	63 e0       	ldi	r22, 0x03	; 3
     358:	60 83       	st	Z, r22
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	64 e0       	ldi	r22, 0x04	; 4
     35e:	60 83       	st	Z, r22
     360:	31 97       	sbiw	r30, 0x01	; 1
     362:	65 e0       	ldi	r22, 0x05	; 5
     364:	60 83       	st	Z, r22
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	66 e0       	ldi	r22, 0x06	; 6
     36a:	60 83       	st	Z, r22
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	67 e0       	ldi	r22, 0x07	; 7
     370:	60 83       	st	Z, r22
     372:	31 97       	sbiw	r30, 0x01	; 1
     374:	68 e0       	ldi	r22, 0x08	; 8
     376:	60 83       	st	Z, r22
     378:	31 97       	sbiw	r30, 0x01	; 1
     37a:	69 e0       	ldi	r22, 0x09	; 9
     37c:	60 83       	st	Z, r22
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	60 83       	st	Z, r22
     384:	31 97       	sbiw	r30, 0x01	; 1
     386:	30 83       	st	Z, r19
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	32 e1       	ldi	r19, 0x12	; 18
     38c:	30 83       	st	Z, r19
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	33 e1       	ldi	r19, 0x13	; 19
     392:	30 83       	st	Z, r19
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	34 e1       	ldi	r19, 0x14	; 20
     398:	30 83       	st	Z, r19
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	35 e1       	ldi	r19, 0x15	; 21
     39e:	30 83       	st	Z, r19
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	36 e1       	ldi	r19, 0x16	; 22
     3a4:	30 83       	st	Z, r19
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	37 e1       	ldi	r19, 0x17	; 23
     3aa:	30 83       	st	Z, r19
     3ac:	31 97       	sbiw	r30, 0x01	; 1
     3ae:	38 e1       	ldi	r19, 0x18	; 24
     3b0:	30 83       	st	Z, r19
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	39 e1       	ldi	r19, 0x19	; 25
     3b6:	30 83       	st	Z, r19
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	30 e2       	ldi	r19, 0x20	; 32
     3bc:	30 83       	st	Z, r19
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	31 e2       	ldi	r19, 0x21	; 33
     3c2:	30 83       	st	Z, r19
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	20 83       	st	Z, r18
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	23 e2       	ldi	r18, 0x23	; 35
     3cc:	20 83       	st	Z, r18
     3ce:	31 97       	sbiw	r30, 0x01	; 1
     3d0:	40 83       	st	Z, r20
     3d2:	31 97       	sbiw	r30, 0x01	; 1
     3d4:	50 83       	st	Z, r21
     3d6:	31 97       	sbiw	r30, 0x01	; 1
     3d8:	26 e2       	ldi	r18, 0x26	; 38
     3da:	20 83       	st	Z, r18
     3dc:	31 97       	sbiw	r30, 0x01	; 1
     3de:	27 e2       	ldi	r18, 0x27	; 39
     3e0:	20 83       	st	Z, r18
     3e2:	31 97       	sbiw	r30, 0x01	; 1
     3e4:	28 e2       	ldi	r18, 0x28	; 40
     3e6:	20 83       	st	Z, r18
     3e8:	31 97       	sbiw	r30, 0x01	; 1
     3ea:	29 e2       	ldi	r18, 0x29	; 41
     3ec:	20 83       	st	Z, r18
     3ee:	31 97       	sbiw	r30, 0x01	; 1
     3f0:	20 e3       	ldi	r18, 0x30	; 48
     3f2:	20 83       	st	Z, r18
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	21 e3       	ldi	r18, 0x31	; 49
     3f8:	20 83       	st	Z, r18
     3fa:	86 97       	sbiw	r24, 0x26	; 38
     3fc:	08 95       	ret

000003fe <xPortStartScheduler>:
     3fe:	0e 94 8a 01 	call	0x314	; 0x314 <prvSetupTimerInterrupt>
     402:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     406:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     40a:	cd 91       	ld	r28, X+
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	dd 91       	ld	r29, X+
     410:	de bf       	out	0x3e, r29	; 62
     412:	ff 91       	pop	r31
     414:	ef 91       	pop	r30
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	3f 90       	pop	r3
     44c:	2f 90       	pop	r2
     44e:	1f 90       	pop	r1
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	08 95       	ret
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	08 95       	ret

0000045c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	0f 92       	push	r0
     464:	1f 92       	push	r1
     466:	11 24       	eor	r1, r1
     468:	2f 92       	push	r2
     46a:	3f 92       	push	r3
     46c:	4f 92       	push	r4
     46e:	5f 92       	push	r5
     470:	6f 92       	push	r6
     472:	7f 92       	push	r7
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     4a8:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     4ac:	0d b6       	in	r0, 0x3d	; 61
     4ae:	0d 92       	st	X+, r0
     4b0:	0e b6       	in	r0, 0x3e	; 62
     4b2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     4b4:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     4b8:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     4bc:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     4c0:	cd 91       	ld	r28, X+
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	dd 91       	ld	r29, X+
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	ff 91       	pop	r31
     4ca:	ef 91       	pop	r30
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	bf 91       	pop	r27
     4d2:	af 91       	pop	r26
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	7f 91       	pop	r23
     4da:	6f 91       	pop	r22
     4dc:	5f 91       	pop	r21
     4de:	4f 91       	pop	r20
     4e0:	3f 91       	pop	r19
     4e2:	2f 91       	pop	r18
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	9f 90       	pop	r9
     4f6:	8f 90       	pop	r8
     4f8:	7f 90       	pop	r7
     4fa:	6f 90       	pop	r6
     4fc:	5f 90       	pop	r5
     4fe:	4f 90       	pop	r4
     500:	3f 90       	pop	r3
     502:	2f 90       	pop	r2
     504:	1f 90       	pop	r1
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     50c:	08 95       	ret

0000050e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	0f 92       	push	r0
     516:	1f 92       	push	r1
     518:	11 24       	eor	r1, r1
     51a:	2f 92       	push	r2
     51c:	3f 92       	push	r3
     51e:	4f 92       	push	r4
     520:	5f 92       	push	r5
     522:	6f 92       	push	r6
     524:	7f 92       	push	r7
     526:	8f 92       	push	r8
     528:	9f 92       	push	r9
     52a:	af 92       	push	r10
     52c:	bf 92       	push	r11
     52e:	cf 92       	push	r12
     530:	df 92       	push	r13
     532:	ef 92       	push	r14
     534:	ff 92       	push	r15
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	4f 93       	push	r20
     540:	5f 93       	push	r21
     542:	6f 93       	push	r22
     544:	7f 93       	push	r23
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	af 93       	push	r26
     54c:	bf 93       	push	r27
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ef 93       	push	r30
     554:	ff 93       	push	r31
     556:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     55a:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     55e:	0d b6       	in	r0, 0x3d	; 61
     560:	0d 92       	st	X+, r0
     562:	0e b6       	in	r0, 0x3e	; 62
     564:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     566:	0e 94 ab 05 	call	0xb56	; 0xb56 <xTaskIncrementTick>
     56a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     56c:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     570:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     574:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     578:	cd 91       	ld	r28, X+
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	dd 91       	ld	r29, X+
     57e:	de bf       	out	0x3e, r29	; 62
     580:	ff 91       	pop	r31
     582:	ef 91       	pop	r30
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	bf 91       	pop	r27
     58a:	af 91       	pop	r26
     58c:	9f 91       	pop	r25
     58e:	8f 91       	pop	r24
     590:	7f 91       	pop	r23
     592:	6f 91       	pop	r22
     594:	5f 91       	pop	r21
     596:	4f 91       	pop	r20
     598:	3f 91       	pop	r19
     59a:	2f 91       	pop	r18
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	cf 90       	pop	r12
     5a8:	bf 90       	pop	r11
     5aa:	af 90       	pop	r10
     5ac:	9f 90       	pop	r9
     5ae:	8f 90       	pop	r8
     5b0:	7f 90       	pop	r7
     5b2:	6f 90       	pop	r6
     5b4:	5f 90       	pop	r5
     5b6:	4f 90       	pop	r4
     5b8:	3f 90       	pop	r3
     5ba:	2f 90       	pop	r2
     5bc:	1f 90       	pop	r1
     5be:	0f 90       	pop	r0
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	0f 90       	pop	r0

	asm volatile ( "ret" );
     5c4:	08 95       	ret

000005c6 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     5c6:	0e 94 87 02 	call	0x50e	; 0x50e <vPortYieldFromTick>
		asm volatile ( "reti" );
     5ca:	18 95       	reti

000005cc <prvTaskIsTaskSuspended>:
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     5cc:	fc 01       	movw	r30, r24
     5ce:	22 85       	ldd	r18, Z+10	; 0x0a
     5d0:	33 85       	ldd	r19, Z+11	; 0x0b
     5d2:	2f 5b       	subi	r18, 0xBF	; 191
     5d4:	36 40       	sbci	r19, 0x06	; 6
     5d6:	59 f4       	brne	.+22     	; 0x5ee <prvTaskIsTaskSuspended+0x22>
     5d8:	fc 01       	movw	r30, r24
     5da:	84 89       	ldd	r24, Z+20	; 0x14
     5dc:	95 89       	ldd	r25, Z+21	; 0x15
     5de:	f6 e0       	ldi	r31, 0x06	; 6
     5e0:	88 3c       	cpi	r24, 0xC8	; 200
     5e2:	9f 07       	cpc	r25, r31
     5e4:	31 f0       	breq	.+12     	; 0x5f2 <prvTaskIsTaskSuspended+0x26>
     5e6:	89 2b       	or	r24, r25
     5e8:	31 f0       	breq	.+12     	; 0x5f6 <prvTaskIsTaskSuspended+0x2a>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	08 95       	ret
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	08 95       	ret

000005fa <prvResetNextTaskUnblockTime>:
     5fa:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     5fe:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     602:	80 81       	ld	r24, Z
     604:	81 11       	cpse	r24, r1
     606:	07 c0       	rjmp	.+14     	; 0x616 <prvResetNextTaskUnblockTime+0x1c>
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     610:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <xNextTaskUnblockTime>
     614:	08 95       	ret
     616:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     61a:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     61e:	05 80       	ldd	r0, Z+5	; 0x05
     620:	f6 81       	ldd	r31, Z+6	; 0x06
     622:	e0 2d       	mov	r30, r0
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     62c:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <xNextTaskUnblockTime>
     630:	08 95       	ret

00000632 <prvInitialiseNewTask>:
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	4c 01       	movw	r8, r24
     652:	f5 01       	movw	r30, r10
     654:	87 89       	ldd	r24, Z+23	; 0x17
     656:	90 8d       	ldd	r25, Z+24	; 0x18
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	31 09       	sbc	r19, r1
     65c:	3c 01       	movw	r6, r24
     65e:	62 0e       	add	r6, r18
     660:	73 1e       	adc	r7, r19
     662:	61 15       	cp	r22, r1
     664:	71 05       	cpc	r23, r1
     666:	89 f4       	brne	.+34     	; 0x68a <prvInitialiseNewTask+0x58>
     668:	15 c0       	rjmp	.+42     	; 0x694 <prvInitialiseNewTask+0x62>
     66a:	82 2f       	mov	r24, r18
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fb 01       	movw	r30, r22
     670:	e8 0f       	add	r30, r24
     672:	f9 1f       	adc	r31, r25
     674:	30 81       	ld	r19, Z
     676:	d5 01       	movw	r26, r10
     678:	a8 0f       	add	r26, r24
     67a:	b9 1f       	adc	r27, r25
     67c:	59 96       	adiw	r26, 0x19	; 25
     67e:	3c 93       	st	X, r19
     680:	80 81       	ld	r24, Z
     682:	88 23       	and	r24, r24
     684:	29 f0       	breq	.+10     	; 0x690 <prvInitialiseNewTask+0x5e>
     686:	2f 5f       	subi	r18, 0xFF	; 255
     688:	01 c0       	rjmp	.+2      	; 0x68c <prvInitialiseNewTask+0x5a>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	28 30       	cpi	r18, 0x08	; 8
     68e:	68 f3       	brcs	.-38     	; 0x66a <prvInitialiseNewTask+0x38>
     690:	f5 01       	movw	r30, r10
     692:	10 a2       	std	Z+32, r1	; 0x20
     694:	f3 e0       	ldi	r31, 0x03	; 3
     696:	fe 15       	cp	r31, r14
     698:	20 f4       	brcc	.+8      	; 0x6a2 <prvInitialiseNewTask+0x70>
     69a:	0f 2e       	mov	r0, r31
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	ef 2e       	mov	r14, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	f5 01       	movw	r30, r10
     6a4:	e6 8a       	std	Z+22, r14	; 0x16
     6a6:	c5 01       	movw	r24, r10
     6a8:	02 96       	adiw	r24, 0x02	; 2
     6aa:	0e 94 0d 01 	call	0x21a	; 0x21a <vListInitialiseItem>
     6ae:	c5 01       	movw	r24, r10
     6b0:	0c 96       	adiw	r24, 0x0c	; 12
     6b2:	0e 94 0d 01 	call	0x21a	; 0x21a <vListInitialiseItem>
     6b6:	f5 01       	movw	r30, r10
     6b8:	b1 86       	std	Z+9, r11	; 0x09
     6ba:	a0 86       	std	Z+8, r10	; 0x08
     6bc:	84 e0       	ldi	r24, 0x04	; 4
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	8e 19       	sub	r24, r14
     6c2:	91 09       	sbc	r25, r1
     6c4:	95 87       	std	Z+13, r25	; 0x0d
     6c6:	84 87       	std	Z+12, r24	; 0x0c
     6c8:	b3 8a       	std	Z+19, r11	; 0x13
     6ca:	a2 8a       	std	Z+18, r10	; 0x12
     6cc:	a8 01       	movw	r20, r16
     6ce:	b4 01       	movw	r22, r8
     6d0:	c3 01       	movw	r24, r6
     6d2:	0e 94 93 01 	call	0x326	; 0x326 <pxPortInitialiseStack>
     6d6:	f5 01       	movw	r30, r10
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
     6dc:	c1 14       	cp	r12, r1
     6de:	d1 04       	cpc	r13, r1
     6e0:	19 f0       	breq	.+6      	; 0x6e8 <prvInitialiseNewTask+0xb6>
     6e2:	f6 01       	movw	r30, r12
     6e4:	b1 82       	std	Z+1, r11	; 0x01
     6e6:	a0 82       	st	Z, r10
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	bf 90       	pop	r11
     6f8:	af 90       	pop	r10
     6fa:	9f 90       	pop	r9
     6fc:	8f 90       	pop	r8
     6fe:	7f 90       	pop	r7
     700:	6f 90       	pop	r6
     702:	08 95       	ret

00000704 <prvIdleTask>:
     704:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <pxReadyTasksLists>
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	e0 f3       	brcs	.-8      	; 0x704 <prvIdleTask>
     70c:	0e 94 2e 02 	call	0x45c	; 0x45c <vPortYield>
     710:	f9 cf       	rjmp	.-14     	; 0x704 <prvIdleTask>

00000712 <prvInitialiseTaskLists>:
     712:	cf 93       	push	r28
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	10 c0       	rjmp	.+32     	; 0x738 <prvInitialiseTaskLists+0x26>
     718:	8c 2f       	mov	r24, r28
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	9c 01       	movw	r18, r24
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	82 0f       	add	r24, r18
     72c:	93 1f       	adc	r25, r19
     72e:	89 51       	subi	r24, 0x19	; 25
     730:	99 4f       	sbci	r25, 0xF9	; 249
     732:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListInitialise>
     736:	cf 5f       	subi	r28, 0xFF	; 255
     738:	c4 30       	cpi	r28, 0x04	; 4
     73a:	70 f3       	brcs	.-36     	; 0x718 <prvInitialiseTaskLists+0x6>
     73c:	8e ed       	ldi	r24, 0xDE	; 222
     73e:	96 e0       	ldi	r25, 0x06	; 6
     740:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListInitialise>
     744:	85 ed       	ldi	r24, 0xD5	; 213
     746:	96 e0       	ldi	r25, 0x06	; 6
     748:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListInitialise>
     74c:	88 ec       	ldi	r24, 0xC8	; 200
     74e:	96 e0       	ldi	r25, 0x06	; 6
     750:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListInitialise>
     754:	8f eb       	ldi	r24, 0xBF	; 191
     756:	96 e0       	ldi	r25, 0x06	; 6
     758:	0e 94 ff 00 	call	0x1fe	; 0x1fe <vListInitialise>
     75c:	8e ed       	ldi	r24, 0xDE	; 222
     75e:	96 e0       	ldi	r25, 0x06	; 6
     760:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <pxDelayedTaskList+0x1>
     764:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <pxDelayedTaskList>
     768:	85 ed       	ldi	r24, 0xD5	; 213
     76a:	96 e0       	ldi	r25, 0x06	; 6
     76c:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
     770:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <pxOverflowDelayedTaskList>
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <prvAddNewTaskToReadyList>:
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	0f 92       	push	r0
     784:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <uxCurrentNumberOfTasks>
     788:	8f 5f       	subi	r24, 0xFF	; 255
     78a:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <uxCurrentNumberOfTasks>
     78e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <pxCurrentTCB>
     792:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     796:	89 2b       	or	r24, r25
     798:	59 f4       	brne	.+22     	; 0x7b0 <prvAddNewTaskToReadyList+0x38>
     79a:	d0 93 0c 07 	sts	0x070C, r29	; 0x80070c <pxCurrentTCB+0x1>
     79e:	c0 93 0b 07 	sts	0x070B, r28	; 0x80070b <pxCurrentTCB>
     7a2:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <uxCurrentNumberOfTasks>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	99 f4       	brne	.+38     	; 0x7d0 <prvAddNewTaskToReadyList+0x58>
     7aa:	0e 94 89 03 	call	0x712	; 0x712 <prvInitialiseTaskLists>
     7ae:	10 c0       	rjmp	.+32     	; 0x7d0 <prvAddNewTaskToReadyList+0x58>
     7b0:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <xSchedulerRunning>
     7b4:	81 11       	cpse	r24, r1
     7b6:	0c c0       	rjmp	.+24     	; 0x7d0 <prvAddNewTaskToReadyList+0x58>
     7b8:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
     7bc:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     7c0:	96 89       	ldd	r25, Z+22	; 0x16
     7c2:	8e 89       	ldd	r24, Y+22	; 0x16
     7c4:	89 17       	cp	r24, r25
     7c6:	20 f0       	brcs	.+8      	; 0x7d0 <prvAddNewTaskToReadyList+0x58>
     7c8:	d0 93 0c 07 	sts	0x070C, r29	; 0x80070c <pxCurrentTCB+0x1>
     7cc:	c0 93 0b 07 	sts	0x070B, r28	; 0x80070b <pxCurrentTCB>
     7d0:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <uxTaskNumber>
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxTaskNumber>
     7da:	8e 89       	ldd	r24, Y+22	; 0x16
     7dc:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <uxTopReadyPriority>
     7e0:	98 17       	cp	r25, r24
     7e2:	10 f4       	brcc	.+4      	; 0x7e8 <prvAddNewTaskToReadyList+0x70>
     7e4:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <uxTopReadyPriority>
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	fc 01       	movw	r30, r24
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	8e 0f       	add	r24, r30
     7fa:	9f 1f       	adc	r25, r31
     7fc:	fc 01       	movw	r30, r24
     7fe:	e9 51       	subi	r30, 0x19	; 25
     800:	f9 4f       	sbci	r31, 0xF9	; 249
     802:	01 80       	ldd	r0, Z+1	; 0x01
     804:	f2 81       	ldd	r31, Z+2	; 0x02
     806:	e0 2d       	mov	r30, r0
     808:	fd 83       	std	Y+5, r31	; 0x05
     80a:	ec 83       	std	Y+4, r30	; 0x04
     80c:	84 81       	ldd	r24, Z+4	; 0x04
     80e:	95 81       	ldd	r25, Z+5	; 0x05
     810:	9f 83       	std	Y+7, r25	; 0x07
     812:	8e 83       	std	Y+6, r24	; 0x06
     814:	a4 81       	ldd	r26, Z+4	; 0x04
     816:	b5 81       	ldd	r27, Z+5	; 0x05
     818:	ce 01       	movw	r24, r28
     81a:	02 96       	adiw	r24, 0x02	; 2
     81c:	13 96       	adiw	r26, 0x03	; 3
     81e:	9c 93       	st	X, r25
     820:	8e 93       	st	-X, r24
     822:	12 97       	sbiw	r26, 0x02	; 2
     824:	95 83       	std	Z+5, r25	; 0x05
     826:	84 83       	std	Z+4, r24	; 0x04
     828:	ee 89       	ldd	r30, Y+22	; 0x16
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	cf 01       	movw	r24, r30
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	e9 51       	subi	r30, 0x19	; 25
     840:	f9 4f       	sbci	r31, 0xF9	; 249
     842:	fb 87       	std	Y+11, r31	; 0x0b
     844:	ea 87       	std	Y+10, r30	; 0x0a
     846:	80 81       	ld	r24, Z
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	80 83       	st	Z, r24
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <xSchedulerRunning>
     854:	88 23       	and	r24, r24
     856:	51 f0       	breq	.+20     	; 0x86c <__stack+0xd>
     858:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
     85c:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     860:	96 89       	ldd	r25, Z+22	; 0x16
     862:	8e 89       	ldd	r24, Y+22	; 0x16
     864:	98 17       	cp	r25, r24
     866:	10 f4       	brcc	.+4      	; 0x86c <__stack+0xd>
     868:	0e 94 2e 02 	call	0x45c	; 0x45c <vPortYield>
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <prvAddCurrentTaskToDelayedList>:
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
     87e:	f6 2e       	mov	r15, r22
     880:	00 91 bc 06 	lds	r16, 0x06BC	; 0x8006bc <xTickCount>
     884:	10 91 bd 06 	lds	r17, 0x06BD	; 0x8006bd <xTickCount+0x1>
     888:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <pxCurrentTCB>
     88c:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     890:	02 96       	adiw	r24, 0x02	; 2
     892:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uxListRemove>
     896:	cf 3f       	cpi	r28, 0xFF	; 255
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	d8 07       	cpc	r29, r24
     89c:	b1 f5       	brne	.+108    	; 0x90a <prvAddCurrentTaskToDelayedList+0x98>
     89e:	ff 20       	and	r15, r15
     8a0:	a1 f1       	breq	.+104    	; 0x90a <prvAddCurrentTaskToDelayedList+0x98>
     8a2:	ef eb       	ldi	r30, 0xBF	; 191
     8a4:	f6 e0       	ldi	r31, 0x06	; 6
     8a6:	a1 81       	ldd	r26, Z+1	; 0x01
     8a8:	b2 81       	ldd	r27, Z+2	; 0x02
     8aa:	c0 91 0b 07 	lds	r28, 0x070B	; 0x80070b <pxCurrentTCB>
     8ae:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     8b2:	bd 83       	std	Y+5, r27	; 0x05
     8b4:	ac 83       	std	Y+4, r26	; 0x04
     8b6:	c0 91 0b 07 	lds	r28, 0x070B	; 0x80070b <pxCurrentTCB>
     8ba:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     8be:	14 96       	adiw	r26, 0x04	; 4
     8c0:	8d 91       	ld	r24, X+
     8c2:	9c 91       	ld	r25, X
     8c4:	15 97       	sbiw	r26, 0x05	; 5
     8c6:	9f 83       	std	Y+7, r25	; 0x07
     8c8:	8e 83       	std	Y+6, r24	; 0x06
     8ca:	14 96       	adiw	r26, 0x04	; 4
     8cc:	cd 91       	ld	r28, X+
     8ce:	dc 91       	ld	r29, X
     8d0:	15 97       	sbiw	r26, 0x05	; 5
     8d2:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <pxCurrentTCB>
     8d6:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     8da:	02 96       	adiw	r24, 0x02	; 2
     8dc:	9b 83       	std	Y+3, r25	; 0x03
     8de:	8a 83       	std	Y+2, r24	; 0x02
     8e0:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <pxCurrentTCB>
     8e4:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     8e8:	02 96       	adiw	r24, 0x02	; 2
     8ea:	15 96       	adiw	r26, 0x05	; 5
     8ec:	9c 93       	st	X, r25
     8ee:	8e 93       	st	-X, r24
     8f0:	14 97       	sbiw	r26, 0x04	; 4
     8f2:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     8f6:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     8fa:	1b 96       	adiw	r26, 0x0b	; 11
     8fc:	fc 93       	st	X, r31
     8fe:	ee 93       	st	-X, r30
     900:	1a 97       	sbiw	r26, 0x0a	; 10
     902:	80 81       	ld	r24, Z
     904:	8f 5f       	subi	r24, 0xFF	; 255
     906:	80 83       	st	Z, r24
     908:	2f c0       	rjmp	.+94     	; 0x968 <prvAddCurrentTaskToDelayedList+0xf6>
     90a:	c0 0f       	add	r28, r16
     90c:	d1 1f       	adc	r29, r17
     90e:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
     912:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     916:	d3 83       	std	Z+3, r29	; 0x03
     918:	c2 83       	std	Z+2, r28	; 0x02
     91a:	c0 17       	cp	r28, r16
     91c:	d1 07       	cpc	r29, r17
     91e:	68 f4       	brcc	.+26     	; 0x93a <prvAddCurrentTaskToDelayedList+0xc8>
     920:	60 91 0b 07 	lds	r22, 0x070B	; 0x80070b <pxCurrentTCB>
     924:	70 91 0c 07 	lds	r23, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     928:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <pxOverflowDelayedTaskList>
     92c:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
     930:	6e 5f       	subi	r22, 0xFE	; 254
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	0e 94 32 01 	call	0x264	; 0x264 <vListInsert>
     938:	17 c0       	rjmp	.+46     	; 0x968 <prvAddCurrentTaskToDelayedList+0xf6>
     93a:	60 91 0b 07 	lds	r22, 0x070B	; 0x80070b <pxCurrentTCB>
     93e:	70 91 0c 07 	lds	r23, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     942:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     946:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     94a:	6e 5f       	subi	r22, 0xFE	; 254
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	0e 94 32 01 	call	0x264	; 0x264 <vListInsert>
     952:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <xNextTaskUnblockTime>
     956:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     95a:	c8 17       	cp	r28, r24
     95c:	d9 07       	cpc	r29, r25
     95e:	20 f4       	brcc	.+8      	; 0x968 <prvAddCurrentTaskToDelayedList+0xf6>
     960:	d0 93 b4 06 	sts	0x06B4, r29	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     964:	c0 93 b3 06 	sts	0x06B3, r28	; 0x8006b3 <xNextTaskUnblockTime>
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	08 95       	ret

00000974 <xTaskCreate>:
     974:	2f 92       	push	r2
     976:	3f 92       	push	r3
     978:	4f 92       	push	r4
     97a:	5f 92       	push	r5
     97c:	6f 92       	push	r6
     97e:	7f 92       	push	r7
     980:	8f 92       	push	r8
     982:	9f 92       	push	r9
     984:	af 92       	push	r10
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	3c 01       	movw	r6, r24
     99a:	1b 01       	movw	r2, r22
     99c:	5a 01       	movw	r10, r20
     99e:	29 01       	movw	r4, r18
     9a0:	ca 01       	movw	r24, r20
     9a2:	0e 94 c4 00 	call	0x188	; 0x188 <pvPortMalloc>
     9a6:	6c 01       	movw	r12, r24
     9a8:	89 2b       	or	r24, r25
     9aa:	99 f0       	breq	.+38     	; 0x9d2 <xTaskCreate+0x5e>
     9ac:	86 e2       	ldi	r24, 0x26	; 38
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 c4 00 	call	0x188	; 0x188 <pvPortMalloc>
     9b4:	ec 01       	movw	r28, r24
     9b6:	89 2b       	or	r24, r25
     9b8:	41 f0       	breq	.+16     	; 0x9ca <xTaskCreate+0x56>
     9ba:	86 e2       	ldi	r24, 0x26	; 38
     9bc:	fe 01       	movw	r30, r28
     9be:	11 92       	st	Z+, r1
     9c0:	8a 95       	dec	r24
     9c2:	e9 f7       	brne	.-6      	; 0x9be <xTaskCreate+0x4a>
     9c4:	d8 8e       	std	Y+24, r13	; 0x18
     9c6:	cf 8a       	std	Y+23, r12	; 0x17
     9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <xTaskCreate+0x62>
     9ca:	c6 01       	movw	r24, r12
     9cc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <vPortFree>
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <xTaskCreate+0x62>
     9d2:	c0 e0       	ldi	r28, 0x00	; 0
     9d4:	d0 e0       	ldi	r29, 0x00	; 0
     9d6:	20 97       	sbiw	r28, 0x00	; 0
     9d8:	91 f0       	breq	.+36     	; 0x9fe <xTaskCreate+0x8a>
     9da:	95 01       	movw	r18, r10
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	81 2c       	mov	r8, r1
     9e2:	91 2c       	mov	r9, r1
     9e4:	5e 01       	movw	r10, r28
     9e6:	67 01       	movw	r12, r14
     9e8:	e0 2e       	mov	r14, r16
     9ea:	82 01       	movw	r16, r4
     9ec:	b1 01       	movw	r22, r2
     9ee:	c3 01       	movw	r24, r6
     9f0:	0e 94 19 03 	call	0x632	; 0x632 <prvInitialiseNewTask>
     9f4:	ce 01       	movw	r24, r28
     9f6:	0e 94 bc 03 	call	0x778	; 0x778 <prvAddNewTaskToReadyList>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <xTaskCreate+0x8c>
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	bf 90       	pop	r11
     a12:	af 90       	pop	r10
     a14:	9f 90       	pop	r9
     a16:	8f 90       	pop	r8
     a18:	7f 90       	pop	r7
     a1a:	6f 90       	pop	r6
     a1c:	5f 90       	pop	r5
     a1e:	4f 90       	pop	r4
     a20:	3f 90       	pop	r3
     a22:	2f 90       	pop	r2
     a24:	08 95       	ret

00000a26 <vTaskResume>:
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	20 91 0b 07 	lds	r18, 0x070B	; 0x80070b <pxCurrentTCB>
     a32:	30 91 0c 07 	lds	r19, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     a36:	82 17       	cp	r24, r18
     a38:	93 07       	cpc	r25, r19
     a3a:	09 f4       	brne	.+2      	; 0xa3e <vTaskResume+0x18>
     a3c:	55 c0       	rjmp	.+170    	; 0xae8 <vTaskResume+0xc2>
     a3e:	00 97       	sbiw	r24, 0x00	; 0
     a40:	09 f4       	brne	.+2      	; 0xa44 <vTaskResume+0x1e>
     a42:	52 c0       	rjmp	.+164    	; 0xae8 <vTaskResume+0xc2>
     a44:	ec 01       	movw	r28, r24
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	0f 92       	push	r0
     a4c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <prvTaskIsTaskSuspended>
     a50:	88 23       	and	r24, r24
     a52:	09 f4       	brne	.+2      	; 0xa56 <vTaskResume+0x30>
     a54:	47 c0       	rjmp	.+142    	; 0xae4 <vTaskResume+0xbe>
     a56:	8e 01       	movw	r16, r28
     a58:	0e 5f       	subi	r16, 0xFE	; 254
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	c8 01       	movw	r24, r16
     a5e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uxListRemove>
     a62:	8e 89       	ldd	r24, Y+22	; 0x16
     a64:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <uxTopReadyPriority>
     a68:	98 17       	cp	r25, r24
     a6a:	10 f4       	brcc	.+4      	; 0xa70 <vTaskResume+0x4a>
     a6c:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <uxTopReadyPriority>
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	fc 01       	movw	r30, r24
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	8e 0f       	add	r24, r30
     a82:	9f 1f       	adc	r25, r31
     a84:	fc 01       	movw	r30, r24
     a86:	e9 51       	subi	r30, 0x19	; 25
     a88:	f9 4f       	sbci	r31, 0xF9	; 249
     a8a:	01 80       	ldd	r0, Z+1	; 0x01
     a8c:	f2 81       	ldd	r31, Z+2	; 0x02
     a8e:	e0 2d       	mov	r30, r0
     a90:	fd 83       	std	Y+5, r31	; 0x05
     a92:	ec 83       	std	Y+4, r30	; 0x04
     a94:	84 81       	ldd	r24, Z+4	; 0x04
     a96:	95 81       	ldd	r25, Z+5	; 0x05
     a98:	9f 83       	std	Y+7, r25	; 0x07
     a9a:	8e 83       	std	Y+6, r24	; 0x06
     a9c:	a4 81       	ldd	r26, Z+4	; 0x04
     a9e:	b5 81       	ldd	r27, Z+5	; 0x05
     aa0:	13 96       	adiw	r26, 0x03	; 3
     aa2:	1c 93       	st	X, r17
     aa4:	0e 93       	st	-X, r16
     aa6:	12 97       	sbiw	r26, 0x02	; 2
     aa8:	15 83       	std	Z+5, r17	; 0x05
     aaa:	04 83       	std	Z+4, r16	; 0x04
     aac:	ee 89       	ldd	r30, Y+22	; 0x16
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	cf 01       	movw	r24, r30
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	e8 0f       	add	r30, r24
     ac0:	f9 1f       	adc	r31, r25
     ac2:	e9 51       	subi	r30, 0x19	; 25
     ac4:	f9 4f       	sbci	r31, 0xF9	; 249
     ac6:	fb 87       	std	Y+11, r31	; 0x0b
     ac8:	ea 87       	std	Y+10, r30	; 0x0a
     aca:	80 81       	ld	r24, Z
     acc:	8f 5f       	subi	r24, 0xFF	; 255
     ace:	80 83       	st	Z, r24
     ad0:	9e 89       	ldd	r25, Y+22	; 0x16
     ad2:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
     ad6:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     ada:	86 89       	ldd	r24, Z+22	; 0x16
     adc:	98 17       	cp	r25, r24
     ade:	10 f0       	brcs	.+4      	; 0xae4 <vTaskResume+0xbe>
     ae0:	0e 94 2e 02 	call	0x45c	; 0x45c <vPortYield>
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <vTaskStartScheduler>:
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	0f 2e       	mov	r0, r31
     afa:	f1 eb       	ldi	r31, 0xB1	; 177
     afc:	ef 2e       	mov	r14, r31
     afe:	f6 e0       	ldi	r31, 0x06	; 6
     b00:	ff 2e       	mov	r15, r31
     b02:	f0 2d       	mov	r31, r0
     b04:	00 e0       	ldi	r16, 0x00	; 0
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	45 e5       	ldi	r20, 0x55	; 85
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	66 e6       	ldi	r22, 0x66	; 102
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	82 e8       	ldi	r24, 0x82	; 130
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0e 94 ba 04 	call	0x974	; 0x974 <xTaskCreate>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	81 f4       	brne	.+32     	; 0xb3e <vTaskStartScheduler+0x4c>
     b1e:	f8 94       	cli
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	9f ef       	ldi	r25, 0xFF	; 255
     b24:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     b28:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <xNextTaskUnblockTime>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <xSchedulerRunning>
     b32:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <xTickCount+0x1>
     b36:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <xTickCount>
     b3a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <xPortStartScheduler>
     b3e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <vTaskSuspendAll>:
     b4a:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <uxSchedulerSuspended>
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <uxSchedulerSuspended>
     b54:	08 95       	ret

00000b56 <xTaskIncrementTick>:
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <uxSchedulerSuspended>
     b62:	81 11       	cpse	r24, r1
     b64:	01 c1       	rjmp	.+514    	; 0xd68 <xTaskIncrementTick+0x212>
     b66:	c0 91 bc 06 	lds	r28, 0x06BC	; 0x8006bc <xTickCount>
     b6a:	d0 91 bd 06 	lds	r29, 0x06BD	; 0x8006bd <xTickCount+0x1>
     b6e:	8e 01       	movw	r16, r28
     b70:	0f 5f       	subi	r16, 0xFF	; 255
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	10 93 bd 06 	sts	0x06BD, r17	; 0x8006bd <xTickCount+0x1>
     b78:	00 93 bc 06 	sts	0x06BC, r16	; 0x8006bc <xTickCount>
     b7c:	01 15       	cp	r16, r1
     b7e:	11 05       	cpc	r17, r1
     b80:	b9 f4       	brne	.+46     	; 0xbb0 <xTaskIncrementTick+0x5a>
     b82:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     b86:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     b8a:	20 91 d1 06 	lds	r18, 0x06D1	; 0x8006d1 <pxOverflowDelayedTaskList>
     b8e:	30 91 d2 06 	lds	r19, 0x06D2	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
     b92:	30 93 d4 06 	sts	0x06D4, r19	; 0x8006d4 <pxDelayedTaskList+0x1>
     b96:	20 93 d3 06 	sts	0x06D3, r18	; 0x8006d3 <pxDelayedTaskList>
     b9a:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
     b9e:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <pxOverflowDelayedTaskList>
     ba2:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <xNumOfOverflows>
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <xNumOfOverflows>
     bac:	0e 94 fd 02 	call	0x5fa	; 0x5fa <prvResetNextTaskUnblockTime>
     bb0:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <xNextTaskUnblockTime>
     bb4:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     bb8:	08 17       	cp	r16, r24
     bba:	19 07       	cpc	r17, r25
     bbc:	20 f4       	brcc	.+8      	; 0xbc6 <xTaskIncrementTick+0x70>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	b8 c0       	rjmp	.+368    	; 0xd32 <xTaskIncrementTick+0x1dc>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <xTaskIncrementTick+0x72>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     bcc:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     bd0:	90 81       	ld	r25, Z
     bd2:	91 11       	cpse	r25, r1
     bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <xTaskIncrementTick+0x8e>
     bd6:	2f ef       	ldi	r18, 0xFF	; 255
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	30 93 b4 06 	sts	0x06B4, r19	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     bde:	20 93 b3 06 	sts	0x06B3, r18	; 0x8006b3 <xNextTaskUnblockTime>
     be2:	a7 c0       	rjmp	.+334    	; 0xd32 <xTaskIncrementTick+0x1dc>
     be4:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     be8:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     bec:	05 80       	ldd	r0, Z+5	; 0x05
     bee:	f6 81       	ldd	r31, Z+6	; 0x06
     bf0:	e0 2d       	mov	r30, r0
     bf2:	06 80       	ldd	r0, Z+6	; 0x06
     bf4:	f7 81       	ldd	r31, Z+7	; 0x07
     bf6:	e0 2d       	mov	r30, r0
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	33 81       	ldd	r19, Z+3	; 0x03
     bfc:	02 17       	cp	r16, r18
     bfe:	13 07       	cpc	r17, r19
     c00:	28 f4       	brcc	.+10     	; 0xc0c <xTaskIncrementTick+0xb6>
     c02:	30 93 b4 06 	sts	0x06B4, r19	; 0x8006b4 <xNextTaskUnblockTime+0x1>
     c06:	20 93 b3 06 	sts	0x06B3, r18	; 0x8006b3 <xNextTaskUnblockTime>
     c0a:	93 c0       	rjmp	.+294    	; 0xd32 <xTaskIncrementTick+0x1dc>
     c0c:	a2 85       	ldd	r26, Z+10	; 0x0a
     c0e:	b3 85       	ldd	r27, Z+11	; 0x0b
     c10:	24 81       	ldd	r18, Z+4	; 0x04
     c12:	35 81       	ldd	r19, Z+5	; 0x05
     c14:	46 81       	ldd	r20, Z+6	; 0x06
     c16:	57 81       	ldd	r21, Z+7	; 0x07
     c18:	e9 01       	movw	r28, r18
     c1a:	5d 83       	std	Y+5, r21	; 0x05
     c1c:	4c 83       	std	Y+4, r20	; 0x04
     c1e:	26 81       	ldd	r18, Z+6	; 0x06
     c20:	37 81       	ldd	r19, Z+7	; 0x07
     c22:	44 81       	ldd	r20, Z+4	; 0x04
     c24:	55 81       	ldd	r21, Z+5	; 0x05
     c26:	e9 01       	movw	r28, r18
     c28:	5b 83       	std	Y+3, r21	; 0x03
     c2a:	4a 83       	std	Y+2, r20	; 0x02
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	2d 91       	ld	r18, X+
     c30:	3c 91       	ld	r19, X
     c32:	12 97       	sbiw	r26, 0x02	; 2
     c34:	af 01       	movw	r20, r30
     c36:	4e 5f       	subi	r20, 0xFE	; 254
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	24 17       	cp	r18, r20
     c3c:	35 07       	cpc	r19, r21
     c3e:	31 f4       	brne	.+12     	; 0xc4c <xTaskIncrementTick+0xf6>
     c40:	26 81       	ldd	r18, Z+6	; 0x06
     c42:	37 81       	ldd	r19, Z+7	; 0x07
     c44:	12 96       	adiw	r26, 0x02	; 2
     c46:	3c 93       	st	X, r19
     c48:	2e 93       	st	-X, r18
     c4a:	11 97       	sbiw	r26, 0x01	; 1
     c4c:	13 86       	std	Z+11, r1	; 0x0b
     c4e:	12 86       	std	Z+10, r1	; 0x0a
     c50:	9c 91       	ld	r25, X
     c52:	91 50       	subi	r25, 0x01	; 1
     c54:	9c 93       	st	X, r25
     c56:	a4 89       	ldd	r26, Z+20	; 0x14
     c58:	b5 89       	ldd	r27, Z+21	; 0x15
     c5a:	10 97       	sbiw	r26, 0x00	; 0
     c5c:	19 f1       	breq	.+70     	; 0xca4 <xTaskIncrementTick+0x14e>
     c5e:	26 85       	ldd	r18, Z+14	; 0x0e
     c60:	37 85       	ldd	r19, Z+15	; 0x0f
     c62:	60 89       	ldd	r22, Z+16	; 0x10
     c64:	71 89       	ldd	r23, Z+17	; 0x11
     c66:	e9 01       	movw	r28, r18
     c68:	7d 83       	std	Y+5, r23	; 0x05
     c6a:	6c 83       	std	Y+4, r22	; 0x04
     c6c:	20 89       	ldd	r18, Z+16	; 0x10
     c6e:	31 89       	ldd	r19, Z+17	; 0x11
     c70:	66 85       	ldd	r22, Z+14	; 0x0e
     c72:	77 85       	ldd	r23, Z+15	; 0x0f
     c74:	e9 01       	movw	r28, r18
     c76:	7b 83       	std	Y+3, r23	; 0x03
     c78:	6a 83       	std	Y+2, r22	; 0x02
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	6d 91       	ld	r22, X+
     c7e:	7c 91       	ld	r23, X
     c80:	12 97       	sbiw	r26, 0x02	; 2
     c82:	9f 01       	movw	r18, r30
     c84:	24 5f       	subi	r18, 0xF4	; 244
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	62 17       	cp	r22, r18
     c8a:	73 07       	cpc	r23, r19
     c8c:	31 f4       	brne	.+12     	; 0xc9a <xTaskIncrementTick+0x144>
     c8e:	20 89       	ldd	r18, Z+16	; 0x10
     c90:	31 89       	ldd	r19, Z+17	; 0x11
     c92:	12 96       	adiw	r26, 0x02	; 2
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	11 97       	sbiw	r26, 0x01	; 1
     c9a:	15 8a       	std	Z+21, r1	; 0x15
     c9c:	14 8a       	std	Z+20, r1	; 0x14
     c9e:	9c 91       	ld	r25, X
     ca0:	91 50       	subi	r25, 0x01	; 1
     ca2:	9c 93       	st	X, r25
     ca4:	26 89       	ldd	r18, Z+22	; 0x16
     ca6:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <uxTopReadyPriority>
     caa:	92 17       	cp	r25, r18
     cac:	10 f4       	brcc	.+4      	; 0xcb2 <xTaskIncrementTick+0x15c>
     cae:	20 93 bb 06 	sts	0x06BB, r18	; 0x8006bb <uxTopReadyPriority>
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	d9 01       	movw	r26, r18
     cb6:	aa 0f       	add	r26, r26
     cb8:	bb 1f       	adc	r27, r27
     cba:	aa 0f       	add	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	aa 0f       	add	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 0f       	add	r18, r26
     cc4:	3b 1f       	adc	r19, r27
     cc6:	d9 01       	movw	r26, r18
     cc8:	a9 51       	subi	r26, 0x19	; 25
     cca:	b9 4f       	sbci	r27, 0xF9	; 249
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	0d 90       	ld	r0, X+
     cd0:	bc 91       	ld	r27, X
     cd2:	a0 2d       	mov	r26, r0
     cd4:	b5 83       	std	Z+5, r27	; 0x05
     cd6:	a4 83       	std	Z+4, r26	; 0x04
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	2d 91       	ld	r18, X+
     cdc:	3c 91       	ld	r19, X
     cde:	15 97       	sbiw	r26, 0x05	; 5
     ce0:	37 83       	std	Z+7, r19	; 0x07
     ce2:	26 83       	std	Z+6, r18	; 0x06
     ce4:	14 96       	adiw	r26, 0x04	; 4
     ce6:	2d 91       	ld	r18, X+
     ce8:	3c 91       	ld	r19, X
     cea:	15 97       	sbiw	r26, 0x05	; 5
     cec:	e9 01       	movw	r28, r18
     cee:	5b 83       	std	Y+3, r21	; 0x03
     cf0:	4a 83       	std	Y+2, r20	; 0x02
     cf2:	15 96       	adiw	r26, 0x05	; 5
     cf4:	5c 93       	st	X, r21
     cf6:	4e 93       	st	-X, r20
     cf8:	14 97       	sbiw	r26, 0x04	; 4
     cfa:	a6 89       	ldd	r26, Z+22	; 0x16
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	9d 01       	movw	r18, r26
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	a2 0f       	add	r26, r18
     d0e:	b3 1f       	adc	r27, r19
     d10:	a9 51       	subi	r26, 0x19	; 25
     d12:	b9 4f       	sbci	r27, 0xF9	; 249
     d14:	b3 87       	std	Z+11, r27	; 0x0b
     d16:	a2 87       	std	Z+10, r26	; 0x0a
     d18:	9c 91       	ld	r25, X
     d1a:	9f 5f       	subi	r25, 0xFF	; 255
     d1c:	9c 93       	st	X, r25
     d1e:	26 89       	ldd	r18, Z+22	; 0x16
     d20:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
     d24:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     d28:	96 89       	ldd	r25, Z+22	; 0x16
     d2a:	92 17       	cp	r25, r18
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <xTaskIncrementTick+0x1da>
     d2e:	49 cf       	rjmp	.-366    	; 0xbc2 <xTaskIncrementTick+0x6c>
     d30:	4b cf       	rjmp	.-362    	; 0xbc8 <xTaskIncrementTick+0x72>
     d32:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
     d36:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     d3a:	26 89       	ldd	r18, Z+22	; 0x16
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	f9 01       	movw	r30, r18
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	2e 0f       	add	r18, r30
     d4e:	3f 1f       	adc	r19, r31
     d50:	f9 01       	movw	r30, r18
     d52:	e9 51       	subi	r30, 0x19	; 25
     d54:	f9 4f       	sbci	r31, 0xF9	; 249
     d56:	90 81       	ld	r25, Z
     d58:	92 30       	cpi	r25, 0x02	; 2
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <xTaskIncrementTick+0x208>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <xYieldPending>
     d62:	91 11       	cpse	r25, r1
     d64:	0c c0       	rjmp	.+24     	; 0xd7e <xTaskIncrementTick+0x228>
     d66:	0c c0       	rjmp	.+24     	; 0xd80 <xTaskIncrementTick+0x22a>
     d68:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <xPendedTicks>
     d6c:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <xPendedTicks+0x1>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <xPendedTicks+0x1>
     d76:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <xPendedTicks>
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <xTaskIncrementTick+0x22a>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <xTaskResumeAll>:
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	0f 92       	push	r0
     d94:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <uxSchedulerSuspended>
     d98:	81 50       	subi	r24, 0x01	; 1
     d9a:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <uxSchedulerSuspended>
     d9e:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <uxSchedulerSuspended>
     da2:	81 11       	cpse	r24, r1
     da4:	bf c0       	rjmp	.+382    	; 0xf24 <xTaskResumeAll+0x19a>
     da6:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <uxCurrentNumberOfTasks>
     daa:	81 11       	cpse	r24, r1
     dac:	96 c0       	rjmp	.+300    	; 0xeda <xTaskResumeAll+0x150>
     dae:	bd c0       	rjmp	.+378    	; 0xf2a <xTaskResumeAll+0x1a0>
     db0:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <xPendingReadyList+0x5>
     db4:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <xPendingReadyList+0x6>
     db8:	06 80       	ldd	r0, Z+6	; 0x06
     dba:	f7 81       	ldd	r31, Z+7	; 0x07
     dbc:	e0 2d       	mov	r30, r0
     dbe:	a4 89       	ldd	r26, Z+20	; 0x14
     dc0:	b5 89       	ldd	r27, Z+21	; 0x15
     dc2:	c6 85       	ldd	r28, Z+14	; 0x0e
     dc4:	d7 85       	ldd	r29, Z+15	; 0x0f
     dc6:	80 89       	ldd	r24, Z+16	; 0x10
     dc8:	91 89       	ldd	r25, Z+17	; 0x11
     dca:	9d 83       	std	Y+5, r25	; 0x05
     dcc:	8c 83       	std	Y+4, r24	; 0x04
     dce:	c0 89       	ldd	r28, Z+16	; 0x10
     dd0:	d1 89       	ldd	r29, Z+17	; 0x11
     dd2:	86 85       	ldd	r24, Z+14	; 0x0e
     dd4:	97 85       	ldd	r25, Z+15	; 0x0f
     dd6:	9b 83       	std	Y+3, r25	; 0x03
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	2d 91       	ld	r18, X+
     dde:	3c 91       	ld	r19, X
     de0:	12 97       	sbiw	r26, 0x02	; 2
     de2:	cf 01       	movw	r24, r30
     de4:	0c 96       	adiw	r24, 0x0c	; 12
     de6:	28 17       	cp	r18, r24
     de8:	39 07       	cpc	r19, r25
     dea:	31 f4       	brne	.+12     	; 0xdf8 <xTaskResumeAll+0x6e>
     dec:	80 89       	ldd	r24, Z+16	; 0x10
     dee:	91 89       	ldd	r25, Z+17	; 0x11
     df0:	12 96       	adiw	r26, 0x02	; 2
     df2:	9c 93       	st	X, r25
     df4:	8e 93       	st	-X, r24
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	15 8a       	std	Z+21, r1	; 0x15
     dfa:	14 8a       	std	Z+20, r1	; 0x14
     dfc:	8c 91       	ld	r24, X
     dfe:	81 50       	subi	r24, 0x01	; 1
     e00:	8c 93       	st	X, r24
     e02:	a2 85       	ldd	r26, Z+10	; 0x0a
     e04:	b3 85       	ldd	r27, Z+11	; 0x0b
     e06:	c4 81       	ldd	r28, Z+4	; 0x04
     e08:	d5 81       	ldd	r29, Z+5	; 0x05
     e0a:	86 81       	ldd	r24, Z+6	; 0x06
     e0c:	97 81       	ldd	r25, Z+7	; 0x07
     e0e:	9d 83       	std	Y+5, r25	; 0x05
     e10:	8c 83       	std	Y+4, r24	; 0x04
     e12:	c6 81       	ldd	r28, Z+6	; 0x06
     e14:	d7 81       	ldd	r29, Z+7	; 0x07
     e16:	84 81       	ldd	r24, Z+4	; 0x04
     e18:	95 81       	ldd	r25, Z+5	; 0x05
     e1a:	9b 83       	std	Y+3, r25	; 0x03
     e1c:	8a 83       	std	Y+2, r24	; 0x02
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	8d 91       	ld	r24, X+
     e22:	9c 91       	ld	r25, X
     e24:	12 97       	sbiw	r26, 0x02	; 2
     e26:	9f 01       	movw	r18, r30
     e28:	2e 5f       	subi	r18, 0xFE	; 254
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	82 17       	cp	r24, r18
     e2e:	93 07       	cpc	r25, r19
     e30:	31 f4       	brne	.+12     	; 0xe3e <xTaskResumeAll+0xb4>
     e32:	86 81       	ldd	r24, Z+6	; 0x06
     e34:	97 81       	ldd	r25, Z+7	; 0x07
     e36:	12 96       	adiw	r26, 0x02	; 2
     e38:	9c 93       	st	X, r25
     e3a:	8e 93       	st	-X, r24
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	13 86       	std	Z+11, r1	; 0x0b
     e40:	12 86       	std	Z+10, r1	; 0x0a
     e42:	8c 91       	ld	r24, X
     e44:	81 50       	subi	r24, 0x01	; 1
     e46:	8c 93       	st	X, r24
     e48:	86 89       	ldd	r24, Z+22	; 0x16
     e4a:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <uxTopReadyPriority>
     e4e:	98 17       	cp	r25, r24
     e50:	10 f4       	brcc	.+4      	; 0xe56 <xTaskResumeAll+0xcc>
     e52:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <uxTopReadyPriority>
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	dc 01       	movw	r26, r24
     e5a:	aa 0f       	add	r26, r26
     e5c:	bb 1f       	adc	r27, r27
     e5e:	aa 0f       	add	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	aa 0f       	add	r26, r26
     e64:	bb 1f       	adc	r27, r27
     e66:	8a 0f       	add	r24, r26
     e68:	9b 1f       	adc	r25, r27
     e6a:	dc 01       	movw	r26, r24
     e6c:	a9 51       	subi	r26, 0x19	; 25
     e6e:	b9 4f       	sbci	r27, 0xF9	; 249
     e70:	11 96       	adiw	r26, 0x01	; 1
     e72:	0d 90       	ld	r0, X+
     e74:	bc 91       	ld	r27, X
     e76:	a0 2d       	mov	r26, r0
     e78:	b5 83       	std	Z+5, r27	; 0x05
     e7a:	a4 83       	std	Z+4, r26	; 0x04
     e7c:	14 96       	adiw	r26, 0x04	; 4
     e7e:	8d 91       	ld	r24, X+
     e80:	9c 91       	ld	r25, X
     e82:	15 97       	sbiw	r26, 0x05	; 5
     e84:	97 83       	std	Z+7, r25	; 0x07
     e86:	86 83       	std	Z+6, r24	; 0x06
     e88:	14 96       	adiw	r26, 0x04	; 4
     e8a:	cd 91       	ld	r28, X+
     e8c:	dc 91       	ld	r29, X
     e8e:	15 97       	sbiw	r26, 0x05	; 5
     e90:	3b 83       	std	Y+3, r19	; 0x03
     e92:	2a 83       	std	Y+2, r18	; 0x02
     e94:	15 96       	adiw	r26, 0x05	; 5
     e96:	3c 93       	st	X, r19
     e98:	2e 93       	st	-X, r18
     e9a:	14 97       	sbiw	r26, 0x04	; 4
     e9c:	a6 89       	ldd	r26, Z+22	; 0x16
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	cd 01       	movw	r24, r26
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	a8 0f       	add	r26, r24
     eb0:	b9 1f       	adc	r27, r25
     eb2:	a9 51       	subi	r26, 0x19	; 25
     eb4:	b9 4f       	sbci	r27, 0xF9	; 249
     eb6:	b3 87       	std	Z+11, r27	; 0x0b
     eb8:	a2 87       	std	Z+10, r26	; 0x0a
     eba:	8c 91       	ld	r24, X
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	8c 93       	st	X, r24
     ec0:	96 89       	ldd	r25, Z+22	; 0x16
     ec2:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     ec6:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     eca:	56 96       	adiw	r26, 0x16	; 22
     ecc:	8c 91       	ld	r24, X
     ece:	98 17       	cp	r25, r24
     ed0:	30 f0       	brcs	.+12     	; 0xede <xTaskResumeAll+0x154>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xYieldPending>
     ed8:	02 c0       	rjmp	.+4      	; 0xede <xTaskResumeAll+0x154>
     eda:	e0 e0       	ldi	r30, 0x00	; 0
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <xPendingReadyList>
     ee2:	81 11       	cpse	r24, r1
     ee4:	65 cf       	rjmp	.-310    	; 0xdb0 <xTaskResumeAll+0x26>
     ee6:	ef 2b       	or	r30, r31
     ee8:	11 f0       	breq	.+4      	; 0xeee <xTaskResumeAll+0x164>
     eea:	0e 94 fd 02 	call	0x5fa	; 0x5fa <prvResetNextTaskUnblockTime>
     eee:	c0 91 b8 06 	lds	r28, 0x06B8	; 0x8006b8 <xPendedTicks>
     ef2:	d0 91 b9 06 	lds	r29, 0x06B9	; 0x8006b9 <xPendedTicks+0x1>
     ef6:	20 97       	sbiw	r28, 0x00	; 0
     ef8:	69 f0       	breq	.+26     	; 0xf14 <xTaskResumeAll+0x18a>
     efa:	0e 94 ab 05 	call	0xb56	; 0xb56 <xTaskIncrementTick>
     efe:	88 23       	and	r24, r24
     f00:	19 f0       	breq	.+6      	; 0xf08 <xTaskResumeAll+0x17e>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xYieldPending>
     f08:	21 97       	sbiw	r28, 0x01	; 1
     f0a:	b9 f7       	brne	.-18     	; 0xefa <xTaskResumeAll+0x170>
     f0c:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <xPendedTicks+0x1>
     f10:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <xPendedTicks>
     f14:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <xYieldPending>
     f18:	88 23       	and	r24, r24
     f1a:	31 f0       	breq	.+12     	; 0xf28 <xTaskResumeAll+0x19e>
     f1c:	0e 94 2e 02 	call	0x45c	; 0x45c <vPortYield>
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <xTaskResumeAll+0x1a0>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <xTaskResumeAll+0x1a0>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <vTaskDelay>:
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	ec 01       	movw	r28, r24
     f3a:	89 2b       	or	r24, r25
     f3c:	49 f0       	breq	.+18     	; 0xf50 <vTaskDelay+0x1c>
     f3e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <vTaskSuspendAll>
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 39 04 	call	0x872	; 0x872 <prvAddCurrentTaskToDelayedList>
     f4a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <xTaskResumeAll>
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <vTaskDelay+0x1e>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	81 11       	cpse	r24, r1
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vTaskDelay+0x26>
     f56:	0e 94 2e 02 	call	0x45c	; 0x45c <vPortYield>
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	08 95       	ret

00000f60 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     f60:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <uxSchedulerSuspended>
     f64:	88 23       	and	r24, r24
     f66:	21 f0       	breq	.+8      	; 0xf70 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xYieldPending>
     f6e:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     f70:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <xYieldPending>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     f74:	20 91 bb 06 	lds	r18, 0x06BB	; 0x8006bb <uxTopReadyPriority>
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <vTaskSwitchContext+0x1c>
     f7a:	21 50       	subi	r18, 0x01	; 1
     f7c:	82 2f       	mov	r24, r18
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	fc 01       	movw	r30, r24
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e8 0f       	add	r30, r24
     f90:	f9 1f       	adc	r31, r25
     f92:	e9 51       	subi	r30, 0x19	; 25
     f94:	f9 4f       	sbci	r31, 0xF9	; 249
     f96:	30 81       	ld	r19, Z
     f98:	33 23       	and	r19, r19
     f9a:	79 f3       	breq	.-34     	; 0xf7a <vTaskSwitchContext+0x1a>
     f9c:	ac 01       	movw	r20, r24
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	44 0f       	add	r20, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	44 0f       	add	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	48 0f       	add	r20, r24
     fac:	59 1f       	adc	r21, r25
     fae:	df 01       	movw	r26, r30
     fb0:	01 80       	ldd	r0, Z+1	; 0x01
     fb2:	f2 81       	ldd	r31, Z+2	; 0x02
     fb4:	e0 2d       	mov	r30, r0
     fb6:	02 80       	ldd	r0, Z+2	; 0x02
     fb8:	f3 81       	ldd	r31, Z+3	; 0x03
     fba:	e0 2d       	mov	r30, r0
     fbc:	12 96       	adiw	r26, 0x02	; 2
     fbe:	fc 93       	st	X, r31
     fc0:	ee 93       	st	-X, r30
     fc2:	11 97       	sbiw	r26, 0x01	; 1
     fc4:	46 51       	subi	r20, 0x16	; 22
     fc6:	59 4f       	sbci	r21, 0xF9	; 249
     fc8:	e4 17       	cp	r30, r20
     fca:	f5 07       	cpc	r31, r21
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <vTaskSwitchContext+0x78>
     fce:	42 81       	ldd	r20, Z+2	; 0x02
     fd0:	53 81       	ldd	r21, Z+3	; 0x03
     fd2:	fd 01       	movw	r30, r26
     fd4:	52 83       	std	Z+2, r21	; 0x02
     fd6:	41 83       	std	Z+1, r20	; 0x01
     fd8:	fc 01       	movw	r30, r24
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	8e 0f       	add	r24, r30
     fe8:	9f 1f       	adc	r25, r31
     fea:	fc 01       	movw	r30, r24
     fec:	e9 51       	subi	r30, 0x19	; 25
     fee:	f9 4f       	sbci	r31, 0xF9	; 249
     ff0:	01 80       	ldd	r0, Z+1	; 0x01
     ff2:	f2 81       	ldd	r31, Z+2	; 0x02
     ff4:	e0 2d       	mov	r30, r0
     ff6:	86 81       	ldd	r24, Z+6	; 0x06
     ff8:	97 81       	ldd	r25, Z+7	; 0x07
     ffa:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <pxCurrentTCB+0x1>
     ffe:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <pxCurrentTCB>
    1002:	20 93 bb 06 	sts	0x06BB, r18	; 0x8006bb <uxTopReadyPriority>
    1006:	08 95       	ret

00001008 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	ec 01       	movw	r28, r24
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	0f 92       	push	r0
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    1018:	89 2b       	or	r24, r25
    101a:	21 f4       	brne	.+8      	; 0x1024 <vTaskSuspend+0x1c>
    101c:	c0 91 0b 07 	lds	r28, 0x070B	; 0x80070b <pxCurrentTCB>
    1020:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <pxCurrentTCB+0x1>

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1024:	8e 01       	movw	r16, r28
    1026:	0e 5f       	subi	r16, 0xFE	; 254
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	c8 01       	movw	r24, r16
    102c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1030:	8c 89       	ldd	r24, Y+20	; 0x14
    1032:	9d 89       	ldd	r25, Y+21	; 0x15
    1034:	89 2b       	or	r24, r25
    1036:	21 f0       	breq	.+8      	; 0x1040 <vTaskSuspend+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1038:	ce 01       	movw	r24, r28
    103a:	0c 96       	adiw	r24, 0x0c	; 12
    103c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    1040:	b8 01       	movw	r22, r16
    1042:	8f eb       	ldi	r24, 0xBF	; 191
    1044:	96 e0       	ldi	r25, 0x06	; 6
    1046:	0e 94 11 01 	call	0x222	; 0x222 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	0f c0       	rjmp	.+30     	; 0x106c <vTaskSuspend+0x64>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
    104e:	28 2f       	mov	r18, r24
    1050:	08 2e       	mov	r0, r24
    1052:	00 0c       	add	r0, r0
    1054:	33 0b       	sbc	r19, r19
    1056:	fe 01       	movw	r30, r28
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	95 a1       	ldd	r25, Z+37	; 0x25
    105e:	91 30       	cpi	r25, 0x01	; 1
    1060:	21 f4       	brne	.+8      	; 0x106a <vTaskSuspend+0x62>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
    1062:	fe 01       	movw	r30, r28
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	15 a2       	std	Z+37, r1	; 0x25

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	18 16       	cp	r1, r24
    106e:	7c f7       	brge	.-34     	; 0x104e <vTaskSuspend+0x46>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63

        if( xSchedulerRunning != pdFALSE )
    1074:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <xSchedulerRunning>
    1078:	88 23       	and	r24, r24
    107a:	39 f0       	breq	.+14     	; 0x108a <vTaskSuspend+0x82>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	0f 92       	push	r0
            {
                prvResetNextTaskUnblockTime();
    1082:	0e 94 fd 02 	call	0x5fa	; 0x5fa <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
    108a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <pxCurrentTCB>
    108e:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    1092:	c8 17       	cp	r28, r24
    1094:	d9 07       	cpc	r29, r25
    1096:	a1 f4       	brne	.+40     	; 0x10c0 <vTaskSuspend+0xb8>
        {
            if( xSchedulerRunning != pdFALSE )
    1098:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <xSchedulerRunning>
    109c:	88 23       	and	r24, r24
    109e:	19 f0       	breq	.+6      	; 0x10a6 <vTaskSuspend+0x9e>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
    10a0:	0e 94 2e 02 	call	0x45c	; 0x45c <vPortYield>
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <vTaskSuspend+0xb8>
            else
            {
                /* The scheduler is not running, but the task that was pointed
                 * to by pxCurrentTCB has just been suspended and pxCurrentTCB
                 * must be adjusted to point to a different task. */
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    10a6:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <xSuspendedTaskList>
    10aa:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <uxCurrentNumberOfTasks>
    10ae:	98 13       	cpse	r25, r24
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <vTaskSuspend+0xb4>
                {
                    /* No other tasks are ready, so set pxCurrentTCB back to
                     * NULL so when the next task is created pxCurrentTCB will
                     * be set to point to it no matter what its relative priority
                     * is. */
                    pxCurrentTCB = NULL;
    10b2:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <pxCurrentTCB+0x1>
    10b6:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <pxCurrentTCB>
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <vTaskSuspend+0xb8>
                }
                else
                {
                    vTaskSwitchContext();
    10bc:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSwitchContext>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    10ca:	88 30       	cpi	r24, 0x08	; 8
    10cc:	00 f5       	brcc	.+64     	; 0x110e <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
    10ce:	61 11       	cpse	r22, r1
    10d0:	0e c0       	rjmp	.+28     	; 0x10ee <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
    10d2:	4a b3       	in	r20, 0x1a	; 26
    10d4:	21 e0       	ldi	r18, 0x01	; 1
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	b9 01       	movw	r22, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_setPinDir+0x16>
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	8a 95       	dec	r24
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_setPinDir+0x12>
    10e4:	cb 01       	movw	r24, r22
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8a bb       	out	0x1a, r24	; 26
    10ec:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    10ee:	61 30       	cpi	r22, 0x01	; 1
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <DIO_setPinDir+0x2a>
    10f2:	75 c0       	rjmp	.+234    	; 0x11de <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
    10f4:	4a b3       	in	r20, 0x1a	; 26
    10f6:	21 e0       	ldi	r18, 0x01	; 1
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	b9 01       	movw	r22, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_setPinDir+0x38>
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	8a 95       	dec	r24
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_setPinDir+0x34>
    1106:	cb 01       	movw	r24, r22
    1108:	84 2b       	or	r24, r20
    110a:	8a bb       	out	0x1a, r24	; 26
    110c:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    110e:	98 ef       	ldi	r25, 0xF8	; 248
    1110:	98 0f       	add	r25, r24
    1112:	98 30       	cpi	r25, 0x08	; 8
    1114:	00 f5       	brcc	.+64     	; 0x1156 <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
    1116:	61 11       	cpse	r22, r1
    1118:	0e c0       	rjmp	.+28     	; 0x1136 <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
    111a:	47 b3       	in	r20, 0x17	; 23
    111c:	21 e0       	ldi	r18, 0x01	; 1
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	b9 01       	movw	r22, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_setPinDir+0x5e>
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	9a 95       	dec	r25
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_setPinDir+0x5a>
    112c:	cb 01       	movw	r24, r22
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	87 bb       	out	0x17, r24	; 23
    1134:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    1136:	61 30       	cpi	r22, 0x01	; 1
    1138:	09 f0       	breq	.+2      	; 0x113c <DIO_setPinDir+0x72>
    113a:	51 c0       	rjmp	.+162    	; 0x11de <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
    113c:	47 b3       	in	r20, 0x17	; 23
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	b9 01       	movw	r22, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_setPinDir+0x80>
    1146:	66 0f       	add	r22, r22
    1148:	77 1f       	adc	r23, r23
    114a:	9a 95       	dec	r25
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_setPinDir+0x7c>
    114e:	cb 01       	movw	r24, r22
    1150:	84 2b       	or	r24, r20
    1152:	87 bb       	out	0x17, r24	; 23
    1154:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    1156:	90 ef       	ldi	r25, 0xF0	; 240
    1158:	98 0f       	add	r25, r24
    115a:	98 30       	cpi	r25, 0x08	; 8
    115c:	f8 f4       	brcc	.+62     	; 0x119c <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
    115e:	61 11       	cpse	r22, r1
    1160:	0e c0       	rjmp	.+28     	; 0x117e <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
    1162:	44 b3       	in	r20, 0x14	; 20
    1164:	21 e0       	ldi	r18, 0x01	; 1
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	b9 01       	movw	r22, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_setPinDir+0xa6>
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	9a 95       	dec	r25
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_setPinDir+0xa2>
    1174:	cb 01       	movw	r24, r22
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	84 bb       	out	0x14, r24	; 20
    117c:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    117e:	61 30       	cpi	r22, 0x01	; 1
    1180:	71 f5       	brne	.+92     	; 0x11de <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
    1182:	44 b3       	in	r20, 0x14	; 20
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	b9 01       	movw	r22, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_setPinDir+0xc6>
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	9a 95       	dec	r25
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_setPinDir+0xc2>
    1194:	cb 01       	movw	r24, r22
    1196:	84 2b       	or	r24, r20
    1198:	84 bb       	out	0x14, r24	; 20
    119a:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    119c:	88 51       	subi	r24, 0x18	; 24
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	f0 f4       	brcc	.+60     	; 0x11de <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
    11a2:	61 11       	cpse	r22, r1
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRD,pinNum);
    11a6:	41 b3       	in	r20, 0x11	; 17
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	b9 01       	movw	r22, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_setPinDir+0xea>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_setPinDir+0xe6>
    11b8:	cb 01       	movw	r24, r22
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	81 bb       	out	0x11, r24	; 17
    11c0:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    11c2:	61 30       	cpi	r22, 0x01	; 1
    11c4:	61 f4       	brne	.+24     	; 0x11de <DIO_setPinDir+0x114>
			SET_BIT(DDRD,pinNum);
    11c6:	41 b3       	in	r20, 0x11	; 17
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	b9 01       	movw	r22, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_setPinDir+0x10a>
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_setPinDir+0x106>
    11d8:	cb 01       	movw	r24, r22
    11da:	84 2b       	or	r24, r20
    11dc:	81 bb       	out	0x11, r24	; 17
    11de:	08 95       	ret

000011e0 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	00 f5       	brcc	.+64     	; 0x1224 <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
    11e4:	61 11       	cpse	r22, r1
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
    11e8:	4b b3       	in	r20, 0x1b	; 27
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	b9 01       	movw	r22, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_setPinValue+0x16>
    11f2:	66 0f       	add	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_setPinValue+0x12>
    11fa:	cb 01       	movw	r24, r22
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8b bb       	out	0x1b, r24	; 27
    1202:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1204:	61 30       	cpi	r22, 0x01	; 1
    1206:	09 f0       	breq	.+2      	; 0x120a <DIO_setPinValue+0x2a>
    1208:	75 c0       	rjmp	.+234    	; 0x12f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
    120a:	4b b3       	in	r20, 0x1b	; 27
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	b9 01       	movw	r22, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_setPinValue+0x38>
    1214:	66 0f       	add	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_setPinValue+0x34>
    121c:	cb 01       	movw	r24, r22
    121e:	84 2b       	or	r24, r20
    1220:	8b bb       	out	0x1b, r24	; 27
    1222:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    1224:	98 ef       	ldi	r25, 0xF8	; 248
    1226:	98 0f       	add	r25, r24
    1228:	98 30       	cpi	r25, 0x08	; 8
    122a:	00 f5       	brcc	.+64     	; 0x126c <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
    122c:	61 11       	cpse	r22, r1
    122e:	0e c0       	rjmp	.+28     	; 0x124c <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
    1230:	48 b3       	in	r20, 0x18	; 24
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_setPinValue+0x5e>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	9a 95       	dec	r25
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_setPinValue+0x5a>
    1242:	cb 01       	movw	r24, r22
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	88 bb       	out	0x18, r24	; 24
    124a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    124c:	61 30       	cpi	r22, 0x01	; 1
    124e:	09 f0       	breq	.+2      	; 0x1252 <DIO_setPinValue+0x72>
    1250:	51 c0       	rjmp	.+162    	; 0x12f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
    1252:	48 b3       	in	r20, 0x18	; 24
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	b9 01       	movw	r22, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_setPinValue+0x80>
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	9a 95       	dec	r25
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_setPinValue+0x7c>
    1264:	cb 01       	movw	r24, r22
    1266:	84 2b       	or	r24, r20
    1268:	88 bb       	out	0x18, r24	; 24
    126a:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    126c:	90 ef       	ldi	r25, 0xF0	; 240
    126e:	98 0f       	add	r25, r24
    1270:	98 30       	cpi	r25, 0x08	; 8
    1272:	f8 f4       	brcc	.+62     	; 0x12b2 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
    1274:	61 11       	cpse	r22, r1
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
    1278:	45 b3       	in	r20, 0x15	; 21
    127a:	21 e0       	ldi	r18, 0x01	; 1
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	b9 01       	movw	r22, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_setPinValue+0xa6>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	9a 95       	dec	r25
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_setPinValue+0xa2>
    128a:	cb 01       	movw	r24, r22
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	85 bb       	out	0x15, r24	; 21
    1292:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1294:	61 30       	cpi	r22, 0x01	; 1
    1296:	71 f5       	brne	.+92     	; 0x12f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
    1298:	45 b3       	in	r20, 0x15	; 21
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	b9 01       	movw	r22, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_setPinValue+0xc6>
    12a2:	66 0f       	add	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	9a 95       	dec	r25
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_setPinValue+0xc2>
    12aa:	cb 01       	movw	r24, r22
    12ac:	84 2b       	or	r24, r20
    12ae:	85 bb       	out	0x15, r24	; 21
    12b0:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    12b2:	88 51       	subi	r24, 0x18	; 24
    12b4:	88 30       	cpi	r24, 0x08	; 8
    12b6:	f0 f4       	brcc	.+60     	; 0x12f4 <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
    12b8:	61 11       	cpse	r22, r1
    12ba:	0e c0       	rjmp	.+28     	; 0x12d8 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
    12bc:	42 b3       	in	r20, 0x12	; 18
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	b9 01       	movw	r22, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_setPinValue+0xea>
    12c6:	66 0f       	add	r22, r22
    12c8:	77 1f       	adc	r23, r23
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_setPinValue+0xe6>
    12ce:	cb 01       	movw	r24, r22
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	82 bb       	out	0x12, r24	; 18
    12d6:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    12d8:	61 30       	cpi	r22, 0x01	; 1
    12da:	61 f4       	brne	.+24     	; 0x12f4 <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
    12dc:	42 b3       	in	r20, 0x12	; 18
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	b9 01       	movw	r22, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_setPinValue+0x10a>
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_setPinValue+0x106>
    12ee:	cb 01       	movw	r24, r22
    12f0:	84 2b       	or	r24, r20
    12f2:	82 bb       	out	0x12, r24	; 18
    12f4:	08 95       	ret

000012f6 <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	58 f4       	brcc	.+22     	; 0x1310 <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
    12fa:	29 b3       	in	r18, 0x19	; 25
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_readPinValue+0x10>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_readPinValue+0xc>
    130a:	ca 01       	movw	r24, r20
    130c:	81 70       	andi	r24, 0x01	; 1
    130e:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
    1310:	28 ef       	ldi	r18, 0xF8	; 248
    1312:	28 0f       	add	r18, r24
    1314:	28 30       	cpi	r18, 0x08	; 8
    1316:	48 f4       	brcc	.+18     	; 0x132a <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
    1318:	86 b3       	in	r24, 0x16	; 22
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_readPinValue+0x2c>
    131e:	95 95       	asr	r25
    1320:	87 95       	ror	r24
    1322:	2a 95       	dec	r18
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_readPinValue+0x28>
    1326:	81 70       	andi	r24, 0x01	; 1
    1328:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
    132a:	20 ef       	ldi	r18, 0xF0	; 240
    132c:	28 0f       	add	r18, r24
    132e:	28 30       	cpi	r18, 0x08	; 8
    1330:	48 f4       	brcc	.+18     	; 0x1344 <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
    1332:	83 b3       	in	r24, 0x13	; 19
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_readPinValue+0x46>
    1338:	95 95       	asr	r25
    133a:	87 95       	ror	r24
    133c:	2a 95       	dec	r18
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_readPinValue+0x42>
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
    1344:	28 ee       	ldi	r18, 0xE8	; 232
    1346:	28 0f       	add	r18, r24
    1348:	28 30       	cpi	r18, 0x08	; 8
    134a:	50 f4       	brcc	.+20     	; 0x1360 <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
    134c:	90 b3       	in	r25, 0x10	; 16
    134e:	89 2f       	mov	r24, r25
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_readPinValue+0x62>
    1354:	95 95       	asr	r25
    1356:	87 95       	ror	r24
    1358:	2a 95       	dec	r18
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_readPinValue+0x5e>
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	08 95       	ret
	}
}
    1360:	08 95       	ret

00001362 <DIO_togglePinValue>:

void DIO_togglePinValue(u8 pinNum){
    1362:	cf 93       	push	r28
    1364:	c8 2f       	mov	r28, r24
	DIO_setPinValue(pinNum,!DIO_readPinValue(pinNum));
    1366:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_readPinValue>
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	81 11       	cpse	r24, r1
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	8c 2f       	mov	r24, r28
    1372:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_setPinValue>
}
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
    139c:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <EXT_int0Func>
    13a0:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <EXT_int0Func+0x1>
    13a4:	09 95       	icall
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_2>:
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
    13ea:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <EXT_int1Func>
    13ee:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <EXT_int1Func+0x1>
    13f2:	09 95       	icall
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
	EXT_int2Func();
    1438:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <EXT_int2Func>
    143c:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <EXT_int2Func+0x1>
    1440:	09 95       	icall
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	7f 91       	pop	r23
    1450:	6f 91       	pop	r22
    1452:	5f 91       	pop	r21
    1454:	4f 91       	pop	r20
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti

00001464 <__vector_11>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
    1464:	1f 92       	push	r1
    1466:	0f 92       	push	r0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	0f 92       	push	r0
    146c:	11 24       	eor	r1, r1
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	5f 93       	push	r21
    1476:	6f 93       	push	r22
    1478:	7f 93       	push	r23
    147a:	8f 93       	push	r24
    147c:	9f 93       	push	r25
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
    1486:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <TIMER0_OvFunc>
    148a:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <TIMER0_OvFunc+0x1>
    148e:	09 95       	icall
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	7f 91       	pop	r23
    149e:	6f 91       	pop	r22
    14a0:	5f 91       	pop	r21
    14a2:	4f 91       	pop	r20
    14a4:	3f 91       	pop	r19
    14a6:	2f 91       	pop	r18
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
	TIMER0_CTCFunc();
    14d4:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <TIMER0_CTCFunc>
    14d8:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <TIMER0_CTCFunc+0x1>
    14dc:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <__vector_6>:
}

//Vector Table Function that belongs to TIMER1
//number(in vector table) - 1
void __vector_6() __attribute__((signal));
void __vector_6(){
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
	TIMER1_IcuFunc();
    1522:	e0 91 1d 07 	lds	r30, 0x071D	; 0x80071d <TIMER1_IcuFunc>
    1526:	f0 91 1e 07 	lds	r31, 0x071E	; 0x80071e <TIMER1_IcuFunc+0x1>
    152a:	09 95       	icall
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_13>:
}

//Vector Table Function that belongs to UART_INT
//number(in vector table) - 1
void __vector_13() __attribute__((signal));
void __vector_13(){
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
	UART_INTFunc();
    1570:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <UART_INTFunc>
    1574:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <UART_INTFunc+0x1>
    1578:	09 95       	icall
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <_exit>:
    159c:	f8 94       	cli

0000159e <__stop_program>:
    159e:	ff cf       	rjmp	.-2      	; 0x159e <__stop_program>
