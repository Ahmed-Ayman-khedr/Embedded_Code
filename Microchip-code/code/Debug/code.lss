
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000021ea  0000227e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006cf  0080006e  0080006e  0000228c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f8  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a5a  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001593  00000000  00000000  0000834a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000348c  00000000  00000000  000098dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001274  00000000  00000000  0000cd6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bc1  00000000  00000000  0000dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a71  00000000  00000000  0000fba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  00015612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__vector_1>
       8:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__vector_2>
       c:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__vector_3>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__vector_6>
      1c:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_7>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_10>
      2c:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_11>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_13>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	f5 0c       	add	r15, r5
      56:	f5 0c       	add	r15, r5
      58:	24 0d       	add	r18, r4
      5a:	29 0d       	add	r18, r9
      5c:	3f 0d       	add	r19, r15
      5e:	f5 0c       	add	r15, r5
      60:	f5 0c       	add	r15, r5
      62:	24 0d       	add	r18, r4
      64:	29 0d       	add	r18, r9

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	ea ee       	ldi	r30, 0xEA	; 234
      7a:	f1 e2       	ldi	r31, 0x21	; 33
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	ae 36       	cpi	r26, 0x6E	; 110
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	27 e0       	ldi	r18, 0x07	; 7
      8a:	ae e6       	ldi	r26, 0x6E	; 110
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ad 33       	cpi	r26, 0x3D	; 61
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
      9c:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
 */ 

#include "Sess35EVENTGROUP/TASKSOFTWARETIMERS/sess_INT.h"

int main(){
	source_code();
      a4:	0e 94 63 00 	call	0xc6	; 0xc6 <source_code>
	return 0;
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	08 95       	ret

000000ae <vTimerCallback>:
		vTaskDelay(200/portTICK_PERIOD_MS);
	}
}

 void vTimerCallback(){
	DIO_togglePinValue(DIO_PINC7);
      ae:	87 e1       	ldi	r24, 0x17	; 23
      b0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_togglePinValue>
      b4:	08 95       	ret

000000b6 <TASKTOOGLELED>:
TimerHandle_t TIMER;

void TASKTOOGLELED(void *pvParameters){
	while (1)
	{	
		DIO_togglePinValue(DIO_PINC2);
      b6:	82 e1       	ldi	r24, 0x12	; 18
      b8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_togglePinValue>
		vTaskDelay(200/portTICK_PERIOD_MS);
      bc:	88 ec       	ldi	r24, 0xC8	; 200
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 cb 09 	call	0x1396	; 0x1396 <vTaskDelay>
      c4:	f8 cf       	rjmp	.-16     	; 0xb6 <TASKTOOGLELED>

000000c6 <source_code>:
	DIO_togglePinValue(DIO_PINC7);
}

int source_code()
{	
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
      c6:	61 e0       	ldi	r22, 0x01	; 1
      c8:	82 e1       	ldi	r24, 0x12	; 18
      ca:	0e 94 67 0e 	call	0x1cce	; 0x1cce <DIO_setPinDir>
	
	DIO_setPinDir(DIO_PINC7,DIO_OUTPUT);
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	87 e1       	ldi	r24, 0x17	; 23
      d2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <DIO_setPinDir>
	
	xTaskCreate(TASKTOOGLELED, NULL, 200, NULL, 2, &xHandle1);
      d6:	0f 2e       	mov	r0, r31
      d8:	fd e2       	ldi	r31, 0x2D	; 45
      da:	ef 2e       	mov	r14, r31
      dc:	f7 e0       	ldi	r31, 0x07	; 7
      de:	ff 2e       	mov	r15, r31
      e0:	f0 2d       	mov	r31, r0
      e2:	02 e0       	ldi	r16, 0x02	; 2
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	48 ec       	ldi	r20, 0xC8	; 200
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	8b e5       	ldi	r24, 0x5B	; 91
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 40 07 	call	0xe80	; 0xe80 <xTaskCreate>
	
	TIMER = xTimerCreate( NULL, 500, pdTRUE, 1,  vTimerCallback);
      f8:	07 e5       	ldi	r16, 0x57	; 87
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	64 ef       	ldi	r22, 0xF4	; 244
     104:	71 e0       	ldi	r23, 0x01	; 1
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <xTimerCreate>
     10e:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <TIMER+0x1>
     112:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <TIMER>
	
	xTimerStart(TIMER, 0 );
     116:	0e 94 cf 07 	call	0xf9e	; 0xf9e <xTaskGetTickCount>
     11a:	00 e0       	ldi	r16, 0x00	; 0
     11c:	10 e0       	ldi	r17, 0x00	; 0
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	ac 01       	movw	r20, r24
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <TIMER>
     12a:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <TIMER+0x1>
     12e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xTimerGenericCommand>
	
	vTaskStartScheduler();
     132:	0e 94 99 07 	call	0xf32	; 0xf32 <vTaskStartScheduler>
     136:	ff cf       	rjmp	.-2      	; 0x136 <source_code+0x70>

00000138 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
     13e:	0e 94 c9 07 	call	0xf92	; 0xf92 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     142:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     146:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
     14a:	89 2b       	or	r24, r25
     14c:	31 f4       	brne	.+12     	; 0x15a <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     14e:	82 e7       	ldi	r24, 0x72	; 114
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
     156:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     15a:	20 97       	sbiw	r28, 0x00	; 0
     15c:	c9 f0       	breq	.+50     	; 0x190 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     15e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <xNextFreeByte>
     162:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <xNextFreeByte+0x1>
     166:	9e 01       	movw	r18, r28
     168:	28 0f       	add	r18, r24
     16a:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     16c:	2f 33       	cpi	r18, 0x3F	; 63
     16e:	46 e0       	ldi	r20, 0x06	; 6
     170:	34 07       	cpc	r19, r20
     172:	88 f4       	brcc	.+34     	; 0x196 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     174:	82 17       	cp	r24, r18
     176:	93 07       	cpc	r25, r19
     178:	88 f4       	brcc	.+34     	; 0x19c <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     17a:	c0 91 6e 00 	lds	r28, 0x006E	; 0x80006e <__data_end>
     17e:	d0 91 6f 00 	lds	r29, 0x006F	; 0x80006f <__data_end+0x1>
     182:	c8 0f       	add	r28, r24
     184:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     186:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <xNextFreeByte+0x1>
     18a:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <xNextFreeByte>
     18e:	08 c0       	rjmp	.+16     	; 0x1a0 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     190:	c0 e0       	ldi	r28, 0x00	; 0
     192:	d0 e0       	ldi	r29, 0x00	; 0
     194:	05 c0       	rjmp	.+10     	; 0x1a0 <pvPortMalloc+0x68>
     196:	c0 e0       	ldi	r28, 0x00	; 0
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <pvPortMalloc+0x68>
     19c:	c0 e0       	ldi	r28, 0x00	; 0
     19e:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     1a0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     1a4:	ce 01       	movw	r24, r28
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     1ac:	08 95       	ret

000001ae <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     1ae:	fc 01       	movw	r30, r24
     1b0:	03 96       	adiw	r24, 0x03	; 3
     1b2:	92 83       	std	Z+2, r25	; 0x02
     1b4:	81 83       	std	Z+1, r24	; 0x01
     1b6:	2f ef       	ldi	r18, 0xFF	; 255
     1b8:	3f ef       	ldi	r19, 0xFF	; 255
     1ba:	34 83       	std	Z+4, r19	; 0x04
     1bc:	23 83       	std	Z+3, r18	; 0x03
     1be:	96 83       	std	Z+6, r25	; 0x06
     1c0:	85 83       	std	Z+5, r24	; 0x05
     1c2:	90 87       	std	Z+8, r25	; 0x08
     1c4:	87 83       	std	Z+7, r24	; 0x07
     1c6:	10 82       	st	Z, r1
     1c8:	08 95       	ret

000001ca <vListInitialiseItem>:
     1ca:	fc 01       	movw	r30, r24
     1cc:	11 86       	std	Z+9, r1	; 0x09
     1ce:	10 86       	std	Z+8, r1	; 0x08
     1d0:	08 95       	ret

000001d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     1d8:	48 81       	ld	r20, Y
     1da:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     1dc:	4f 3f       	cpi	r20, 0xFF	; 255
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	52 07       	cpc	r21, r18
     1e2:	21 f4       	brne	.+8      	; 0x1ec <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     1e4:	fc 01       	movw	r30, r24
     1e6:	a7 81       	ldd	r26, Z+7	; 0x07
     1e8:	b0 85       	ldd	r27, Z+8	; 0x08
     1ea:	0d c0       	rjmp	.+26     	; 0x206 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     1ec:	dc 01       	movw	r26, r24
     1ee:	13 96       	adiw	r26, 0x03	; 3
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <vListInsert+0x22>
     1f2:	df 01       	movw	r26, r30
     1f4:	12 96       	adiw	r26, 0x02	; 2
     1f6:	ed 91       	ld	r30, X+
     1f8:	fc 91       	ld	r31, X
     1fa:	13 97       	sbiw	r26, 0x03	; 3
     1fc:	20 81       	ld	r18, Z
     1fe:	31 81       	ldd	r19, Z+1	; 0x01
     200:	42 17       	cp	r20, r18
     202:	53 07       	cpc	r21, r19
     204:	b0 f7       	brcc	.-20     	; 0x1f2 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     206:	12 96       	adiw	r26, 0x02	; 2
     208:	ed 91       	ld	r30, X+
     20a:	fc 91       	ld	r31, X
     20c:	13 97       	sbiw	r26, 0x03	; 3
     20e:	fb 83       	std	Y+3, r31	; 0x03
     210:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     212:	d5 83       	std	Z+5, r29	; 0x05
     214:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     216:	bd 83       	std	Y+5, r27	; 0x05
     218:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     21a:	13 96       	adiw	r26, 0x03	; 3
     21c:	dc 93       	st	X, r29
     21e:	ce 93       	st	-X, r28
     220:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     222:	99 87       	std	Y+9, r25	; 0x09
     224:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     226:	fc 01       	movw	r30, r24
     228:	20 81       	ld	r18, Z
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	20 83       	st	Z, r18
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     23a:	a0 85       	ldd	r26, Z+8	; 0x08
     23c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     23e:	c2 81       	ldd	r28, Z+2	; 0x02
     240:	d3 81       	ldd	r29, Z+3	; 0x03
     242:	84 81       	ldd	r24, Z+4	; 0x04
     244:	95 81       	ldd	r25, Z+5	; 0x05
     246:	9d 83       	std	Y+5, r25	; 0x05
     248:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     24a:	c4 81       	ldd	r28, Z+4	; 0x04
     24c:	d5 81       	ldd	r29, Z+5	; 0x05
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	93 81       	ldd	r25, Z+3	; 0x03
     252:	9b 83       	std	Y+3, r25	; 0x03
     254:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	8d 91       	ld	r24, X+
     25a:	9c 91       	ld	r25, X
     25c:	12 97       	sbiw	r26, 0x02	; 2
     25e:	e8 17       	cp	r30, r24
     260:	f9 07       	cpc	r31, r25
     262:	31 f4       	brne	.+12     	; 0x270 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     264:	84 81       	ldd	r24, Z+4	; 0x04
     266:	95 81       	ldd	r25, Z+5	; 0x05
     268:	12 96       	adiw	r26, 0x02	; 2
     26a:	9c 93       	st	X, r25
     26c:	8e 93       	st	-X, r24
     26e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     270:	11 86       	std	Z+9, r1	; 0x09
     272:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     274:	8c 91       	ld	r24, X
     276:	81 50       	subi	r24, 0x01	; 1
     278:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     27a:	8c 91       	ld	r24, X
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     282:	1b bc       	out	0x2b, r1	; 43
     284:	89 ef       	ldi	r24, 0xF9	; 249
     286:	8a bd       	out	0x2a, r24	; 42
     288:	8b e0       	ldi	r24, 0x0B	; 11
     28a:	8e bd       	out	0x2e, r24	; 46
     28c:	89 b7       	in	r24, 0x39	; 57
     28e:	80 61       	ori	r24, 0x10	; 16
     290:	89 bf       	out	0x39, r24	; 57
     292:	08 95       	ret

00000294 <pxPortInitialiseStack>:
     294:	31 e1       	ldi	r19, 0x11	; 17
     296:	fc 01       	movw	r30, r24
     298:	30 83       	st	Z, r19
     29a:	31 97       	sbiw	r30, 0x01	; 1
     29c:	22 e2       	ldi	r18, 0x22	; 34
     29e:	20 83       	st	Z, r18
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	a3 e3       	ldi	r26, 0x33	; 51
     2a4:	a0 83       	st	Z, r26
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	60 83       	st	Z, r22
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	70 83       	st	Z, r23
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	10 82       	st	Z, r1
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	60 e8       	ldi	r22, 0x80	; 128
     2b6:	60 83       	st	Z, r22
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	10 82       	st	Z, r1
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	62 e0       	ldi	r22, 0x02	; 2
     2c0:	60 83       	st	Z, r22
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	63 e0       	ldi	r22, 0x03	; 3
     2c6:	60 83       	st	Z, r22
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	64 e0       	ldi	r22, 0x04	; 4
     2cc:	60 83       	st	Z, r22
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	65 e0       	ldi	r22, 0x05	; 5
     2d2:	60 83       	st	Z, r22
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	66 e0       	ldi	r22, 0x06	; 6
     2d8:	60 83       	st	Z, r22
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	67 e0       	ldi	r22, 0x07	; 7
     2de:	60 83       	st	Z, r22
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	68 e0       	ldi	r22, 0x08	; 8
     2e4:	60 83       	st	Z, r22
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	69 e0       	ldi	r22, 0x09	; 9
     2ea:	60 83       	st	Z, r22
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	60 e1       	ldi	r22, 0x10	; 16
     2f0:	60 83       	st	Z, r22
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	30 83       	st	Z, r19
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	32 e1       	ldi	r19, 0x12	; 18
     2fa:	30 83       	st	Z, r19
     2fc:	31 97       	sbiw	r30, 0x01	; 1
     2fe:	33 e1       	ldi	r19, 0x13	; 19
     300:	30 83       	st	Z, r19
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	34 e1       	ldi	r19, 0x14	; 20
     306:	30 83       	st	Z, r19
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	35 e1       	ldi	r19, 0x15	; 21
     30c:	30 83       	st	Z, r19
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	36 e1       	ldi	r19, 0x16	; 22
     312:	30 83       	st	Z, r19
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	37 e1       	ldi	r19, 0x17	; 23
     318:	30 83       	st	Z, r19
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	38 e1       	ldi	r19, 0x18	; 24
     31e:	30 83       	st	Z, r19
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	39 e1       	ldi	r19, 0x19	; 25
     324:	30 83       	st	Z, r19
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	30 e2       	ldi	r19, 0x20	; 32
     32a:	30 83       	st	Z, r19
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	31 e2       	ldi	r19, 0x21	; 33
     330:	30 83       	st	Z, r19
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	20 83       	st	Z, r18
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	23 e2       	ldi	r18, 0x23	; 35
     33a:	20 83       	st	Z, r18
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	40 83       	st	Z, r20
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	50 83       	st	Z, r21
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	26 e2       	ldi	r18, 0x26	; 38
     348:	20 83       	st	Z, r18
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	27 e2       	ldi	r18, 0x27	; 39
     34e:	20 83       	st	Z, r18
     350:	31 97       	sbiw	r30, 0x01	; 1
     352:	28 e2       	ldi	r18, 0x28	; 40
     354:	20 83       	st	Z, r18
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	29 e2       	ldi	r18, 0x29	; 41
     35a:	20 83       	st	Z, r18
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	20 e3       	ldi	r18, 0x30	; 48
     360:	20 83       	st	Z, r18
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	21 e3       	ldi	r18, 0x31	; 49
     366:	20 83       	st	Z, r18
     368:	86 97       	sbiw	r24, 0x26	; 38
     36a:	08 95       	ret

0000036c <xPortStartScheduler>:
     36c:	0e 94 41 01 	call	0x282	; 0x282 <prvSetupTimerInterrupt>
     370:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
     374:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     378:	cd 91       	ld	r28, X+
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	dd 91       	ld	r29, X+
     37e:	de bf       	out	0x3e, r29	; 62
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	bf 91       	pop	r27
     38a:	af 91       	pop	r26
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	7f 91       	pop	r23
     392:	6f 91       	pop	r22
     394:	5f 91       	pop	r21
     396:	4f 91       	pop	r20
     398:	3f 91       	pop	r19
     39a:	2f 91       	pop	r18
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	bf 90       	pop	r11
     3aa:	af 90       	pop	r10
     3ac:	9f 90       	pop	r9
     3ae:	8f 90       	pop	r8
     3b0:	7f 90       	pop	r7
     3b2:	6f 90       	pop	r6
     3b4:	5f 90       	pop	r5
     3b6:	4f 90       	pop	r4
     3b8:	3f 90       	pop	r3
     3ba:	2f 90       	pop	r2
     3bc:	1f 90       	pop	r1
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	08 95       	ret
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret

000003ca <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	0f 92       	push	r0
     3d2:	1f 92       	push	r1
     3d4:	11 24       	eor	r1, r1
     3d6:	2f 92       	push	r2
     3d8:	3f 92       	push	r3
     3da:	4f 92       	push	r4
     3dc:	5f 92       	push	r5
     3de:	6f 92       	push	r6
     3e0:	7f 92       	push	r7
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	2f 93       	push	r18
     3f8:	3f 93       	push	r19
     3fa:	4f 93       	push	r20
     3fc:	5f 93       	push	r21
     3fe:	6f 93       	push	r22
     400:	7f 93       	push	r23
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	af 93       	push	r26
     408:	bf 93       	push	r27
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
     412:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
     416:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     41a:	0d b6       	in	r0, 0x3d	; 61
     41c:	0d 92       	st	X+, r0
     41e:	0e b6       	in	r0, 0x3e	; 62
     420:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     422:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     426:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
     42a:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     42e:	cd 91       	ld	r28, X+
     430:	cd bf       	out	0x3d, r28	; 61
     432:	dd 91       	ld	r29, X+
     434:	de bf       	out	0x3e, r29	; 62
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	9f 90       	pop	r9
     464:	8f 90       	pop	r8
     466:	7f 90       	pop	r7
     468:	6f 90       	pop	r6
     46a:	5f 90       	pop	r5
     46c:	4f 90       	pop	r4
     46e:	3f 90       	pop	r3
     470:	2f 90       	pop	r2
     472:	1f 90       	pop	r1
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0

	asm volatile ( "ret" );
     47a:	08 95       	ret

0000047c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	0f 92       	push	r0
     484:	1f 92       	push	r1
     486:	11 24       	eor	r1, r1
     488:	2f 92       	push	r2
     48a:	3f 92       	push	r3
     48c:	4f 92       	push	r4
     48e:	5f 92       	push	r5
     490:	6f 92       	push	r6
     492:	7f 92       	push	r7
     494:	8f 92       	push	r8
     496:	9f 92       	push	r9
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
     4c4:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
     4c8:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     4cc:	0d b6       	in	r0, 0x3d	; 61
     4ce:	0d 92       	st	X+, r0
     4d0:	0e b6       	in	r0, 0x3e	; 62
     4d2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4d4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <xTaskIncrementTick>
     4d8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4da:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4de:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
     4e2:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     4e6:	cd 91       	ld	r28, X+
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	dd 91       	ld	r29, X+
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	7f 91       	pop	r23
     500:	6f 91       	pop	r22
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	9f 90       	pop	r9
     51c:	8f 90       	pop	r8
     51e:	7f 90       	pop	r7
     520:	6f 90       	pop	r6
     522:	5f 90       	pop	r5
     524:	4f 90       	pop	r4
     526:	3f 90       	pop	r3
     528:	2f 90       	pop	r2
     52a:	1f 90       	pop	r1
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0

	asm volatile ( "ret" );
     532:	08 95       	ret

00000534 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     534:	0e 94 3e 02 	call	0x47c	; 0x47c <vPortYieldFromTick>
		asm volatile ( "reti" );
     538:	18 95       	reti

0000053a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	0f 92       	push	r0
     540:	fc 01       	movw	r30, r24
     542:	82 8d       	ldd	r24, Z+26	; 0x1a
     544:	81 11       	cpse	r24, r1
     546:	02 c0       	rjmp	.+4      	; 0x54c <prvIsQueueEmpty+0x12>
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	01 c0       	rjmp	.+2      	; 0x54e <prvIsQueueEmpty+0x14>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	08 95       	ret

00000554 <prvIsQueueFull>:
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	0f 92       	push	r0
     55a:	fc 01       	movw	r30, r24
     55c:	22 8d       	ldd	r18, Z+26	; 0x1a
     55e:	83 8d       	ldd	r24, Z+27	; 0x1b
     560:	28 13       	cpse	r18, r24
     562:	02 c0       	rjmp	.+4      	; 0x568 <prvIsQueueFull+0x14>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	01 c0       	rjmp	.+2      	; 0x56a <prvIsQueueFull+0x16>
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	08 95       	ret

00000570 <prvCopyDataToQueue>:
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ec 01       	movw	r28, r24
     57a:	04 2f       	mov	r16, r20
     57c:	1a 8d       	ldd	r17, Y+26	; 0x1a
     57e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     580:	44 23       	and	r20, r20
     582:	b9 f1       	breq	.+110    	; 0x5f2 <prvCopyDataToQueue+0x82>
     584:	01 11       	cpse	r16, r1
     586:	16 c0       	rjmp	.+44     	; 0x5b4 <prvCopyDataToQueue+0x44>
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	9b 81       	ldd	r25, Y+3	; 0x03
     58e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <memcpy>
     592:	2c 8d       	ldd	r18, Y+28	; 0x1c
     594:	8a 81       	ldd	r24, Y+2	; 0x02
     596:	9b 81       	ldd	r25, Y+3	; 0x03
     598:	82 0f       	add	r24, r18
     59a:	91 1d       	adc	r25, r1
     59c:	9b 83       	std	Y+3, r25	; 0x03
     59e:	8a 83       	std	Y+2, r24	; 0x02
     5a0:	2c 81       	ldd	r18, Y+4	; 0x04
     5a2:	3d 81       	ldd	r19, Y+5	; 0x05
     5a4:	82 17       	cp	r24, r18
     5a6:	93 07       	cpc	r25, r19
     5a8:	20 f1       	brcs	.+72     	; 0x5f2 <prvCopyDataToQueue+0x82>
     5aa:	88 81       	ld	r24, Y
     5ac:	99 81       	ldd	r25, Y+1	; 0x01
     5ae:	9b 83       	std	Y+3, r25	; 0x03
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	1f c0       	rjmp	.+62     	; 0x5f2 <prvCopyDataToQueue+0x82>
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	8e 81       	ldd	r24, Y+6	; 0x06
     5b8:	9f 81       	ldd	r25, Y+7	; 0x07
     5ba:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <memcpy>
     5be:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	91 95       	neg	r25
     5c4:	81 95       	neg	r24
     5c6:	91 09       	sbc	r25, r1
     5c8:	2e 81       	ldd	r18, Y+6	; 0x06
     5ca:	3f 81       	ldd	r19, Y+7	; 0x07
     5cc:	28 0f       	add	r18, r24
     5ce:	39 1f       	adc	r19, r25
     5d0:	3f 83       	std	Y+7, r19	; 0x07
     5d2:	2e 83       	std	Y+6, r18	; 0x06
     5d4:	48 81       	ld	r20, Y
     5d6:	59 81       	ldd	r21, Y+1	; 0x01
     5d8:	24 17       	cp	r18, r20
     5da:	35 07       	cpc	r19, r21
     5dc:	30 f4       	brcc	.+12     	; 0x5ea <prvCopyDataToQueue+0x7a>
     5de:	2c 81       	ldd	r18, Y+4	; 0x04
     5e0:	3d 81       	ldd	r19, Y+5	; 0x05
     5e2:	82 0f       	add	r24, r18
     5e4:	93 1f       	adc	r25, r19
     5e6:	9f 83       	std	Y+7, r25	; 0x07
     5e8:	8e 83       	std	Y+6, r24	; 0x06
     5ea:	02 30       	cpi	r16, 0x02	; 2
     5ec:	11 f4       	brne	.+4      	; 0x5f2 <prvCopyDataToQueue+0x82>
     5ee:	11 11       	cpse	r17, r1
     5f0:	11 50       	subi	r17, 0x01	; 1
     5f2:	1f 5f       	subi	r17, 0xFF	; 255
     5f4:	1a 8f       	std	Y+26, r17	; 0x1a
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	08 95       	ret

00000602 <prvCopyDataFromQueue>:
     602:	fc 01       	movw	r30, r24
     604:	44 8d       	ldd	r20, Z+28	; 0x1c
     606:	44 23       	and	r20, r20
     608:	a9 f0       	breq	.+42     	; 0x634 <prvCopyDataFromQueue+0x32>
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	26 81       	ldd	r18, Z+6	; 0x06
     60e:	37 81       	ldd	r19, Z+7	; 0x07
     610:	24 0f       	add	r18, r20
     612:	35 1f       	adc	r19, r21
     614:	37 83       	std	Z+7, r19	; 0x07
     616:	26 83       	std	Z+6, r18	; 0x06
     618:	84 81       	ldd	r24, Z+4	; 0x04
     61a:	95 81       	ldd	r25, Z+5	; 0x05
     61c:	28 17       	cp	r18, r24
     61e:	39 07       	cpc	r19, r25
     620:	20 f0       	brcs	.+8      	; 0x62a <prvCopyDataFromQueue+0x28>
     622:	80 81       	ld	r24, Z
     624:	91 81       	ldd	r25, Z+1	; 0x01
     626:	97 83       	std	Z+7, r25	; 0x07
     628:	86 83       	std	Z+6, r24	; 0x06
     62a:	cb 01       	movw	r24, r22
     62c:	66 81       	ldd	r22, Z+6	; 0x06
     62e:	77 81       	ldd	r23, Z+7	; 0x07
     630:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <memcpy>
     634:	08 95       	ret

00000636 <prvUnlockQueue>:
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	ec 01       	movw	r28, r24
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	0f 92       	push	r0
     644:	1e 8d       	ldd	r17, Y+30	; 0x1e
     646:	0b c0       	rjmp	.+22     	; 0x65e <prvUnlockQueue+0x28>
     648:	89 89       	ldd	r24, Y+17	; 0x11
     64a:	88 23       	and	r24, r24
     64c:	51 f0       	breq	.+20     	; 0x662 <prvUnlockQueue+0x2c>
     64e:	ce 01       	movw	r24, r28
     650:	41 96       	adiw	r24, 0x11	; 17
     652:	0e 94 90 0a 	call	0x1520	; 0x1520 <xTaskRemoveFromEventList>
     656:	81 11       	cpse	r24, r1
     658:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskMissedYield>
     65c:	11 50       	subi	r17, 0x01	; 1
     65e:	11 16       	cp	r1, r17
     660:	9c f3       	brlt	.-26     	; 0x648 <prvUnlockQueue+0x12>
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	8e 8f       	std	Y+30, r24	; 0x1e
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	0f 92       	push	r0
     670:	1d 8d       	ldd	r17, Y+29	; 0x1d
     672:	0b c0       	rjmp	.+22     	; 0x68a <prvUnlockQueue+0x54>
     674:	88 85       	ldd	r24, Y+8	; 0x08
     676:	88 23       	and	r24, r24
     678:	51 f0       	breq	.+20     	; 0x68e <prvUnlockQueue+0x58>
     67a:	ce 01       	movw	r24, r28
     67c:	08 96       	adiw	r24, 0x08	; 8
     67e:	0e 94 90 0a 	call	0x1520	; 0x1520 <xTaskRemoveFromEventList>
     682:	81 11       	cpse	r24, r1
     684:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskMissedYield>
     688:	11 50       	subi	r17, 0x01	; 1
     68a:	11 16       	cp	r1, r17
     68c:	9c f3       	brlt	.-26     	; 0x674 <prvUnlockQueue+0x3e>
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	8d 8f       	std	Y+29, r24	; 0x1d
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	08 95       	ret

0000069e <xQueueGenericReset>:
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	fc 01       	movw	r30, r24
     6a8:	36 2f       	mov	r19, r22
     6aa:	89 2b       	or	r24, r25
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <xQueueGenericReset+0x12>
     6ae:	4d c0       	rjmp	.+154    	; 0x74a <xQueueGenericReset+0xac>
     6b0:	23 8d       	ldd	r18, Z+27	; 0x1b
     6b2:	22 23       	and	r18, r18
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <xQueueGenericReset+0x1a>
     6b6:	4b c0       	rjmp	.+150    	; 0x74e <xQueueGenericReset+0xb0>
     6b8:	02 2f       	mov	r16, r18
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	b8 01       	movw	r22, r16
     6c2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__udivmodhi4>
     6c6:	44 8d       	ldd	r20, Z+28	; 0x1c
     6c8:	84 2f       	mov	r24, r20
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	68 17       	cp	r22, r24
     6ce:	79 07       	cpc	r23, r25
     6d0:	08 f4       	brcc	.+2      	; 0x6d4 <xQueueGenericReset+0x36>
     6d2:	3f c0       	rjmp	.+126    	; 0x752 <xQueueGenericReset+0xb4>
     6d4:	ef 01       	movw	r28, r30
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	0f 92       	push	r0
     6dc:	60 81       	ld	r22, Z
     6de:	71 81       	ldd	r23, Z+1	; 0x01
     6e0:	fb 01       	movw	r30, r22
     6e2:	24 9f       	mul	r18, r20
     6e4:	e0 0d       	add	r30, r0
     6e6:	f1 1d       	adc	r31, r1
     6e8:	11 24       	eor	r1, r1
     6ea:	fd 83       	std	Y+5, r31	; 0x05
     6ec:	ec 83       	std	Y+4, r30	; 0x04
     6ee:	1a 8e       	std	Y+26, r1	; 0x1a
     6f0:	7b 83       	std	Y+3, r23	; 0x03
     6f2:	6a 83       	std	Y+2, r22	; 0x02
     6f4:	01 50       	subi	r16, 0x01	; 1
     6f6:	11 09       	sbc	r17, r1
     6f8:	80 9f       	mul	r24, r16
     6fa:	a0 01       	movw	r20, r0
     6fc:	81 9f       	mul	r24, r17
     6fe:	50 0d       	add	r21, r0
     700:	90 9f       	mul	r25, r16
     702:	50 0d       	add	r21, r0
     704:	11 24       	eor	r1, r1
     706:	cb 01       	movw	r24, r22
     708:	84 0f       	add	r24, r20
     70a:	95 1f       	adc	r25, r21
     70c:	9f 83       	std	Y+7, r25	; 0x07
     70e:	8e 83       	std	Y+6, r24	; 0x06
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	8d 8f       	std	Y+29, r24	; 0x1d
     714:	8e 8f       	std	Y+30, r24	; 0x1e
     716:	31 11       	cpse	r19, r1
     718:	0c c0       	rjmp	.+24     	; 0x732 <xQueueGenericReset+0x94>
     71a:	88 85       	ldd	r24, Y+8	; 0x08
     71c:	88 23       	and	r24, r24
     71e:	89 f0       	breq	.+34     	; 0x742 <xQueueGenericReset+0xa4>
     720:	ce 01       	movw	r24, r28
     722:	08 96       	adiw	r24, 0x08	; 8
     724:	0e 94 90 0a 	call	0x1520	; 0x1520 <xTaskRemoveFromEventList>
     728:	88 23       	and	r24, r24
     72a:	59 f0       	breq	.+22     	; 0x742 <xQueueGenericReset+0xa4>
     72c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     730:	08 c0       	rjmp	.+16     	; 0x742 <xQueueGenericReset+0xa4>
     732:	ce 01       	movw	r24, r28
     734:	08 96       	adiw	r24, 0x08	; 8
     736:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     73a:	ce 01       	movw	r24, r28
     73c:	41 96       	adiw	r24, 0x11	; 17
     73e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	05 c0       	rjmp	.+10     	; 0x754 <xQueueGenericReset+0xb6>
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	03 c0       	rjmp	.+6      	; 0x754 <xQueueGenericReset+0xb6>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	01 c0       	rjmp	.+2      	; 0x754 <xQueueGenericReset+0xb6>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <prvInitialiseNewQueue>:
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	f8 01       	movw	r30, r16
     764:	61 11       	cpse	r22, r1
     766:	03 c0       	rjmp	.+6      	; 0x76e <prvInitialiseNewQueue+0x10>
     768:	11 83       	std	Z+1, r17	; 0x01
     76a:	00 83       	st	Z, r16
     76c:	02 c0       	rjmp	.+4      	; 0x772 <prvInitialiseNewQueue+0x14>
     76e:	51 83       	std	Z+1, r21	; 0x01
     770:	40 83       	st	Z, r20
     772:	83 8f       	std	Z+27, r24	; 0x1b
     774:	64 8f       	std	Z+28, r22	; 0x1c
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	cf 01       	movw	r24, r30
     77a:	0e 94 4f 03 	call	0x69e	; 0x69e <xQueueGenericReset>
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	08 95       	ret

00000784 <xQueueGenericCreate>:
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	38 2f       	mov	r19, r24
     794:	e6 2f       	mov	r30, r22
     796:	88 23       	and	r24, r24
     798:	29 f1       	breq	.+74     	; 0x7e4 <xQueueGenericCreate+0x60>
     79a:	68 2f       	mov	r22, r24
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	9f ef       	ldi	r25, 0xFF	; 255
     7a2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__udivmodhi4>
     7a6:	8e 2f       	mov	r24, r30
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	68 17       	cp	r22, r24
     7ac:	79 07       	cpc	r23, r25
     7ae:	e8 f0       	brcs	.+58     	; 0x7ea <xQueueGenericCreate+0x66>
     7b0:	3e 9f       	mul	r19, r30
     7b2:	c0 01       	movw	r24, r0
     7b4:	11 24       	eor	r1, r1
     7b6:	81 3e       	cpi	r24, 0xE1	; 225
     7b8:	2f ef       	ldi	r18, 0xFF	; 255
     7ba:	92 07       	cpc	r25, r18
     7bc:	c8 f4       	brcc	.+50     	; 0x7f0 <xQueueGenericCreate+0x6c>
     7be:	d4 2e       	mov	r13, r20
     7c0:	de 2f       	mov	r29, r30
     7c2:	c3 2f       	mov	r28, r19
     7c4:	4f 96       	adiw	r24, 0x1f	; 31
     7c6:	0e 94 9c 00 	call	0x138	; 0x138 <pvPortMalloc>
     7ca:	7c 01       	movw	r14, r24
     7cc:	00 97       	sbiw	r24, 0x00	; 0
     7ce:	91 f0       	breq	.+36     	; 0x7f4 <xQueueGenericCreate+0x70>
     7d0:	8c 01       	movw	r16, r24
     7d2:	2d 2d       	mov	r18, r13
     7d4:	ac 01       	movw	r20, r24
     7d6:	41 5e       	subi	r20, 0xE1	; 225
     7d8:	5f 4f       	sbci	r21, 0xFF	; 255
     7da:	6d 2f       	mov	r22, r29
     7dc:	8c 2f       	mov	r24, r28
     7de:	0e 94 af 03 	call	0x75e	; 0x75e <prvInitialiseNewQueue>
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <xQueueGenericCreate+0x70>
     7e4:	e1 2c       	mov	r14, r1
     7e6:	f1 2c       	mov	r15, r1
     7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <xQueueGenericCreate+0x70>
     7ea:	e1 2c       	mov	r14, r1
     7ec:	f1 2c       	mov	r15, r1
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <xQueueGenericCreate+0x70>
     7f0:	e1 2c       	mov	r14, r1
     7f2:	f1 2c       	mov	r15, r1
     7f4:	c7 01       	movw	r24, r14
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	08 95       	ret

00000806 <xQueueGenericSend>:
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <xQueueGenericSend+0x12>
     818:	00 d0       	rcall	.+0      	; 0x81a <xQueueGenericSend+0x14>
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	8c 01       	movw	r16, r24
     822:	7b 01       	movw	r14, r22
     824:	5d 83       	std	Y+5, r21	; 0x05
     826:	4c 83       	std	Y+4, r20	; 0x04
     828:	c2 2e       	mov	r12, r18
     82a:	d1 2c       	mov	r13, r1
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	0f 92       	push	r0
     832:	f8 01       	movw	r30, r16
     834:	92 8d       	ldd	r25, Z+26	; 0x1a
     836:	83 8d       	ldd	r24, Z+27	; 0x1b
     838:	98 17       	cp	r25, r24
     83a:	18 f0       	brcs	.+6      	; 0x842 <xQueueGenericSend+0x3c>
     83c:	f2 e0       	ldi	r31, 0x02	; 2
     83e:	cf 12       	cpse	r12, r31
     840:	19 c0       	rjmp	.+50     	; 0x874 <__stack+0x15>
     842:	4c 2d       	mov	r20, r12
     844:	b7 01       	movw	r22, r14
     846:	c8 01       	movw	r24, r16
     848:	0e 94 b8 02 	call	0x570	; 0x570 <prvCopyDataToQueue>
     84c:	f8 01       	movw	r30, r16
     84e:	91 89       	ldd	r25, Z+17	; 0x11
     850:	99 23       	and	r25, r25
     852:	49 f0       	breq	.+18     	; 0x866 <__stack+0x7>
     854:	c8 01       	movw	r24, r16
     856:	41 96       	adiw	r24, 0x11	; 17
     858:	0e 94 90 0a 	call	0x1520	; 0x1520 <xTaskRemoveFromEventList>
     85c:	88 23       	and	r24, r24
     85e:	31 f0       	breq	.+12     	; 0x86c <__stack+0xd>
     860:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     864:	03 c0       	rjmp	.+6      	; 0x86c <__stack+0xd>
     866:	81 11       	cpse	r24, r1
     868:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     86c:	0f 90       	pop	r0
     86e:	0f be       	out	0x3f, r0	; 63
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	4d c0       	rjmp	.+154    	; 0x90e <__stack+0xaf>
     874:	8c 81       	ldd	r24, Y+4	; 0x04
     876:	9d 81       	ldd	r25, Y+5	; 0x05
     878:	89 2b       	or	r24, r25
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	45 c0       	rjmp	.+138    	; 0x90e <__stack+0xaf>
     884:	d1 10       	cpse	r13, r1
     886:	06 c0       	rjmp	.+12     	; 0x894 <__stack+0x35>
     888:	ce 01       	movw	r24, r28
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	0e 94 4d 0b 	call	0x169a	; 0x169a <vTaskInternalSetTimeOutState>
     890:	dd 24       	eor	r13, r13
     892:	d3 94       	inc	r13
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0e 94 c9 07 	call	0xf92	; 0xf92 <vTaskSuspendAll>
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	0f 92       	push	r0
     8a2:	f8 01       	movw	r30, r16
     8a4:	85 8d       	ldd	r24, Z+29	; 0x1d
     8a6:	8f 3f       	cpi	r24, 0xFF	; 255
     8a8:	09 f4       	brne	.+2      	; 0x8ac <__stack+0x4d>
     8aa:	15 8e       	std	Z+29, r1	; 0x1d
     8ac:	f8 01       	movw	r30, r16
     8ae:	86 8d       	ldd	r24, Z+30	; 0x1e
     8b0:	8f 3f       	cpi	r24, 0xFF	; 255
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	16 8e       	std	Z+30, r1	; 0x1e
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	be 01       	movw	r22, r28
     8bc:	6c 5f       	subi	r22, 0xFC	; 252
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <xTaskCheckForTimeOut>
     8c8:	81 11       	cpse	r24, r1
     8ca:	1b c0       	rjmp	.+54     	; 0x902 <__stack+0xa3>
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 aa 02 	call	0x554	; 0x554 <prvIsQueueFull>
     8d2:	88 23       	and	r24, r24
     8d4:	81 f0       	breq	.+32     	; 0x8f6 <__stack+0x97>
     8d6:	6c 81       	ldd	r22, Y+4	; 0x04
     8d8:	7d 81       	ldd	r23, Y+5	; 0x05
     8da:	c8 01       	movw	r24, r16
     8dc:	08 96       	adiw	r24, 0x08	; 8
     8de:	0e 94 35 0a 	call	0x146a	; 0x146a <vTaskPlaceOnEventList>
     8e2:	c8 01       	movw	r24, r16
     8e4:	0e 94 1b 03 	call	0x636	; 0x636 <prvUnlockQueue>
     8e8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
     8ec:	81 11       	cpse	r24, r1
     8ee:	9e cf       	rjmp	.-196    	; 0x82c <xQueueGenericSend+0x26>
     8f0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     8f4:	9b cf       	rjmp	.-202    	; 0x82c <xQueueGenericSend+0x26>
     8f6:	c8 01       	movw	r24, r16
     8f8:	0e 94 1b 03 	call	0x636	; 0x636 <prvUnlockQueue>
     8fc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
     900:	95 cf       	rjmp	.-214    	; 0x82c <xQueueGenericSend+0x26>
     902:	c8 01       	movw	r24, r16
     904:	0e 94 1b 03 	call	0x636	; 0x636 <prvUnlockQueue>
     908:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	08 95       	ret

0000092a <xQueueGenericSendFromISR>:
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	8a 01       	movw	r16, r20
     938:	fc 01       	movw	r30, r24
     93a:	52 8d       	ldd	r21, Z+26	; 0x1a
     93c:	33 8d       	ldd	r19, Z+27	; 0x1b
     93e:	53 17       	cp	r21, r19
     940:	10 f0       	brcs	.+4      	; 0x946 <xQueueGenericSendFromISR+0x1c>
     942:	22 30       	cpi	r18, 0x02	; 2
     944:	21 f5       	brne	.+72     	; 0x98e <xQueueGenericSendFromISR+0x64>
     946:	42 2f       	mov	r20, r18
     948:	78 01       	movw	r14, r16
     94a:	ec 01       	movw	r28, r24
     94c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     94e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     950:	ce 01       	movw	r24, r28
     952:	0e 94 b8 02 	call	0x570	; 0x570 <prvCopyDataToQueue>
     956:	1f 3f       	cpi	r17, 0xFF	; 255
     958:	81 f4       	brne	.+32     	; 0x97a <xQueueGenericSendFromISR+0x50>
     95a:	89 89       	ldd	r24, Y+17	; 0x11
     95c:	88 23       	and	r24, r24
     95e:	c9 f0       	breq	.+50     	; 0x992 <xQueueGenericSendFromISR+0x68>
     960:	ce 01       	movw	r24, r28
     962:	41 96       	adiw	r24, 0x11	; 17
     964:	0e 94 90 0a 	call	0x1520	; 0x1520 <xTaskRemoveFromEventList>
     968:	88 23       	and	r24, r24
     96a:	a9 f0       	breq	.+42     	; 0x996 <xQueueGenericSendFromISR+0x6c>
     96c:	e1 14       	cp	r14, r1
     96e:	f1 04       	cpc	r15, r1
     970:	a1 f0       	breq	.+40     	; 0x99a <xQueueGenericSendFromISR+0x70>
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	f7 01       	movw	r30, r14
     976:	80 83       	st	Z, r24
     978:	13 c0       	rjmp	.+38     	; 0x9a0 <xQueueGenericSendFromISR+0x76>
     97a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <uxTaskGetNumberOfTasks>
     97e:	18 17       	cp	r17, r24
     980:	70 f4       	brcc	.+28     	; 0x99e <xQueueGenericSendFromISR+0x74>
     982:	ff 24       	eor	r15, r15
     984:	f3 94       	inc	r15
     986:	f1 0e       	add	r15, r17
     988:	fe 8e       	std	Y+30, r15	; 0x1e
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	09 c0       	rjmp	.+18     	; 0x9a0 <xQueueGenericSendFromISR+0x76>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	07 c0       	rjmp	.+14     	; 0x9a0 <xQueueGenericSendFromISR+0x76>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <xQueueGenericSendFromISR+0x76>
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	03 c0       	rjmp	.+6      	; 0x9a0 <xQueueGenericSendFromISR+0x76>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <xQueueGenericSendFromISR+0x76>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	08 95       	ret

000009ae <xQueueReceive>:
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <xQueueReceive+0x12>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <xQueueReceive+0x14>
     9c2:	1f 92       	push	r1
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	8c 01       	movw	r16, r24
     9ca:	6b 01       	movw	r12, r22
     9cc:	5d 83       	std	Y+5, r21	; 0x05
     9ce:	4c 83       	std	Y+4, r20	; 0x04
     9d0:	e1 2c       	mov	r14, r1
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	0f 92       	push	r0
     9d8:	f8 01       	movw	r30, r16
     9da:	f2 8c       	ldd	r15, Z+26	; 0x1a
     9dc:	ff 20       	and	r15, r15
     9de:	a9 f0       	breq	.+42     	; 0xa0a <xQueueReceive+0x5c>
     9e0:	b6 01       	movw	r22, r12
     9e2:	c8 01       	movw	r24, r16
     9e4:	0e 94 01 03 	call	0x602	; 0x602 <prvCopyDataFromQueue>
     9e8:	fa 94       	dec	r15
     9ea:	f8 01       	movw	r30, r16
     9ec:	f2 8e       	std	Z+26, r15	; 0x1a
     9ee:	80 85       	ldd	r24, Z+8	; 0x08
     9f0:	88 23       	and	r24, r24
     9f2:	39 f0       	breq	.+14     	; 0xa02 <xQueueReceive+0x54>
     9f4:	c8 01       	movw	r24, r16
     9f6:	08 96       	adiw	r24, 0x08	; 8
     9f8:	0e 94 90 0a 	call	0x1520	; 0x1520 <xTaskRemoveFromEventList>
     9fc:	81 11       	cpse	r24, r1
     9fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	53 c0       	rjmp	.+166    	; 0xab0 <xQueueReceive+0x102>
     a0a:	8c 81       	ldd	r24, Y+4	; 0x04
     a0c:	9d 81       	ldd	r25, Y+5	; 0x05
     a0e:	89 2b       	or	r24, r25
     a10:	21 f4       	brne	.+8      	; 0xa1a <xQueueReceive+0x6c>
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	4b c0       	rjmp	.+150    	; 0xab0 <xQueueReceive+0x102>
     a1a:	e1 10       	cpse	r14, r1
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <xQueueReceive+0x7c>
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	0e 94 4d 0b 	call	0x169a	; 0x169a <vTaskInternalSetTimeOutState>
     a26:	ee 24       	eor	r14, r14
     a28:	e3 94       	inc	r14
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0e 94 c9 07 	call	0xf92	; 0xf92 <vTaskSuspendAll>
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	0f 92       	push	r0
     a38:	f8 01       	movw	r30, r16
     a3a:	85 8d       	ldd	r24, Z+29	; 0x1d
     a3c:	8f 3f       	cpi	r24, 0xFF	; 255
     a3e:	09 f4       	brne	.+2      	; 0xa42 <xQueueReceive+0x94>
     a40:	15 8e       	std	Z+29, r1	; 0x1d
     a42:	f8 01       	movw	r30, r16
     a44:	86 8d       	ldd	r24, Z+30	; 0x1e
     a46:	8f 3f       	cpi	r24, 0xFF	; 255
     a48:	09 f4       	brne	.+2      	; 0xa4c <xQueueReceive+0x9e>
     a4a:	16 8e       	std	Z+30, r1	; 0x1e
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	be 01       	movw	r22, r28
     a52:	6c 5f       	subi	r22, 0xFC	; 252
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <xTaskCheckForTimeOut>
     a5e:	81 11       	cpse	r24, r1
     a60:	1b c0       	rjmp	.+54     	; 0xa98 <xQueueReceive+0xea>
     a62:	c8 01       	movw	r24, r16
     a64:	0e 94 9d 02 	call	0x53a	; 0x53a <prvIsQueueEmpty>
     a68:	88 23       	and	r24, r24
     a6a:	81 f0       	breq	.+32     	; 0xa8c <xQueueReceive+0xde>
     a6c:	6c 81       	ldd	r22, Y+4	; 0x04
     a6e:	7d 81       	ldd	r23, Y+5	; 0x05
     a70:	c8 01       	movw	r24, r16
     a72:	41 96       	adiw	r24, 0x11	; 17
     a74:	0e 94 35 0a 	call	0x146a	; 0x146a <vTaskPlaceOnEventList>
     a78:	c8 01       	movw	r24, r16
     a7a:	0e 94 1b 03 	call	0x636	; 0x636 <prvUnlockQueue>
     a7e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
     a82:	81 11       	cpse	r24, r1
     a84:	a6 cf       	rjmp	.-180    	; 0x9d2 <xQueueReceive+0x24>
     a86:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     a8a:	a3 cf       	rjmp	.-186    	; 0x9d2 <xQueueReceive+0x24>
     a8c:	c8 01       	movw	r24, r16
     a8e:	0e 94 1b 03 	call	0x636	; 0x636 <prvUnlockQueue>
     a92:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
     a96:	9d cf       	rjmp	.-198    	; 0x9d2 <xQueueReceive+0x24>
     a98:	c8 01       	movw	r24, r16
     a9a:	0e 94 1b 03 	call	0x636	; 0x636 <prvUnlockQueue>
     a9e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
     aa2:	c8 01       	movw	r24, r16
     aa4:	0e 94 9d 02 	call	0x53a	; 0x53a <prvIsQueueEmpty>
     aa8:	88 23       	and	r24, r24
     aaa:	09 f4       	brne	.+2      	; 0xaae <xQueueReceive+0x100>
     aac:	92 cf       	rjmp	.-220    	; 0x9d2 <xQueueReceive+0x24>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	df 90       	pop	r13
     ac8:	cf 90       	pop	r12
     aca:	08 95       	ret

00000acc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	0f 92       	push	r0
     ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ada:	8f 3f       	cpi	r24, 0xFF	; 255
     adc:	09 f4       	brne	.+2      	; 0xae0 <vQueueWaitForMessageRestricted+0x14>
     ade:	1d 8e       	std	Y+29, r1	; 0x1d
     ae0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ae2:	8f 3f       	cpi	r24, 0xFF	; 255
     ae4:	09 f4       	brne	.+2      	; 0xae8 <vQueueWaitForMessageRestricted+0x1c>
     ae6:	1e 8e       	std	Y+30, r1	; 0x1e
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     aec:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aee:	81 11       	cpse	r24, r1
     af0:	04 c0       	rjmp	.+8      	; 0xafa <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     af2:	ce 01       	movw	r24, r28
     af4:	41 96       	adiw	r24, 0x11	; 17
     af6:	0e 94 47 0a 	call	0x148e	; 0x148e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     afa:	ce 01       	movw	r24, r28
     afc:	0e 94 1b 03 	call	0x636	; 0x636 <prvUnlockQueue>
    }
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <prvResetNextTaskUnblockTime>:
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;

        return xReturn;
    }
     b06:	e0 91 d5 06 	lds	r30, 0x06D5	; 0x8006d5 <pxDelayedTaskList>
     b0a:	f0 91 d6 06 	lds	r31, 0x06D6	; 0x8006d6 <pxDelayedTaskList+0x1>
     b0e:	80 81       	ld	r24, Z
     b10:	81 11       	cpse	r24, r1
     b12:	07 c0       	rjmp	.+14     	; 0xb22 <prvResetNextTaskUnblockTime+0x1c>
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	9f ef       	ldi	r25, 0xFF	; 255
     b18:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <xNextTaskUnblockTime+0x1>
     b1c:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <xNextTaskUnblockTime>
     b20:	08 95       	ret
     b22:	e0 91 d5 06 	lds	r30, 0x06D5	; 0x8006d5 <pxDelayedTaskList>
     b26:	f0 91 d6 06 	lds	r31, 0x06D6	; 0x8006d6 <pxDelayedTaskList+0x1>
     b2a:	05 80       	ldd	r0, Z+5	; 0x05
     b2c:	f6 81       	ldd	r31, Z+6	; 0x06
     b2e:	e0 2d       	mov	r30, r0
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <xNextTaskUnblockTime+0x1>
     b38:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <xNextTaskUnblockTime>
     b3c:	08 95       	ret

00000b3e <prvInitialiseNewTask>:
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	4c 01       	movw	r8, r24
     b5e:	f5 01       	movw	r30, r10
     b60:	87 89       	ldd	r24, Z+23	; 0x17
     b62:	90 8d       	ldd	r25, Z+24	; 0x18
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	31 09       	sbc	r19, r1
     b68:	3c 01       	movw	r6, r24
     b6a:	62 0e       	add	r6, r18
     b6c:	73 1e       	adc	r7, r19
     b6e:	61 15       	cp	r22, r1
     b70:	71 05       	cpc	r23, r1
     b72:	89 f4       	brne	.+34     	; 0xb96 <prvInitialiseNewTask+0x58>
     b74:	15 c0       	rjmp	.+42     	; 0xba0 <prvInitialiseNewTask+0x62>
     b76:	82 2f       	mov	r24, r18
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	fb 01       	movw	r30, r22
     b7c:	e8 0f       	add	r30, r24
     b7e:	f9 1f       	adc	r31, r25
     b80:	30 81       	ld	r19, Z
     b82:	d5 01       	movw	r26, r10
     b84:	a8 0f       	add	r26, r24
     b86:	b9 1f       	adc	r27, r25
     b88:	59 96       	adiw	r26, 0x19	; 25
     b8a:	3c 93       	st	X, r19
     b8c:	80 81       	ld	r24, Z
     b8e:	88 23       	and	r24, r24
     b90:	29 f0       	breq	.+10     	; 0xb9c <prvInitialiseNewTask+0x5e>
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <prvInitialiseNewTask+0x5a>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	28 30       	cpi	r18, 0x08	; 8
     b9a:	68 f3       	brcs	.-38     	; 0xb76 <prvInitialiseNewTask+0x38>
     b9c:	f5 01       	movw	r30, r10
     b9e:	10 a2       	std	Z+32, r1	; 0x20
     ba0:	f3 e0       	ldi	r31, 0x03	; 3
     ba2:	fe 15       	cp	r31, r14
     ba4:	20 f4       	brcc	.+8      	; 0xbae <prvInitialiseNewTask+0x70>
     ba6:	0f 2e       	mov	r0, r31
     ba8:	f3 e0       	ldi	r31, 0x03	; 3
     baa:	ef 2e       	mov	r14, r31
     bac:	f0 2d       	mov	r31, r0
     bae:	f5 01       	movw	r30, r10
     bb0:	e6 8a       	std	Z+22, r14	; 0x16
     bb2:	c5 01       	movw	r24, r10
     bb4:	02 96       	adiw	r24, 0x02	; 2
     bb6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>
     bba:	c5 01       	movw	r24, r10
     bbc:	0c 96       	adiw	r24, 0x0c	; 12
     bbe:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>
     bc2:	f5 01       	movw	r30, r10
     bc4:	b1 86       	std	Z+9, r11	; 0x09
     bc6:	a0 86       	std	Z+8, r10	; 0x08
     bc8:	84 e0       	ldi	r24, 0x04	; 4
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	8e 19       	sub	r24, r14
     bce:	91 09       	sbc	r25, r1
     bd0:	95 87       	std	Z+13, r25	; 0x0d
     bd2:	84 87       	std	Z+12, r24	; 0x0c
     bd4:	b3 8a       	std	Z+19, r11	; 0x13
     bd6:	a2 8a       	std	Z+18, r10	; 0x12
     bd8:	a8 01       	movw	r20, r16
     bda:	b4 01       	movw	r22, r8
     bdc:	c3 01       	movw	r24, r6
     bde:	0e 94 4a 01 	call	0x294	; 0x294 <pxPortInitialiseStack>
     be2:	f5 01       	movw	r30, r10
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
     be8:	c1 14       	cp	r12, r1
     bea:	d1 04       	cpc	r13, r1
     bec:	19 f0       	breq	.+6      	; 0xbf4 <prvInitialiseNewTask+0xb6>
     bee:	f6 01       	movw	r30, r12
     bf0:	b1 82       	std	Z+1, r11	; 0x01
     bf2:	a0 82       	st	Z, r10
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	9f 90       	pop	r9
     c08:	8f 90       	pop	r8
     c0a:	7f 90       	pop	r7
     c0c:	6f 90       	pop	r6
     c0e:	08 95       	ret

00000c10 <prvIdleTask>:
     c10:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <pxReadyTasksLists>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	e0 f3       	brcs	.-8      	; 0xc10 <prvIdleTask>
     c18:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     c1c:	f9 cf       	rjmp	.-14     	; 0xc10 <prvIdleTask>

00000c1e <prvInitialiseTaskLists>:
     c1e:	cf 93       	push	r28
     c20:	c0 e0       	ldi	r28, 0x00	; 0
     c22:	10 c0       	rjmp	.+32     	; 0xc44 <prvInitialiseTaskLists+0x26>
     c24:	8c 2f       	mov	r24, r28
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9c 01       	movw	r18, r24
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	82 0f       	add	r24, r18
     c38:	93 1f       	adc	r25, r19
     c3a:	87 51       	subi	r24, 0x17	; 23
     c3c:	99 4f       	sbci	r25, 0xF9	; 249
     c3e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     c42:	cf 5f       	subi	r28, 0xFF	; 255
     c44:	c4 30       	cpi	r28, 0x04	; 4
     c46:	70 f3       	brcs	.-36     	; 0xc24 <prvInitialiseTaskLists+0x6>
     c48:	80 ee       	ldi	r24, 0xE0	; 224
     c4a:	96 e0       	ldi	r25, 0x06	; 6
     c4c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     c50:	87 ed       	ldi	r24, 0xD7	; 215
     c52:	96 e0       	ldi	r25, 0x06	; 6
     c54:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     c58:	8a ec       	ldi	r24, 0xCA	; 202
     c5a:	96 e0       	ldi	r25, 0x06	; 6
     c5c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     c60:	81 ec       	ldi	r24, 0xC1	; 193
     c62:	96 e0       	ldi	r25, 0x06	; 6
     c64:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     c68:	80 ee       	ldi	r24, 0xE0	; 224
     c6a:	96 e0       	ldi	r25, 0x06	; 6
     c6c:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <pxDelayedTaskList+0x1>
     c70:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <pxDelayedTaskList>
     c74:	87 ed       	ldi	r24, 0xD7	; 215
     c76:	96 e0       	ldi	r25, 0x06	; 6
     c78:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <pxOverflowDelayedTaskList+0x1>
     c7c:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <pxOverflowDelayedTaskList>
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <prvAddNewTaskToReadyList>:
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	ec 01       	movw	r28, r24
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	0f 92       	push	r0
     c90:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <uxCurrentNumberOfTasks>
     c94:	8f 5f       	subi	r24, 0xFF	; 255
     c96:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <uxCurrentNumberOfTasks>
     c9a:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <pxCurrentTCB>
     c9e:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     ca2:	89 2b       	or	r24, r25
     ca4:	59 f4       	brne	.+22     	; 0xcbc <prvAddNewTaskToReadyList+0x38>
     ca6:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <pxCurrentTCB+0x1>
     caa:	c0 93 0d 07 	sts	0x070D, r28	; 0x80070d <pxCurrentTCB>
     cae:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <uxCurrentNumberOfTasks>
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	99 f4       	brne	.+38     	; 0xcdc <prvAddNewTaskToReadyList+0x58>
     cb6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <prvInitialiseTaskLists>
     cba:	10 c0       	rjmp	.+32     	; 0xcdc <prvAddNewTaskToReadyList+0x58>
     cbc:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <xSchedulerRunning>
     cc0:	81 11       	cpse	r24, r1
     cc2:	0c c0       	rjmp	.+24     	; 0xcdc <prvAddNewTaskToReadyList+0x58>
     cc4:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <pxCurrentTCB>
     cc8:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     ccc:	96 89       	ldd	r25, Z+22	; 0x16
     cce:	8e 89       	ldd	r24, Y+22	; 0x16
     cd0:	89 17       	cp	r24, r25
     cd2:	20 f0       	brcs	.+8      	; 0xcdc <prvAddNewTaskToReadyList+0x58>
     cd4:	d0 93 0e 07 	sts	0x070E, r29	; 0x80070e <pxCurrentTCB+0x1>
     cd8:	c0 93 0d 07 	sts	0x070D, r28	; 0x80070d <pxCurrentTCB>
     cdc:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <uxTaskNumber>
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <uxTaskNumber>
     ce6:	8e 89       	ldd	r24, Y+22	; 0x16
     ce8:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <uxTopReadyPriority>
     cec:	98 17       	cp	r25, r24
     cee:	10 f4       	brcc	.+4      	; 0xcf4 <prvAddNewTaskToReadyList+0x70>
     cf0:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <uxTopReadyPriority>
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	8e 0f       	add	r24, r30
     d06:	9f 1f       	adc	r25, r31
     d08:	fc 01       	movw	r30, r24
     d0a:	e7 51       	subi	r30, 0x17	; 23
     d0c:	f9 4f       	sbci	r31, 0xF9	; 249
     d0e:	01 80       	ldd	r0, Z+1	; 0x01
     d10:	f2 81       	ldd	r31, Z+2	; 0x02
     d12:	e0 2d       	mov	r30, r0
     d14:	fd 83       	std	Y+5, r31	; 0x05
     d16:	ec 83       	std	Y+4, r30	; 0x04
     d18:	84 81       	ldd	r24, Z+4	; 0x04
     d1a:	95 81       	ldd	r25, Z+5	; 0x05
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	8e 83       	std	Y+6, r24	; 0x06
     d20:	a4 81       	ldd	r26, Z+4	; 0x04
     d22:	b5 81       	ldd	r27, Z+5	; 0x05
     d24:	ce 01       	movw	r24, r28
     d26:	02 96       	adiw	r24, 0x02	; 2
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	9c 93       	st	X, r25
     d2c:	8e 93       	st	-X, r24
     d2e:	12 97       	sbiw	r26, 0x02	; 2
     d30:	95 83       	std	Z+5, r25	; 0x05
     d32:	84 83       	std	Z+4, r24	; 0x04
     d34:	ee 89       	ldd	r30, Y+22	; 0x16
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	cf 01       	movw	r24, r30
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	e8 0f       	add	r30, r24
     d48:	f9 1f       	adc	r31, r25
     d4a:	e7 51       	subi	r30, 0x17	; 23
     d4c:	f9 4f       	sbci	r31, 0xF9	; 249
     d4e:	fb 87       	std	Y+11, r31	; 0x0b
     d50:	ea 87       	std	Y+10, r30	; 0x0a
     d52:	80 81       	ld	r24, Z
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	80 83       	st	Z, r24
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <xSchedulerRunning>
     d60:	88 23       	and	r24, r24
     d62:	51 f0       	breq	.+20     	; 0xd78 <prvAddNewTaskToReadyList+0xf4>
     d64:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <pxCurrentTCB>
     d68:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     d6c:	96 89       	ldd	r25, Z+22	; 0x16
     d6e:	8e 89       	ldd	r24, Y+22	; 0x16
     d70:	98 17       	cp	r25, r24
     d72:	10 f4       	brcc	.+4      	; 0xd78 <prvAddNewTaskToReadyList+0xf4>
     d74:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <prvAddCurrentTaskToDelayedList>:
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ec 01       	movw	r28, r24
     d8a:	f6 2e       	mov	r15, r22
     d8c:	00 91 be 06 	lds	r16, 0x06BE	; 0x8006be <xTickCount>
     d90:	10 91 bf 06 	lds	r17, 0x06BF	; 0x8006bf <xTickCount+0x1>
     d94:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <pxCurrentTCB>
     d98:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     d9c:	02 96       	adiw	r24, 0x02	; 2
     d9e:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
     da2:	cf 3f       	cpi	r28, 0xFF	; 255
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	d8 07       	cpc	r29, r24
     da8:	b1 f5       	brne	.+108    	; 0xe16 <prvAddCurrentTaskToDelayedList+0x98>
     daa:	ff 20       	and	r15, r15
     dac:	a1 f1       	breq	.+104    	; 0xe16 <prvAddCurrentTaskToDelayedList+0x98>
     dae:	e1 ec       	ldi	r30, 0xC1	; 193
     db0:	f6 e0       	ldi	r31, 0x06	; 6
     db2:	a1 81       	ldd	r26, Z+1	; 0x01
     db4:	b2 81       	ldd	r27, Z+2	; 0x02
     db6:	c0 91 0d 07 	lds	r28, 0x070D	; 0x80070d <pxCurrentTCB>
     dba:	d0 91 0e 07 	lds	r29, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     dbe:	bd 83       	std	Y+5, r27	; 0x05
     dc0:	ac 83       	std	Y+4, r26	; 0x04
     dc2:	c0 91 0d 07 	lds	r28, 0x070D	; 0x80070d <pxCurrentTCB>
     dc6:	d0 91 0e 07 	lds	r29, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	15 97       	sbiw	r26, 0x05	; 5
     dd2:	9f 83       	std	Y+7, r25	; 0x07
     dd4:	8e 83       	std	Y+6, r24	; 0x06
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	cd 91       	ld	r28, X+
     dda:	dc 91       	ld	r29, X
     ddc:	15 97       	sbiw	r26, 0x05	; 5
     dde:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <pxCurrentTCB>
     de2:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     de6:	02 96       	adiw	r24, 0x02	; 2
     de8:	9b 83       	std	Y+3, r25	; 0x03
     dea:	8a 83       	std	Y+2, r24	; 0x02
     dec:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <pxCurrentTCB>
     df0:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     df4:	02 96       	adiw	r24, 0x02	; 2
     df6:	15 96       	adiw	r26, 0x05	; 5
     df8:	9c 93       	st	X, r25
     dfa:	8e 93       	st	-X, r24
     dfc:	14 97       	sbiw	r26, 0x04	; 4
     dfe:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
     e02:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     e06:	1b 96       	adiw	r26, 0x0b	; 11
     e08:	fc 93       	st	X, r31
     e0a:	ee 93       	st	-X, r30
     e0c:	1a 97       	sbiw	r26, 0x0a	; 10
     e0e:	80 81       	ld	r24, Z
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	80 83       	st	Z, r24
     e14:	2f c0       	rjmp	.+94     	; 0xe74 <prvAddCurrentTaskToDelayedList+0xf6>
     e16:	c0 0f       	add	r28, r16
     e18:	d1 1f       	adc	r29, r17
     e1a:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <pxCurrentTCB>
     e1e:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     e22:	d3 83       	std	Z+3, r29	; 0x03
     e24:	c2 83       	std	Z+2, r28	; 0x02
     e26:	c0 17       	cp	r28, r16
     e28:	d1 07       	cpc	r29, r17
     e2a:	68 f4       	brcc	.+26     	; 0xe46 <prvAddCurrentTaskToDelayedList+0xc8>
     e2c:	60 91 0d 07 	lds	r22, 0x070D	; 0x80070d <pxCurrentTCB>
     e30:	70 91 0e 07 	lds	r23, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     e34:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <pxOverflowDelayedTaskList>
     e38:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <pxOverflowDelayedTaskList+0x1>
     e3c:	6e 5f       	subi	r22, 0xFE	; 254
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
     e44:	17 c0       	rjmp	.+46     	; 0xe74 <prvAddCurrentTaskToDelayedList+0xf6>
     e46:	60 91 0d 07 	lds	r22, 0x070D	; 0x80070d <pxCurrentTCB>
     e4a:	70 91 0e 07 	lds	r23, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
     e4e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <pxDelayedTaskList>
     e52:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <pxDelayedTaskList+0x1>
     e56:	6e 5f       	subi	r22, 0xFE	; 254
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
     e5e:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <xNextTaskUnblockTime>
     e62:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <xNextTaskUnblockTime+0x1>
     e66:	c8 17       	cp	r28, r24
     e68:	d9 07       	cpc	r29, r25
     e6a:	20 f4       	brcc	.+8      	; 0xe74 <prvAddCurrentTaskToDelayedList+0xf6>
     e6c:	d0 93 b6 06 	sts	0x06B6, r29	; 0x8006b6 <xNextTaskUnblockTime+0x1>
     e70:	c0 93 b5 06 	sts	0x06B5, r28	; 0x8006b5 <xNextTaskUnblockTime>
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	08 95       	ret

00000e80 <xTaskCreate>:
     e80:	2f 92       	push	r2
     e82:	3f 92       	push	r3
     e84:	4f 92       	push	r4
     e86:	5f 92       	push	r5
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	3c 01       	movw	r6, r24
     ea6:	1b 01       	movw	r2, r22
     ea8:	5a 01       	movw	r10, r20
     eaa:	29 01       	movw	r4, r18
     eac:	ca 01       	movw	r24, r20
     eae:	0e 94 9c 00 	call	0x138	; 0x138 <pvPortMalloc>
     eb2:	6c 01       	movw	r12, r24
     eb4:	89 2b       	or	r24, r25
     eb6:	99 f0       	breq	.+38     	; 0xede <xTaskCreate+0x5e>
     eb8:	86 e2       	ldi	r24, 0x26	; 38
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 9c 00 	call	0x138	; 0x138 <pvPortMalloc>
     ec0:	ec 01       	movw	r28, r24
     ec2:	89 2b       	or	r24, r25
     ec4:	41 f0       	breq	.+16     	; 0xed6 <xTaskCreate+0x56>
     ec6:	86 e2       	ldi	r24, 0x26	; 38
     ec8:	fe 01       	movw	r30, r28
     eca:	11 92       	st	Z+, r1
     ecc:	8a 95       	dec	r24
     ece:	e9 f7       	brne	.-6      	; 0xeca <xTaskCreate+0x4a>
     ed0:	d8 8e       	std	Y+24, r13	; 0x18
     ed2:	cf 8a       	std	Y+23, r12	; 0x17
     ed4:	06 c0       	rjmp	.+12     	; 0xee2 <xTaskCreate+0x62>
     ed6:	c6 01       	movw	r24, r12
     ed8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vPortFree>
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <xTaskCreate+0x62>
     ede:	c0 e0       	ldi	r28, 0x00	; 0
     ee0:	d0 e0       	ldi	r29, 0x00	; 0
     ee2:	20 97       	sbiw	r28, 0x00	; 0
     ee4:	91 f0       	breq	.+36     	; 0xf0a <xTaskCreate+0x8a>
     ee6:	95 01       	movw	r18, r10
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	81 2c       	mov	r8, r1
     eee:	91 2c       	mov	r9, r1
     ef0:	5e 01       	movw	r10, r28
     ef2:	67 01       	movw	r12, r14
     ef4:	e0 2e       	mov	r14, r16
     ef6:	82 01       	movw	r16, r4
     ef8:	b1 01       	movw	r22, r2
     efa:	c3 01       	movw	r24, r6
     efc:	0e 94 9f 05 	call	0xb3e	; 0xb3e <prvInitialiseNewTask>
     f00:	ce 01       	movw	r24, r28
     f02:	0e 94 42 06 	call	0xc84	; 0xc84 <prvAddNewTaskToReadyList>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <xTaskCreate+0x8c>
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	7f 90       	pop	r7
     f26:	6f 90       	pop	r6
     f28:	5f 90       	pop	r5
     f2a:	4f 90       	pop	r4
     f2c:	3f 90       	pop	r3
     f2e:	2f 90       	pop	r2
     f30:	08 95       	ret

00000f32 <vTaskStartScheduler>:
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	0f 2e       	mov	r0, r31
     f3a:	f3 eb       	ldi	r31, 0xB3	; 179
     f3c:	ef 2e       	mov	r14, r31
     f3e:	f6 e0       	ldi	r31, 0x06	; 6
     f40:	ff 2e       	mov	r15, r31
     f42:	f0 2d       	mov	r31, r0
     f44:	00 e0       	ldi	r16, 0x00	; 0
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	45 e5       	ldi	r20, 0x55	; 85
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	61 e6       	ldi	r22, 0x61	; 97
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	96 e0       	ldi	r25, 0x06	; 6
     f56:	0e 94 40 07 	call	0xe80	; 0xe80 <xTaskCreate>
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	11 f4       	brne	.+4      	; 0xf62 <vTaskStartScheduler+0x30>
     f5e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <xTimerCreateTimerTask>
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	81 f4       	brne	.+32     	; 0xf86 <vTaskStartScheduler+0x54>
     f66:	f8 94       	cli
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <xNextTaskUnblockTime+0x1>
     f70:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <xNextTaskUnblockTime>
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <xSchedulerRunning>
     f7a:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <xTickCount+0x1>
     f7e:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <xTickCount>
     f82:	0e 94 b6 01 	call	0x36c	; 0x36c <xPortStartScheduler>
     f86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <vTaskSuspendAll>:
     f92:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <uxSchedulerSuspended>
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <uxSchedulerSuspended>
     f9c:	08 95       	ret

00000f9e <xTaskGetTickCount>:
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	0f 92       	push	r0
     fa4:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <xTickCount>
     fa8:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <xTickCount+0x1>
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	08 95       	ret

00000fb2 <uxTaskGetNumberOfTasks>:
     fb2:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <uxCurrentNumberOfTasks>
     fb6:	08 95       	ret

00000fb8 <xTaskIncrementTick>:
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <uxSchedulerSuspended>
     fc4:	81 11       	cpse	r24, r1
     fc6:	01 c1       	rjmp	.+514    	; 0x11ca <xTaskIncrementTick+0x212>
     fc8:	c0 91 be 06 	lds	r28, 0x06BE	; 0x8006be <xTickCount>
     fcc:	d0 91 bf 06 	lds	r29, 0x06BF	; 0x8006bf <xTickCount+0x1>
     fd0:	8e 01       	movw	r16, r28
     fd2:	0f 5f       	subi	r16, 0xFF	; 255
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	10 93 bf 06 	sts	0x06BF, r17	; 0x8006bf <xTickCount+0x1>
     fda:	00 93 be 06 	sts	0x06BE, r16	; 0x8006be <xTickCount>
     fde:	01 15       	cp	r16, r1
     fe0:	11 05       	cpc	r17, r1
     fe2:	b9 f4       	brne	.+46     	; 0x1012 <xTaskIncrementTick+0x5a>
     fe4:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <pxDelayedTaskList>
     fe8:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <pxDelayedTaskList+0x1>
     fec:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <pxOverflowDelayedTaskList>
     ff0:	30 91 d4 06 	lds	r19, 0x06D4	; 0x8006d4 <pxOverflowDelayedTaskList+0x1>
     ff4:	30 93 d6 06 	sts	0x06D6, r19	; 0x8006d6 <pxDelayedTaskList+0x1>
     ff8:	20 93 d5 06 	sts	0x06D5, r18	; 0x8006d5 <pxDelayedTaskList>
     ffc:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <pxOverflowDelayedTaskList+0x1>
    1000:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <pxOverflowDelayedTaskList>
    1004:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <xNumOfOverflows>
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <xNumOfOverflows>
    100e:	0e 94 83 05 	call	0xb06	; 0xb06 <prvResetNextTaskUnblockTime>
    1012:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <xNextTaskUnblockTime>
    1016:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <xNextTaskUnblockTime+0x1>
    101a:	08 17       	cp	r16, r24
    101c:	19 07       	cpc	r17, r25
    101e:	20 f4       	brcc	.+8      	; 0x1028 <xTaskIncrementTick+0x70>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	b8 c0       	rjmp	.+368    	; 0x1194 <xTaskIncrementTick+0x1dc>
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	01 c0       	rjmp	.+2      	; 0x102a <xTaskIncrementTick+0x72>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	e0 91 d5 06 	lds	r30, 0x06D5	; 0x8006d5 <pxDelayedTaskList>
    102e:	f0 91 d6 06 	lds	r31, 0x06D6	; 0x8006d6 <pxDelayedTaskList+0x1>
    1032:	90 81       	ld	r25, Z
    1034:	91 11       	cpse	r25, r1
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <xTaskIncrementTick+0x8e>
    1038:	2f ef       	ldi	r18, 0xFF	; 255
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	30 93 b6 06 	sts	0x06B6, r19	; 0x8006b6 <xNextTaskUnblockTime+0x1>
    1040:	20 93 b5 06 	sts	0x06B5, r18	; 0x8006b5 <xNextTaskUnblockTime>
    1044:	a7 c0       	rjmp	.+334    	; 0x1194 <xTaskIncrementTick+0x1dc>
    1046:	e0 91 d5 06 	lds	r30, 0x06D5	; 0x8006d5 <pxDelayedTaskList>
    104a:	f0 91 d6 06 	lds	r31, 0x06D6	; 0x8006d6 <pxDelayedTaskList+0x1>
    104e:	05 80       	ldd	r0, Z+5	; 0x05
    1050:	f6 81       	ldd	r31, Z+6	; 0x06
    1052:	e0 2d       	mov	r30, r0
    1054:	06 80       	ldd	r0, Z+6	; 0x06
    1056:	f7 81       	ldd	r31, Z+7	; 0x07
    1058:	e0 2d       	mov	r30, r0
    105a:	22 81       	ldd	r18, Z+2	; 0x02
    105c:	33 81       	ldd	r19, Z+3	; 0x03
    105e:	02 17       	cp	r16, r18
    1060:	13 07       	cpc	r17, r19
    1062:	28 f4       	brcc	.+10     	; 0x106e <xTaskIncrementTick+0xb6>
    1064:	30 93 b6 06 	sts	0x06B6, r19	; 0x8006b6 <xNextTaskUnblockTime+0x1>
    1068:	20 93 b5 06 	sts	0x06B5, r18	; 0x8006b5 <xNextTaskUnblockTime>
    106c:	93 c0       	rjmp	.+294    	; 0x1194 <xTaskIncrementTick+0x1dc>
    106e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1070:	b3 85       	ldd	r27, Z+11	; 0x0b
    1072:	24 81       	ldd	r18, Z+4	; 0x04
    1074:	35 81       	ldd	r19, Z+5	; 0x05
    1076:	46 81       	ldd	r20, Z+6	; 0x06
    1078:	57 81       	ldd	r21, Z+7	; 0x07
    107a:	e9 01       	movw	r28, r18
    107c:	5d 83       	std	Y+5, r21	; 0x05
    107e:	4c 83       	std	Y+4, r20	; 0x04
    1080:	26 81       	ldd	r18, Z+6	; 0x06
    1082:	37 81       	ldd	r19, Z+7	; 0x07
    1084:	44 81       	ldd	r20, Z+4	; 0x04
    1086:	55 81       	ldd	r21, Z+5	; 0x05
    1088:	e9 01       	movw	r28, r18
    108a:	5b 83       	std	Y+3, r21	; 0x03
    108c:	4a 83       	std	Y+2, r20	; 0x02
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	2d 91       	ld	r18, X+
    1092:	3c 91       	ld	r19, X
    1094:	12 97       	sbiw	r26, 0x02	; 2
    1096:	af 01       	movw	r20, r30
    1098:	4e 5f       	subi	r20, 0xFE	; 254
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	24 17       	cp	r18, r20
    109e:	35 07       	cpc	r19, r21
    10a0:	31 f4       	brne	.+12     	; 0x10ae <xTaskIncrementTick+0xf6>
    10a2:	26 81       	ldd	r18, Z+6	; 0x06
    10a4:	37 81       	ldd	r19, Z+7	; 0x07
    10a6:	12 96       	adiw	r26, 0x02	; 2
    10a8:	3c 93       	st	X, r19
    10aa:	2e 93       	st	-X, r18
    10ac:	11 97       	sbiw	r26, 0x01	; 1
    10ae:	13 86       	std	Z+11, r1	; 0x0b
    10b0:	12 86       	std	Z+10, r1	; 0x0a
    10b2:	9c 91       	ld	r25, X
    10b4:	91 50       	subi	r25, 0x01	; 1
    10b6:	9c 93       	st	X, r25
    10b8:	a4 89       	ldd	r26, Z+20	; 0x14
    10ba:	b5 89       	ldd	r27, Z+21	; 0x15
    10bc:	10 97       	sbiw	r26, 0x00	; 0
    10be:	19 f1       	breq	.+70     	; 0x1106 <xTaskIncrementTick+0x14e>
    10c0:	26 85       	ldd	r18, Z+14	; 0x0e
    10c2:	37 85       	ldd	r19, Z+15	; 0x0f
    10c4:	60 89       	ldd	r22, Z+16	; 0x10
    10c6:	71 89       	ldd	r23, Z+17	; 0x11
    10c8:	e9 01       	movw	r28, r18
    10ca:	7d 83       	std	Y+5, r23	; 0x05
    10cc:	6c 83       	std	Y+4, r22	; 0x04
    10ce:	20 89       	ldd	r18, Z+16	; 0x10
    10d0:	31 89       	ldd	r19, Z+17	; 0x11
    10d2:	66 85       	ldd	r22, Z+14	; 0x0e
    10d4:	77 85       	ldd	r23, Z+15	; 0x0f
    10d6:	e9 01       	movw	r28, r18
    10d8:	7b 83       	std	Y+3, r23	; 0x03
    10da:	6a 83       	std	Y+2, r22	; 0x02
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	6d 91       	ld	r22, X+
    10e0:	7c 91       	ld	r23, X
    10e2:	12 97       	sbiw	r26, 0x02	; 2
    10e4:	9f 01       	movw	r18, r30
    10e6:	24 5f       	subi	r18, 0xF4	; 244
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	62 17       	cp	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	31 f4       	brne	.+12     	; 0x10fc <xTaskIncrementTick+0x144>
    10f0:	20 89       	ldd	r18, Z+16	; 0x10
    10f2:	31 89       	ldd	r19, Z+17	; 0x11
    10f4:	12 96       	adiw	r26, 0x02	; 2
    10f6:	3c 93       	st	X, r19
    10f8:	2e 93       	st	-X, r18
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	15 8a       	std	Z+21, r1	; 0x15
    10fe:	14 8a       	std	Z+20, r1	; 0x14
    1100:	9c 91       	ld	r25, X
    1102:	91 50       	subi	r25, 0x01	; 1
    1104:	9c 93       	st	X, r25
    1106:	26 89       	ldd	r18, Z+22	; 0x16
    1108:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <uxTopReadyPriority>
    110c:	92 17       	cp	r25, r18
    110e:	10 f4       	brcc	.+4      	; 0x1114 <xTaskIncrementTick+0x15c>
    1110:	20 93 bd 06 	sts	0x06BD, r18	; 0x8006bd <uxTopReadyPriority>
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	d9 01       	movw	r26, r18
    1118:	aa 0f       	add	r26, r26
    111a:	bb 1f       	adc	r27, r27
    111c:	aa 0f       	add	r26, r26
    111e:	bb 1f       	adc	r27, r27
    1120:	aa 0f       	add	r26, r26
    1122:	bb 1f       	adc	r27, r27
    1124:	2a 0f       	add	r18, r26
    1126:	3b 1f       	adc	r19, r27
    1128:	d9 01       	movw	r26, r18
    112a:	a7 51       	subi	r26, 0x17	; 23
    112c:	b9 4f       	sbci	r27, 0xF9	; 249
    112e:	11 96       	adiw	r26, 0x01	; 1
    1130:	0d 90       	ld	r0, X+
    1132:	bc 91       	ld	r27, X
    1134:	a0 2d       	mov	r26, r0
    1136:	b5 83       	std	Z+5, r27	; 0x05
    1138:	a4 83       	std	Z+4, r26	; 0x04
    113a:	14 96       	adiw	r26, 0x04	; 4
    113c:	2d 91       	ld	r18, X+
    113e:	3c 91       	ld	r19, X
    1140:	15 97       	sbiw	r26, 0x05	; 5
    1142:	37 83       	std	Z+7, r19	; 0x07
    1144:	26 83       	std	Z+6, r18	; 0x06
    1146:	14 96       	adiw	r26, 0x04	; 4
    1148:	2d 91       	ld	r18, X+
    114a:	3c 91       	ld	r19, X
    114c:	15 97       	sbiw	r26, 0x05	; 5
    114e:	e9 01       	movw	r28, r18
    1150:	5b 83       	std	Y+3, r21	; 0x03
    1152:	4a 83       	std	Y+2, r20	; 0x02
    1154:	15 96       	adiw	r26, 0x05	; 5
    1156:	5c 93       	st	X, r21
    1158:	4e 93       	st	-X, r20
    115a:	14 97       	sbiw	r26, 0x04	; 4
    115c:	a6 89       	ldd	r26, Z+22	; 0x16
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	9d 01       	movw	r18, r26
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	a2 0f       	add	r26, r18
    1170:	b3 1f       	adc	r27, r19
    1172:	a7 51       	subi	r26, 0x17	; 23
    1174:	b9 4f       	sbci	r27, 0xF9	; 249
    1176:	b3 87       	std	Z+11, r27	; 0x0b
    1178:	a2 87       	std	Z+10, r26	; 0x0a
    117a:	9c 91       	ld	r25, X
    117c:	9f 5f       	subi	r25, 0xFF	; 255
    117e:	9c 93       	st	X, r25
    1180:	26 89       	ldd	r18, Z+22	; 0x16
    1182:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <pxCurrentTCB>
    1186:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    118a:	96 89       	ldd	r25, Z+22	; 0x16
    118c:	92 17       	cp	r25, r18
    118e:	08 f4       	brcc	.+2      	; 0x1192 <xTaskIncrementTick+0x1da>
    1190:	49 cf       	rjmp	.-366    	; 0x1024 <xTaskIncrementTick+0x6c>
    1192:	4b cf       	rjmp	.-362    	; 0x102a <xTaskIncrementTick+0x72>
    1194:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <pxCurrentTCB>
    1198:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    119c:	26 89       	ldd	r18, Z+22	; 0x16
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	2e 0f       	add	r18, r30
    11b0:	3f 1f       	adc	r19, r31
    11b2:	f9 01       	movw	r30, r18
    11b4:	e7 51       	subi	r30, 0x17	; 23
    11b6:	f9 4f       	sbci	r31, 0xF9	; 249
    11b8:	90 81       	ld	r25, Z
    11ba:	92 30       	cpi	r25, 0x02	; 2
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <xTaskIncrementTick+0x208>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <xYieldPending>
    11c4:	91 11       	cpse	r25, r1
    11c6:	0c c0       	rjmp	.+24     	; 0x11e0 <xTaskIncrementTick+0x228>
    11c8:	0c c0       	rjmp	.+24     	; 0x11e2 <xTaskIncrementTick+0x22a>
    11ca:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <xPendedTicks>
    11ce:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <xPendedTicks+0x1>
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <xPendedTicks+0x1>
    11d8:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <xPendedTicks>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <xTaskIncrementTick+0x22a>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <xTaskResumeAll>:
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	0f 92       	push	r0
    11f6:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <uxSchedulerSuspended>
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <uxSchedulerSuspended>
    1200:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <uxSchedulerSuspended>
    1204:	81 11       	cpse	r24, r1
    1206:	bf c0       	rjmp	.+382    	; 0x1386 <xTaskResumeAll+0x19a>
    1208:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <uxCurrentNumberOfTasks>
    120c:	81 11       	cpse	r24, r1
    120e:	96 c0       	rjmp	.+300    	; 0x133c <xTaskResumeAll+0x150>
    1210:	bd c0       	rjmp	.+378    	; 0x138c <xTaskResumeAll+0x1a0>
    1212:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <xPendingReadyList+0x5>
    1216:	f0 91 d0 06 	lds	r31, 0x06D0	; 0x8006d0 <xPendingReadyList+0x6>
    121a:	06 80       	ldd	r0, Z+6	; 0x06
    121c:	f7 81       	ldd	r31, Z+7	; 0x07
    121e:	e0 2d       	mov	r30, r0
    1220:	a4 89       	ldd	r26, Z+20	; 0x14
    1222:	b5 89       	ldd	r27, Z+21	; 0x15
    1224:	c6 85       	ldd	r28, Z+14	; 0x0e
    1226:	d7 85       	ldd	r29, Z+15	; 0x0f
    1228:	80 89       	ldd	r24, Z+16	; 0x10
    122a:	91 89       	ldd	r25, Z+17	; 0x11
    122c:	9d 83       	std	Y+5, r25	; 0x05
    122e:	8c 83       	std	Y+4, r24	; 0x04
    1230:	c0 89       	ldd	r28, Z+16	; 0x10
    1232:	d1 89       	ldd	r29, Z+17	; 0x11
    1234:	86 85       	ldd	r24, Z+14	; 0x0e
    1236:	97 85       	ldd	r25, Z+15	; 0x0f
    1238:	9b 83       	std	Y+3, r25	; 0x03
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	11 96       	adiw	r26, 0x01	; 1
    123e:	2d 91       	ld	r18, X+
    1240:	3c 91       	ld	r19, X
    1242:	12 97       	sbiw	r26, 0x02	; 2
    1244:	cf 01       	movw	r24, r30
    1246:	0c 96       	adiw	r24, 0x0c	; 12
    1248:	28 17       	cp	r18, r24
    124a:	39 07       	cpc	r19, r25
    124c:	31 f4       	brne	.+12     	; 0x125a <xTaskResumeAll+0x6e>
    124e:	80 89       	ldd	r24, Z+16	; 0x10
    1250:	91 89       	ldd	r25, Z+17	; 0x11
    1252:	12 96       	adiw	r26, 0x02	; 2
    1254:	9c 93       	st	X, r25
    1256:	8e 93       	st	-X, r24
    1258:	11 97       	sbiw	r26, 0x01	; 1
    125a:	15 8a       	std	Z+21, r1	; 0x15
    125c:	14 8a       	std	Z+20, r1	; 0x14
    125e:	8c 91       	ld	r24, X
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	8c 93       	st	X, r24
    1264:	a2 85       	ldd	r26, Z+10	; 0x0a
    1266:	b3 85       	ldd	r27, Z+11	; 0x0b
    1268:	c4 81       	ldd	r28, Z+4	; 0x04
    126a:	d5 81       	ldd	r29, Z+5	; 0x05
    126c:	86 81       	ldd	r24, Z+6	; 0x06
    126e:	97 81       	ldd	r25, Z+7	; 0x07
    1270:	9d 83       	std	Y+5, r25	; 0x05
    1272:	8c 83       	std	Y+4, r24	; 0x04
    1274:	c6 81       	ldd	r28, Z+6	; 0x06
    1276:	d7 81       	ldd	r29, Z+7	; 0x07
    1278:	84 81       	ldd	r24, Z+4	; 0x04
    127a:	95 81       	ldd	r25, Z+5	; 0x05
    127c:	9b 83       	std	Y+3, r25	; 0x03
    127e:	8a 83       	std	Y+2, r24	; 0x02
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	8d 91       	ld	r24, X+
    1284:	9c 91       	ld	r25, X
    1286:	12 97       	sbiw	r26, 0x02	; 2
    1288:	9f 01       	movw	r18, r30
    128a:	2e 5f       	subi	r18, 0xFE	; 254
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	82 17       	cp	r24, r18
    1290:	93 07       	cpc	r25, r19
    1292:	31 f4       	brne	.+12     	; 0x12a0 <xTaskResumeAll+0xb4>
    1294:	86 81       	ldd	r24, Z+6	; 0x06
    1296:	97 81       	ldd	r25, Z+7	; 0x07
    1298:	12 96       	adiw	r26, 0x02	; 2
    129a:	9c 93       	st	X, r25
    129c:	8e 93       	st	-X, r24
    129e:	11 97       	sbiw	r26, 0x01	; 1
    12a0:	13 86       	std	Z+11, r1	; 0x0b
    12a2:	12 86       	std	Z+10, r1	; 0x0a
    12a4:	8c 91       	ld	r24, X
    12a6:	81 50       	subi	r24, 0x01	; 1
    12a8:	8c 93       	st	X, r24
    12aa:	86 89       	ldd	r24, Z+22	; 0x16
    12ac:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <uxTopReadyPriority>
    12b0:	98 17       	cp	r25, r24
    12b2:	10 f4       	brcc	.+4      	; 0x12b8 <xTaskResumeAll+0xcc>
    12b4:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <uxTopReadyPriority>
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	dc 01       	movw	r26, r24
    12bc:	aa 0f       	add	r26, r26
    12be:	bb 1f       	adc	r27, r27
    12c0:	aa 0f       	add	r26, r26
    12c2:	bb 1f       	adc	r27, r27
    12c4:	aa 0f       	add	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	8a 0f       	add	r24, r26
    12ca:	9b 1f       	adc	r25, r27
    12cc:	dc 01       	movw	r26, r24
    12ce:	a7 51       	subi	r26, 0x17	; 23
    12d0:	b9 4f       	sbci	r27, 0xF9	; 249
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	0d 90       	ld	r0, X+
    12d6:	bc 91       	ld	r27, X
    12d8:	a0 2d       	mov	r26, r0
    12da:	b5 83       	std	Z+5, r27	; 0x05
    12dc:	a4 83       	std	Z+4, r26	; 0x04
    12de:	14 96       	adiw	r26, 0x04	; 4
    12e0:	8d 91       	ld	r24, X+
    12e2:	9c 91       	ld	r25, X
    12e4:	15 97       	sbiw	r26, 0x05	; 5
    12e6:	97 83       	std	Z+7, r25	; 0x07
    12e8:	86 83       	std	Z+6, r24	; 0x06
    12ea:	14 96       	adiw	r26, 0x04	; 4
    12ec:	cd 91       	ld	r28, X+
    12ee:	dc 91       	ld	r29, X
    12f0:	15 97       	sbiw	r26, 0x05	; 5
    12f2:	3b 83       	std	Y+3, r19	; 0x03
    12f4:	2a 83       	std	Y+2, r18	; 0x02
    12f6:	15 96       	adiw	r26, 0x05	; 5
    12f8:	3c 93       	st	X, r19
    12fa:	2e 93       	st	-X, r18
    12fc:	14 97       	sbiw	r26, 0x04	; 4
    12fe:	a6 89       	ldd	r26, Z+22	; 0x16
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	cd 01       	movw	r24, r26
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	a8 0f       	add	r26, r24
    1312:	b9 1f       	adc	r27, r25
    1314:	a7 51       	subi	r26, 0x17	; 23
    1316:	b9 4f       	sbci	r27, 0xF9	; 249
    1318:	b3 87       	std	Z+11, r27	; 0x0b
    131a:	a2 87       	std	Z+10, r26	; 0x0a
    131c:	8c 91       	ld	r24, X
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	8c 93       	st	X, r24
    1322:	96 89       	ldd	r25, Z+22	; 0x16
    1324:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
    1328:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    132c:	56 96       	adiw	r26, 0x16	; 22
    132e:	8c 91       	ld	r24, X
    1330:	98 17       	cp	r25, r24
    1332:	30 f0       	brcs	.+12     	; 0x1340 <xTaskResumeAll+0x154>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <xYieldPending>
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <xTaskResumeAll+0x154>
    133c:	e0 e0       	ldi	r30, 0x00	; 0
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <xPendingReadyList>
    1344:	81 11       	cpse	r24, r1
    1346:	65 cf       	rjmp	.-310    	; 0x1212 <xTaskResumeAll+0x26>
    1348:	ef 2b       	or	r30, r31
    134a:	11 f0       	breq	.+4      	; 0x1350 <xTaskResumeAll+0x164>
    134c:	0e 94 83 05 	call	0xb06	; 0xb06 <prvResetNextTaskUnblockTime>
    1350:	c0 91 ba 06 	lds	r28, 0x06BA	; 0x8006ba <xPendedTicks>
    1354:	d0 91 bb 06 	lds	r29, 0x06BB	; 0x8006bb <xPendedTicks+0x1>
    1358:	20 97       	sbiw	r28, 0x00	; 0
    135a:	69 f0       	breq	.+26     	; 0x1376 <xTaskResumeAll+0x18a>
    135c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <xTaskIncrementTick>
    1360:	88 23       	and	r24, r24
    1362:	19 f0       	breq	.+6      	; 0x136a <xTaskResumeAll+0x17e>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <xYieldPending>
    136a:	21 97       	sbiw	r28, 0x01	; 1
    136c:	b9 f7       	brne	.-18     	; 0x135c <xTaskResumeAll+0x170>
    136e:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <xPendedTicks+0x1>
    1372:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <xPendedTicks>
    1376:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <xYieldPending>
    137a:	88 23       	and	r24, r24
    137c:	31 f0       	breq	.+12     	; 0x138a <xTaskResumeAll+0x19e>
    137e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	03 c0       	rjmp	.+6      	; 0x138c <xTaskResumeAll+0x1a0>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	01 c0       	rjmp	.+2      	; 0x138c <xTaskResumeAll+0x1a0>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <vTaskDelay>:
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	ec 01       	movw	r28, r24
    139c:	89 2b       	or	r24, r25
    139e:	49 f0       	breq	.+18     	; 0x13b2 <vTaskDelay+0x1c>
    13a0:	0e 94 c9 07 	call	0xf92	; 0xf92 <vTaskSuspendAll>
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	ce 01       	movw	r24, r28
    13a8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <prvAddCurrentTaskToDelayedList>
    13ac:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <vTaskDelay+0x1e>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	81 11       	cpse	r24, r1
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vTaskDelay+0x26>
    13b8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <vTaskSwitchContext>:
    13c2:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <uxSchedulerSuspended>
    13c6:	88 23       	and	r24, r24
    13c8:	21 f0       	breq	.+8      	; 0x13d2 <vTaskSwitchContext+0x10>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <xYieldPending>
    13d0:	08 95       	ret
    13d2:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <xYieldPending>
    13d6:	20 91 bd 06 	lds	r18, 0x06BD	; 0x8006bd <uxTopReadyPriority>
    13da:	01 c0       	rjmp	.+2      	; 0x13de <vTaskSwitchContext+0x1c>
    13dc:	21 50       	subi	r18, 0x01	; 1
    13de:	82 2f       	mov	r24, r18
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	fc 01       	movw	r30, r24
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	ee 0f       	add	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e8 0f       	add	r30, r24
    13f2:	f9 1f       	adc	r31, r25
    13f4:	e7 51       	subi	r30, 0x17	; 23
    13f6:	f9 4f       	sbci	r31, 0xF9	; 249
    13f8:	30 81       	ld	r19, Z
    13fa:	33 23       	and	r19, r19
    13fc:	79 f3       	breq	.-34     	; 0x13dc <vTaskSwitchContext+0x1a>
    13fe:	ac 01       	movw	r20, r24
    1400:	44 0f       	add	r20, r20
    1402:	55 1f       	adc	r21, r21
    1404:	44 0f       	add	r20, r20
    1406:	55 1f       	adc	r21, r21
    1408:	44 0f       	add	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	48 0f       	add	r20, r24
    140e:	59 1f       	adc	r21, r25
    1410:	df 01       	movw	r26, r30
    1412:	01 80       	ldd	r0, Z+1	; 0x01
    1414:	f2 81       	ldd	r31, Z+2	; 0x02
    1416:	e0 2d       	mov	r30, r0
    1418:	02 80       	ldd	r0, Z+2	; 0x02
    141a:	f3 81       	ldd	r31, Z+3	; 0x03
    141c:	e0 2d       	mov	r30, r0
    141e:	12 96       	adiw	r26, 0x02	; 2
    1420:	fc 93       	st	X, r31
    1422:	ee 93       	st	-X, r30
    1424:	11 97       	sbiw	r26, 0x01	; 1
    1426:	44 51       	subi	r20, 0x14	; 20
    1428:	59 4f       	sbci	r21, 0xF9	; 249
    142a:	e4 17       	cp	r30, r20
    142c:	f5 07       	cpc	r31, r21
    142e:	29 f4       	brne	.+10     	; 0x143a <vTaskSwitchContext+0x78>
    1430:	42 81       	ldd	r20, Z+2	; 0x02
    1432:	53 81       	ldd	r21, Z+3	; 0x03
    1434:	fd 01       	movw	r30, r26
    1436:	52 83       	std	Z+2, r21	; 0x02
    1438:	41 83       	std	Z+1, r20	; 0x01
    143a:	fc 01       	movw	r30, r24
    143c:	ee 0f       	add	r30, r30
    143e:	ff 1f       	adc	r31, r31
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	8e 0f       	add	r24, r30
    144a:	9f 1f       	adc	r25, r31
    144c:	fc 01       	movw	r30, r24
    144e:	e7 51       	subi	r30, 0x17	; 23
    1450:	f9 4f       	sbci	r31, 0xF9	; 249
    1452:	01 80       	ldd	r0, Z+1	; 0x01
    1454:	f2 81       	ldd	r31, Z+2	; 0x02
    1456:	e0 2d       	mov	r30, r0
    1458:	86 81       	ldd	r24, Z+6	; 0x06
    145a:	97 81       	ldd	r25, Z+7	; 0x07
    145c:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <pxCurrentTCB+0x1>
    1460:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <pxCurrentTCB>
    1464:	20 93 bd 06 	sts	0x06BD, r18	; 0x8006bd <uxTopReadyPriority>
    1468:	08 95       	ret

0000146a <vTaskPlaceOnEventList>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	eb 01       	movw	r28, r22
    1470:	60 91 0d 07 	lds	r22, 0x070D	; 0x80070d <pxCurrentTCB>
    1474:	70 91 0e 07 	lds	r23, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    1478:	64 5f       	subi	r22, 0xF4	; 244
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	ce 01       	movw	r24, r28
    1484:	0e 94 bf 06 	call	0xd7e	; 0xd7e <prvAddCurrentTaskToDelayedList>
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <vTaskPlaceOnEventListRestricted>:
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	fc 01       	movw	r30, r24
    1498:	8b 01       	movw	r16, r22
    149a:	a1 81       	ldd	r26, Z+1	; 0x01
    149c:	b2 81       	ldd	r27, Z+2	; 0x02
    149e:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <pxCurrentTCB>
    14a2:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    14a6:	ec 01       	movw	r28, r24
    14a8:	bf 87       	std	Y+15, r27	; 0x0f
    14aa:	ae 87       	std	Y+14, r26	; 0x0e
    14ac:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <pxCurrentTCB>
    14b0:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    14b4:	14 96       	adiw	r26, 0x04	; 4
    14b6:	2d 91       	ld	r18, X+
    14b8:	3c 91       	ld	r19, X
    14ba:	15 97       	sbiw	r26, 0x05	; 5
    14bc:	ec 01       	movw	r28, r24
    14be:	39 8b       	std	Y+17, r19	; 0x11
    14c0:	28 8b       	std	Y+16, r18	; 0x10
    14c2:	14 96       	adiw	r26, 0x04	; 4
    14c4:	8d 91       	ld	r24, X+
    14c6:	9c 91       	ld	r25, X
    14c8:	15 97       	sbiw	r26, 0x05	; 5
    14ca:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <pxCurrentTCB>
    14ce:	30 91 0e 07 	lds	r19, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    14d2:	24 5f       	subi	r18, 0xF4	; 244
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	ec 01       	movw	r28, r24
    14d8:	3b 83       	std	Y+3, r19	; 0x03
    14da:	2a 83       	std	Y+2, r18	; 0x02
    14dc:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <pxCurrentTCB>
    14e0:	30 91 0e 07 	lds	r19, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    14e4:	24 5f       	subi	r18, 0xF4	; 244
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	15 96       	adiw	r26, 0x05	; 5
    14ea:	3c 93       	st	X, r19
    14ec:	2e 93       	st	-X, r18
    14ee:	14 97       	sbiw	r26, 0x04	; 4
    14f0:	a0 91 0d 07 	lds	r26, 0x070D	; 0x80070d <pxCurrentTCB>
    14f4:	b0 91 0e 07 	lds	r27, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    14f8:	55 96       	adiw	r26, 0x15	; 21
    14fa:	fc 93       	st	X, r31
    14fc:	ee 93       	st	-X, r30
    14fe:	54 97       	sbiw	r26, 0x14	; 20
    1500:	90 81       	ld	r25, Z
    1502:	9f 5f       	subi	r25, 0xFF	; 255
    1504:	90 83       	st	Z, r25
    1506:	44 23       	and	r20, r20
    1508:	11 f0       	breq	.+4      	; 0x150e <vTaskPlaceOnEventListRestricted+0x80>
    150a:	0f ef       	ldi	r16, 0xFF	; 255
    150c:	1f ef       	ldi	r17, 0xFF	; 255
    150e:	64 2f       	mov	r22, r20
    1510:	c8 01       	movw	r24, r16
    1512:	0e 94 bf 06 	call	0xd7e	; 0xd7e <prvAddCurrentTaskToDelayedList>
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <xTaskRemoveFromEventList>:
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	dc 01       	movw	r26, r24
    1526:	15 96       	adiw	r26, 0x05	; 5
    1528:	ed 91       	ld	r30, X+
    152a:	fc 91       	ld	r31, X
    152c:	16 97       	sbiw	r26, 0x06	; 6
    152e:	06 80       	ldd	r0, Z+6	; 0x06
    1530:	f7 81       	ldd	r31, Z+7	; 0x07
    1532:	e0 2d       	mov	r30, r0
    1534:	a4 89       	ldd	r26, Z+20	; 0x14
    1536:	b5 89       	ldd	r27, Z+21	; 0x15
    1538:	c6 85       	ldd	r28, Z+14	; 0x0e
    153a:	d7 85       	ldd	r29, Z+15	; 0x0f
    153c:	80 89       	ldd	r24, Z+16	; 0x10
    153e:	91 89       	ldd	r25, Z+17	; 0x11
    1540:	9d 83       	std	Y+5, r25	; 0x05
    1542:	8c 83       	std	Y+4, r24	; 0x04
    1544:	c0 89       	ldd	r28, Z+16	; 0x10
    1546:	d1 89       	ldd	r29, Z+17	; 0x11
    1548:	86 85       	ldd	r24, Z+14	; 0x0e
    154a:	97 85       	ldd	r25, Z+15	; 0x0f
    154c:	9b 83       	std	Y+3, r25	; 0x03
    154e:	8a 83       	std	Y+2, r24	; 0x02
    1550:	11 96       	adiw	r26, 0x01	; 1
    1552:	8d 91       	ld	r24, X+
    1554:	9c 91       	ld	r25, X
    1556:	12 97       	sbiw	r26, 0x02	; 2
    1558:	9f 01       	movw	r18, r30
    155a:	24 5f       	subi	r18, 0xF4	; 244
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	82 17       	cp	r24, r18
    1560:	93 07       	cpc	r25, r19
    1562:	31 f4       	brne	.+12     	; 0x1570 <xTaskRemoveFromEventList+0x50>
    1564:	80 89       	ldd	r24, Z+16	; 0x10
    1566:	91 89       	ldd	r25, Z+17	; 0x11
    1568:	12 96       	adiw	r26, 0x02	; 2
    156a:	9c 93       	st	X, r25
    156c:	8e 93       	st	-X, r24
    156e:	11 97       	sbiw	r26, 0x01	; 1
    1570:	15 8a       	std	Z+21, r1	; 0x15
    1572:	14 8a       	std	Z+20, r1	; 0x14
    1574:	8c 91       	ld	r24, X
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	8c 93       	st	X, r24
    157a:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <uxSchedulerSuspended>
    157e:	81 11       	cpse	r24, r1
    1580:	60 c0       	rjmp	.+192    	; 0x1642 <xTaskRemoveFromEventList+0x122>
    1582:	a2 85       	ldd	r26, Z+10	; 0x0a
    1584:	b3 85       	ldd	r27, Z+11	; 0x0b
    1586:	c4 81       	ldd	r28, Z+4	; 0x04
    1588:	d5 81       	ldd	r29, Z+5	; 0x05
    158a:	86 81       	ldd	r24, Z+6	; 0x06
    158c:	97 81       	ldd	r25, Z+7	; 0x07
    158e:	9d 83       	std	Y+5, r25	; 0x05
    1590:	8c 83       	std	Y+4, r24	; 0x04
    1592:	c6 81       	ldd	r28, Z+6	; 0x06
    1594:	d7 81       	ldd	r29, Z+7	; 0x07
    1596:	84 81       	ldd	r24, Z+4	; 0x04
    1598:	95 81       	ldd	r25, Z+5	; 0x05
    159a:	9b 83       	std	Y+3, r25	; 0x03
    159c:	8a 83       	std	Y+2, r24	; 0x02
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	8d 91       	ld	r24, X+
    15a2:	9c 91       	ld	r25, X
    15a4:	12 97       	sbiw	r26, 0x02	; 2
    15a6:	9f 01       	movw	r18, r30
    15a8:	2e 5f       	subi	r18, 0xFE	; 254
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	82 17       	cp	r24, r18
    15ae:	93 07       	cpc	r25, r19
    15b0:	31 f4       	brne	.+12     	; 0x15be <xTaskRemoveFromEventList+0x9e>
    15b2:	86 81       	ldd	r24, Z+6	; 0x06
    15b4:	97 81       	ldd	r25, Z+7	; 0x07
    15b6:	12 96       	adiw	r26, 0x02	; 2
    15b8:	9c 93       	st	X, r25
    15ba:	8e 93       	st	-X, r24
    15bc:	11 97       	sbiw	r26, 0x01	; 1
    15be:	13 86       	std	Z+11, r1	; 0x0b
    15c0:	12 86       	std	Z+10, r1	; 0x0a
    15c2:	8c 91       	ld	r24, X
    15c4:	81 50       	subi	r24, 0x01	; 1
    15c6:	8c 93       	st	X, r24
    15c8:	86 89       	ldd	r24, Z+22	; 0x16
    15ca:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <uxTopReadyPriority>
    15ce:	98 17       	cp	r25, r24
    15d0:	10 f4       	brcc	.+4      	; 0x15d6 <xTaskRemoveFromEventList+0xb6>
    15d2:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <uxTopReadyPriority>
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	dc 01       	movw	r26, r24
    15da:	aa 0f       	add	r26, r26
    15dc:	bb 1f       	adc	r27, r27
    15de:	aa 0f       	add	r26, r26
    15e0:	bb 1f       	adc	r27, r27
    15e2:	aa 0f       	add	r26, r26
    15e4:	bb 1f       	adc	r27, r27
    15e6:	8a 0f       	add	r24, r26
    15e8:	9b 1f       	adc	r25, r27
    15ea:	dc 01       	movw	r26, r24
    15ec:	a7 51       	subi	r26, 0x17	; 23
    15ee:	b9 4f       	sbci	r27, 0xF9	; 249
    15f0:	11 96       	adiw	r26, 0x01	; 1
    15f2:	0d 90       	ld	r0, X+
    15f4:	bc 91       	ld	r27, X
    15f6:	a0 2d       	mov	r26, r0
    15f8:	b5 83       	std	Z+5, r27	; 0x05
    15fa:	a4 83       	std	Z+4, r26	; 0x04
    15fc:	14 96       	adiw	r26, 0x04	; 4
    15fe:	8d 91       	ld	r24, X+
    1600:	9c 91       	ld	r25, X
    1602:	15 97       	sbiw	r26, 0x05	; 5
    1604:	97 83       	std	Z+7, r25	; 0x07
    1606:	86 83       	std	Z+6, r24	; 0x06
    1608:	14 96       	adiw	r26, 0x04	; 4
    160a:	cd 91       	ld	r28, X+
    160c:	dc 91       	ld	r29, X
    160e:	15 97       	sbiw	r26, 0x05	; 5
    1610:	3b 83       	std	Y+3, r19	; 0x03
    1612:	2a 83       	std	Y+2, r18	; 0x02
    1614:	15 96       	adiw	r26, 0x05	; 5
    1616:	3c 93       	st	X, r19
    1618:	2e 93       	st	-X, r18
    161a:	14 97       	sbiw	r26, 0x04	; 4
    161c:	a6 89       	ldd	r26, Z+22	; 0x16
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	cd 01       	movw	r24, r26
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	a8 0f       	add	r26, r24
    1630:	b9 1f       	adc	r27, r25
    1632:	a7 51       	subi	r26, 0x17	; 23
    1634:	b9 4f       	sbci	r27, 0xF9	; 249
    1636:	b3 87       	std	Z+11, r27	; 0x0b
    1638:	a2 87       	std	Z+10, r26	; 0x0a
    163a:	8c 91       	ld	r24, X
    163c:	8f 5f       	subi	r24, 0xFF	; 255
    163e:	8c 93       	st	X, r24
    1640:	1c c0       	rjmp	.+56     	; 0x167a <xTaskRemoveFromEventList+0x15a>
    1642:	4a ec       	ldi	r20, 0xCA	; 202
    1644:	56 e0       	ldi	r21, 0x06	; 6
    1646:	da 01       	movw	r26, r20
    1648:	11 96       	adiw	r26, 0x01	; 1
    164a:	cd 91       	ld	r28, X+
    164c:	dc 91       	ld	r29, X
    164e:	12 97       	sbiw	r26, 0x02	; 2
    1650:	d7 87       	std	Z+15, r29	; 0x0f
    1652:	c6 87       	std	Z+14, r28	; 0x0e
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	91 8b       	std	Z+17, r25	; 0x11
    165a:	80 8b       	std	Z+16, r24	; 0x10
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	dc 01       	movw	r26, r24
    1662:	13 96       	adiw	r26, 0x03	; 3
    1664:	3c 93       	st	X, r19
    1666:	2e 93       	st	-X, r18
    1668:	12 97       	sbiw	r26, 0x02	; 2
    166a:	3d 83       	std	Y+5, r19	; 0x05
    166c:	2c 83       	std	Y+4, r18	; 0x04
    166e:	55 8b       	std	Z+21, r21	; 0x15
    1670:	44 8b       	std	Z+20, r20	; 0x14
    1672:	da 01       	movw	r26, r20
    1674:	8c 91       	ld	r24, X
    1676:	8f 5f       	subi	r24, 0xFF	; 255
    1678:	8c 93       	st	X, r24
    167a:	96 89       	ldd	r25, Z+22	; 0x16
    167c:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <pxCurrentTCB>
    1680:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <pxCurrentTCB+0x1>
    1684:	86 89       	ldd	r24, Z+22	; 0x16
    1686:	89 17       	cp	r24, r25
    1688:	20 f4       	brcc	.+8      	; 0x1692 <xTaskRemoveFromEventList+0x172>
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <xYieldPending>
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <xTaskRemoveFromEventList+0x174>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret

0000169a <vTaskInternalSetTimeOutState>:
    169a:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <xNumOfOverflows>
    169e:	fc 01       	movw	r30, r24
    16a0:	20 83       	st	Z, r18
    16a2:	20 91 be 06 	lds	r18, 0x06BE	; 0x8006be <xTickCount>
    16a6:	30 91 bf 06 	lds	r19, 0x06BF	; 0x8006bf <xTickCount+0x1>
    16aa:	32 83       	std	Z+2, r19	; 0x02
    16ac:	21 83       	std	Z+1, r18	; 0x01
    16ae:	08 95       	ret

000016b0 <xTaskCheckForTimeOut>:
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	0f 92       	push	r0
    16bc:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <xTickCount>
    16c0:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <xTickCount+0x1>
    16c4:	dc 01       	movw	r26, r24
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	4d 91       	ld	r20, X+
    16ca:	5c 91       	ld	r21, X
    16cc:	12 97       	sbiw	r26, 0x02	; 2
    16ce:	df 01       	movw	r26, r30
    16d0:	a4 1b       	sub	r26, r20
    16d2:	b5 0b       	sbc	r27, r21
    16d4:	eb 01       	movw	r28, r22
    16d6:	28 81       	ld	r18, Y
    16d8:	39 81       	ldd	r19, Y+1	; 0x01
    16da:	2f 3f       	cpi	r18, 0xFF	; 255
    16dc:	df ef       	ldi	r29, 0xFF	; 255
    16de:	3d 07       	cpc	r19, r29
    16e0:	f9 f0       	breq	.+62     	; 0x1720 <xTaskCheckForTimeOut+0x70>
    16e2:	ec 01       	movw	r28, r24
    16e4:	18 81       	ld	r17, Y
    16e6:	c0 91 b8 06 	lds	r28, 0x06B8	; 0x8006b8 <xNumOfOverflows>
    16ea:	1c 17       	cp	r17, r28
    16ec:	41 f0       	breq	.+16     	; 0x16fe <xTaskCheckForTimeOut+0x4e>
    16ee:	e4 17       	cp	r30, r20
    16f0:	f5 07       	cpc	r31, r21
    16f2:	28 f0       	brcs	.+10     	; 0x16fe <xTaskCheckForTimeOut+0x4e>
    16f4:	fb 01       	movw	r30, r22
    16f6:	11 82       	std	Z+1, r1	; 0x01
    16f8:	10 82       	st	Z, r1
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	12 c0       	rjmp	.+36     	; 0x1722 <xTaskCheckForTimeOut+0x72>
    16fe:	a2 17       	cp	r26, r18
    1700:	b3 07       	cpc	r27, r19
    1702:	48 f4       	brcc	.+18     	; 0x1716 <xTaskCheckForTimeOut+0x66>
    1704:	fb 01       	movw	r30, r22
    1706:	2a 1b       	sub	r18, r26
    1708:	3b 0b       	sbc	r19, r27
    170a:	31 83       	std	Z+1, r19	; 0x01
    170c:	20 83       	st	Z, r18
    170e:	0e 94 4d 0b 	call	0x169a	; 0x169a <vTaskInternalSetTimeOutState>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <xTaskCheckForTimeOut+0x72>
    1716:	db 01       	movw	r26, r22
    1718:	1d 92       	st	X+, r1
    171a:	1c 92       	st	X, r1
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <xTaskCheckForTimeOut+0x72>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	08 95       	ret

0000172e <vTaskMissedYield>:
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <xYieldPending>
    1734:	08 95       	ret

00001736 <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    1736:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <xSchedulerRunning>
    173a:	88 23       	and	r24, r24
    173c:	31 f0       	breq	.+12     	; 0x174a <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    173e:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <uxSchedulerSuspended>
    1742:	81 11       	cpse	r24, r1
    1744:	04 c0       	rjmp	.+8      	; 0x174e <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	08 95       	ret
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    174e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }

        return xReturn;
    }
    1750:	08 95       	ret

00001752 <prvGetNextExpireTime>:
        }
    }
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    1752:	dc 01       	movw	r26, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1754:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <pxCurrentTimerList>
    1758:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <pxCurrentTimerList+0x1>
    175c:	80 81       	ld	r24, Z
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	81 11       	cpse	r24, r1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 93       	st	X, r25

        if( *pxListWasEmpty == pdFALSE )
    1766:	91 11       	cpse	r25, r1
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <prvGetNextExpireTime+0x24>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    176a:	05 80       	ldd	r0, Z+5	; 0x05
    176c:	f6 81       	ldd	r31, Z+6	; 0x06
    176e:	e0 2d       	mov	r30, r0
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	08 95       	ret
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
        }

        return xNextExpireTime;
    }
    177a:	08 95       	ret

0000177c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    177c:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    177e:	73 83       	std	Z+3, r23	; 0x03
    1780:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1782:	91 87       	std	Z+9, r25	; 0x09
    1784:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    1786:	46 17       	cp	r20, r22
    1788:	57 07       	cpc	r21, r23
    178a:	90 f0       	brcs	.+36     	; 0x17b0 <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    178c:	42 1b       	sub	r20, r18
    178e:	53 0b       	sbc	r21, r19
    1790:	84 85       	ldd	r24, Z+12	; 0x0c
    1792:	95 85       	ldd	r25, Z+13	; 0x0d
    1794:	48 17       	cp	r20, r24
    1796:	59 07       	cpc	r21, r25
    1798:	e0 f4       	brcc	.+56     	; 0x17d2 <prvInsertTimerInActiveList+0x56>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    179a:	bf 01       	movw	r22, r30
    179c:	6e 5f       	subi	r22, 0xFE	; 254
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxOverflowTimerList>
    17a4:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxOverflowTimerList+0x1>
    17a8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    17b0:	42 17       	cp	r20, r18
    17b2:	53 07       	cpc	r21, r19
    17b4:	18 f4       	brcc	.+6      	; 0x17bc <prvInsertTimerInActiveList+0x40>
    17b6:	62 17       	cp	r22, r18
    17b8:	73 07       	cpc	r23, r19
    17ba:	68 f4       	brcc	.+26     	; 0x17d6 <prvInsertTimerInActiveList+0x5a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    17bc:	bf 01       	movw	r22, r30
    17be:	6e 5f       	subi	r22, 0xFE	; 254
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <pxCurrentTimerList>
    17c6:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <pxCurrentTimerList+0x1>
    17ca:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	08 95       	ret
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    17d8:	08 95       	ret

000017da <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	ec 01       	movw	r28, r24
    17e8:	8b 01       	movw	r16, r22
    17ea:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <prvReloadTimer+0x24>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    17ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17f2:	08 0f       	add	r16, r24
    17f4:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    17f6:	e8 89       	ldd	r30, Y+16	; 0x10
    17f8:	f9 89       	ldd	r31, Y+17	; 0x11
    17fa:	ce 01       	movw	r24, r28
    17fc:	09 95       	icall
                                const TickType_t xTimeNow )
    {
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    17fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1800:	7d 85       	ldd	r23, Y+13	; 0x0d
    1802:	60 0f       	add	r22, r16
    1804:	71 1f       	adc	r23, r17
    1806:	98 01       	movw	r18, r16
    1808:	a7 01       	movw	r20, r14
    180a:	ce 01       	movw	r24, r28
    180c:	0e 94 be 0b 	call	0x177c	; 0x177c <prvInsertTimerInActiveList>
    1810:	81 11       	cpse	r24, r1
    1812:	ed cf       	rjmp	.-38     	; 0x17ee <prvReloadTimer+0x14>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	8c 01       	movw	r16, r24
    1830:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1832:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <pxCurrentTimerList>
    1836:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <pxCurrentTimerList+0x1>
    183a:	05 80       	ldd	r0, Z+5	; 0x05
    183c:	f6 81       	ldd	r31, Z+6	; 0x06
    183e:	e0 2d       	mov	r30, r0
    1840:	c6 81       	ldd	r28, Z+6	; 0x06
    1842:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1844:	ce 01       	movw	r24, r28
    1846:	02 96       	adiw	r24, 0x02	; 2
    1848:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    184c:	8a 89       	ldd	r24, Y+18	; 0x12
    184e:	82 ff       	sbrs	r24, 2
    1850:	06 c0       	rjmp	.+12     	; 0x185e <prvProcessExpiredTimer+0x3c>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    1852:	a7 01       	movw	r20, r14
    1854:	b8 01       	movw	r22, r16
    1856:	ce 01       	movw	r24, r28
    1858:	0e 94 ed 0b 	call	0x17da	; 0x17da <prvReloadTimer>
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <prvProcessExpiredTimer+0x40>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    185e:	8e 7f       	andi	r24, 0xFE	; 254
    1860:	8a 8b       	std	Y+18, r24	; 0x12
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1862:	e8 89       	ldd	r30, Y+16	; 0x10
    1864:	f9 89       	ldd	r31, Y+17	; 0x11
    1866:	ce 01       	movw	r24, r28
    1868:	09 95       	icall
    }
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	ff 90       	pop	r15
    1874:	ef 90       	pop	r14
    1876:	08 95       	ret

00001878 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1878:	09 c0       	rjmp	.+18     	; 0x188c <prvSwitchTimerLists+0x14>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    187a:	05 80       	ldd	r0, Z+5	; 0x05
    187c:	f6 81       	ldd	r31, Z+6	; 0x06
    187e:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    1880:	6f ef       	ldi	r22, 0xFF	; 255
    1882:	7f ef       	ldi	r23, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	0e 94 11 0c 	call	0x1822	; 0x1822 <prvProcessExpiredTimer>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    188c:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <pxCurrentTimerList>
    1890:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <pxCurrentTimerList+0x1>
    1894:	80 81       	ld	r24, Z
    1896:	81 11       	cpse	r24, r1
    1898:	f0 cf       	rjmp	.-32     	; 0x187a <prvSwitchTimerLists+0x2>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    189a:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxOverflowTimerList>
    189e:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxOverflowTimerList+0x1>
    18a2:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <pxCurrentTimerList+0x1>
    18a6:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    18aa:	f0 93 16 07 	sts	0x0716, r31	; 0x800716 <pxOverflowTimerList+0x1>
    18ae:	e0 93 15 07 	sts	0x0715, r30	; 0x800715 <pxOverflowTimerList>
    18b2:	08 95       	ret

000018b4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    18be:	0e 94 cf 07 	call	0xf9e	; 0xf9e <xTaskGetTickCount>
    18c2:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    18c4:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xLastTime.2428>
    18c8:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <xLastTime.2428+0x1>
    18cc:	c8 17       	cp	r28, r24
    18ce:	d9 07       	cpc	r29, r25
    18d0:	30 f4       	brcc	.+12     	; 0x18de <prvSampleTimeNow+0x2a>
        {
            prvSwitchTimerLists();
    18d2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	f8 01       	movw	r30, r16
    18da:	80 83       	st	Z, r24
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <prvSampleTimeNow+0x2e>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    18de:	f8 01       	movw	r30, r16
    18e0:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    18e2:	d0 93 10 07 	sts	0x0710, r29	; 0x800710 <xLastTime.2428+0x1>
    18e6:	c0 93 0f 07 	sts	0x070F, r28	; 0x80070f <xLastTime.2428>

        return xTimeNow;
    }
    18ea:	ce 01       	movw	r24, r28
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	1f 92       	push	r1
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	7c 01       	movw	r14, r24
    190c:	16 2f       	mov	r17, r22
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    190e:	0e 94 c9 07 	call	0xf92	; 0xf92 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <prvSampleTimeNow>
    191a:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	81 11       	cpse	r24, r1
    1920:	27 c0       	rjmp	.+78     	; 0x1970 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1922:	11 11       	cpse	r17, r1
    1924:	0a c0       	rjmp	.+20     	; 0x193a <prvProcessTimerOrBlockTask+0x44>
    1926:	ce 14       	cp	r12, r14
    1928:	df 04       	cpc	r13, r15
    192a:	38 f0       	brcs	.+14     	; 0x193a <prvProcessTimerOrBlockTask+0x44>
                {
                    ( void ) xTaskResumeAll();
    192c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1930:	b6 01       	movw	r22, r12
    1932:	c7 01       	movw	r24, r14
    1934:	0e 94 11 0c 	call	0x1822	; 0x1822 <prvProcessExpiredTimer>
    1938:	1d c0       	rjmp	.+58     	; 0x1974 <prvProcessTimerOrBlockTask+0x7e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    193a:	11 23       	and	r17, r17
    193c:	41 f0       	breq	.+16     	; 0x194e <prvProcessTimerOrBlockTask+0x58>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    193e:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <pxOverflowTimerList>
    1942:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <pxOverflowTimerList+0x1>
    1946:	80 81       	ld	r24, Z
    1948:	11 e0       	ldi	r17, 0x01	; 1
    194a:	81 11       	cpse	r24, r1
    194c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    194e:	b7 01       	movw	r22, r14
    1950:	6c 19       	sub	r22, r12
    1952:	7d 09       	sbc	r23, r13
    1954:	41 2f       	mov	r20, r17
    1956:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xTimerQueue>
    195a:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xTimerQueue+0x1>
    195e:	0e 94 66 05 	call	0xacc	; 0xacc <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1962:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
    1966:	81 11       	cpse	r24, r1
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <prvProcessTimerOrBlockTask+0x7e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    196a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <prvProcessTimerOrBlockTask+0x7e>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1970:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xTaskResumeAll>
            }
        }
    }
    1974:	0f 90       	pop	r0
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	08 95       	ret

00001986 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	00 d0       	rcall	.+0      	; 0x1994 <prvProcessReceivedCommands+0xe>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <prvProcessReceivedCommands+0x10>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <prvProcessReceivedCommands+0x12>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    199c:	7a c0       	rjmp	.+244    	; 0x1a92 <prvProcessReceivedCommands+0x10c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	88 23       	and	r24, r24
    19a2:	0c f4       	brge	.+2      	; 0x19a6 <prvProcessReceivedCommands+0x20>
    19a4:	76 c0       	rjmp	.+236    	; 0x1a92 <prvProcessReceivedCommands+0x10c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    19a6:	0c 81       	ldd	r16, Y+4	; 0x04
    19a8:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    19aa:	d8 01       	movw	r26, r16
    19ac:	1a 96       	adiw	r26, 0x0a	; 10
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	1b 97       	sbiw	r26, 0x0b	; 11
    19b4:	89 2b       	or	r24, r25
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    19b8:	c8 01       	movw	r24, r16
    19ba:	02 96       	adiw	r24, 0x02	; 2
    19bc:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    19c0:	ce 01       	movw	r24, r28
    19c2:	06 96       	adiw	r24, 0x06	; 6
    19c4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <prvSampleTimeNow>
    19c8:	7c 01       	movw	r14, r24

                switch( xMessage.xMessageID )
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	8e 2f       	mov	r24, r30
    19ce:	ee 0f       	add	r30, r30
    19d0:	99 0b       	sbc	r25, r25
    19d2:	aa 0b       	sbc	r26, r26
    19d4:	bb 0b       	sbc	r27, r27
    19d6:	fc 01       	movw	r30, r24
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	e9 30       	cpi	r30, 0x09	; 9
    19dc:	f1 05       	cpc	r31, r1
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <prvProcessReceivedCommands+0x5c>
    19e0:	58 c0       	rjmp	.+176    	; 0x1a92 <prvProcessReceivedCommands+0x10c>
    19e2:	e6 5d       	subi	r30, 0xD6	; 214
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    19ea:	f8 01       	movw	r30, r16
    19ec:	82 89       	ldd	r24, Z+18	; 0x12
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    19f2:	2a 81       	ldd	r18, Y+2	; 0x02
    19f4:	3b 81       	ldd	r19, Y+3	; 0x03
    19f6:	64 85       	ldd	r22, Z+12	; 0x0c
    19f8:	75 85       	ldd	r23, Z+13	; 0x0d
    19fa:	62 0f       	add	r22, r18
    19fc:	73 1f       	adc	r23, r19
    19fe:	a7 01       	movw	r20, r14
    1a00:	c8 01       	movw	r24, r16
    1a02:	0e 94 be 0b 	call	0x177c	; 0x177c <prvInsertTimerInActiveList>
    1a06:	88 23       	and	r24, r24
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <prvProcessReceivedCommands+0x86>
    1a0a:	43 c0       	rjmp	.+134    	; 0x1a92 <prvProcessReceivedCommands+0x10c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1a0c:	d8 01       	movw	r26, r16
    1a0e:	52 96       	adiw	r26, 0x12	; 18
    1a10:	8c 91       	ld	r24, X
    1a12:	52 97       	sbiw	r26, 0x12	; 18
    1a14:	82 ff       	sbrs	r24, 2
    1a16:	0d c0       	rjmp	.+26     	; 0x1a32 <prvProcessReceivedCommands+0xac>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    1a18:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1a:	7b 81       	ldd	r23, Y+3	; 0x03
    1a1c:	1c 96       	adiw	r26, 0x0c	; 12
    1a1e:	8d 91       	ld	r24, X+
    1a20:	9c 91       	ld	r25, X
    1a22:	1d 97       	sbiw	r26, 0x0d	; 13
    1a24:	68 0f       	add	r22, r24
    1a26:	79 1f       	adc	r23, r25
    1a28:	a7 01       	movw	r20, r14
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	0e 94 ed 0b 	call	0x17da	; 0x17da <prvReloadTimer>
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <prvProcessReceivedCommands+0xb2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1a32:	8e 7f       	andi	r24, 0xFE	; 254
    1a34:	f8 01       	movw	r30, r16
    1a36:	82 8b       	std	Z+18, r24	; 0x12
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1a38:	d8 01       	movw	r26, r16
    1a3a:	50 96       	adiw	r26, 0x10	; 16
    1a3c:	ed 91       	ld	r30, X+
    1a3e:	fc 91       	ld	r31, X
    1a40:	51 97       	sbiw	r26, 0x11	; 17
    1a42:	c8 01       	movw	r24, r16
    1a44:	09 95       	icall
    1a46:	25 c0       	rjmp	.+74     	; 0x1a92 <prvProcessReceivedCommands+0x10c>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1a48:	f8 01       	movw	r30, r16
    1a4a:	82 89       	ldd	r24, Z+18	; 0x12
    1a4c:	8e 7f       	andi	r24, 0xFE	; 254
    1a4e:	82 8b       	std	Z+18, r24	; 0x12
                        break;
    1a50:	20 c0       	rjmp	.+64     	; 0x1a92 <prvProcessReceivedCommands+0x10c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1a52:	d8 01       	movw	r26, r16
    1a54:	52 96       	adiw	r26, 0x12	; 18
    1a56:	8c 91       	ld	r24, X
    1a58:	52 97       	sbiw	r26, 0x12	; 18
    1a5a:	81 60       	ori	r24, 0x01	; 1
    1a5c:	52 96       	adiw	r26, 0x12	; 18
    1a5e:	8c 93       	st	X, r24
    1a60:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1a62:	6a 81       	ldd	r22, Y+2	; 0x02
    1a64:	7b 81       	ldd	r23, Y+3	; 0x03
    1a66:	1d 96       	adiw	r26, 0x0d	; 13
    1a68:	7c 93       	st	X, r23
    1a6a:	6e 93       	st	-X, r22
    1a6c:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1a6e:	6e 0d       	add	r22, r14
    1a70:	7f 1d       	adc	r23, r15
    1a72:	97 01       	movw	r18, r14
    1a74:	a7 01       	movw	r20, r14
    1a76:	c8 01       	movw	r24, r16
    1a78:	0e 94 be 0b 	call	0x177c	; 0x177c <prvInsertTimerInActiveList>
                        break;
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <prvProcessReceivedCommands+0x10c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    1a7e:	f8 01       	movw	r30, r16
    1a80:	82 89       	ldd	r24, Z+18	; 0x12
    1a82:	81 fd       	sbrc	r24, 1
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <prvProcessReceivedCommands+0x108>
                            {
                                vPortFree( pxTimer );
    1a86:	c8 01       	movw	r24, r16
    1a88:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vPortFree>
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <prvProcessReceivedCommands+0x10c>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1a8e:	8e 7f       	andi	r24, 0xFE	; 254
    1a90:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	be 01       	movw	r22, r28
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xTimerQueue>
    1aa0:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xTimerQueue+0x1>
    1aa4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <xQueueReceive>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	79 cf       	rjmp	.-270    	; 0x199e <prvProcessReceivedCommands+0x18>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    1aac:	26 96       	adiw	r28, 0x06	; 6
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	08 95       	ret

00001ac6 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	1f 92       	push	r1
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <prvGetNextExpireTime>

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    1ad8:	69 81       	ldd	r22, Y+1	; 0x01
    1ada:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
    1ade:	0e 94 c3 0c 	call	0x1986	; 0x1986 <prvProcessReceivedCommands>
    1ae2:	f6 cf       	rjmp	.-20     	; 0x1ad0 <prvTimerTask+0xa>

00001ae4 <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    1aea:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xTimerQueue>
    1aee:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xTimerQueue+0x1>
    1af2:	89 2b       	or	r24, r25
    1af4:	e9 f4       	brne	.+58     	; 0x1b30 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    1af6:	82 e2       	ldi	r24, 0x22	; 34
    1af8:	97 e0       	ldi	r25, 0x07	; 7
    1afa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    1afe:	89 e1       	ldi	r24, 0x19	; 25
    1b00:	97 e0       	ldi	r25, 0x07	; 7
    1b02:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    1b06:	82 e2       	ldi	r24, 0x22	; 34
    1b08:	97 e0       	ldi	r25, 0x07	; 7
    1b0a:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <pxCurrentTimerList+0x1>
    1b0e:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    1b12:	89 e1       	ldi	r24, 0x19	; 25
    1b14:	97 e0       	ldi	r25, 0x07	; 7
    1b16:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxOverflowTimerList+0x1>
    1b1a:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxOverflowTimerList>

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	65 e0       	ldi	r22, 0x05	; 5
    1b22:	8a e0       	ldi	r24, 0x0A	; 10
    1b24:	0e 94 c2 03 	call	0x784	; 0x784 <xQueueGenericCreate>
    1b28:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <xTimerQueue+0x1>
    1b2c:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	08 95       	ret

00001b36 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
    1b36:	7f 92       	push	r7
    1b38:	8f 92       	push	r8
    1b3a:	9f 92       	push	r9
    1b3c:	af 92       	push	r10
    1b3e:	bf 92       	push	r11
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	4c 01       	movw	r8, r24
    1b52:	5b 01       	movw	r10, r22
    1b54:	74 2e       	mov	r7, r20
    1b56:	69 01       	movw	r12, r18
    1b58:	e7 01       	movw	r28, r14
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    1b5a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    1b5e:	99 82       	std	Y+1, r9	; 0x01
    1b60:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1b62:	bd 86       	std	Y+13, r11	; 0x0d
    1b64:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    1b66:	df 86       	std	Y+15, r13	; 0x0f
    1b68:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    1b6a:	19 8b       	std	Y+17, r17	; 0x11
    1b6c:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1b6e:	c7 01       	movw	r24, r14
    1b70:	02 96       	adiw	r24, 0x02	; 2
    1b72:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    1b76:	77 20       	and	r7, r7
    1b78:	19 f0       	breq	.+6      	; 0x1b80 <prvInitialiseNewTimer+0x4a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    1b7a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b7c:	84 60       	ori	r24, 0x04	; 4
    1b7e:	8a 8b       	std	Y+18, r24	; 0x12
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	ff 90       	pop	r15
    1b8a:	ef 90       	pop	r14
    1b8c:	df 90       	pop	r13
    1b8e:	cf 90       	pop	r12
    1b90:	bf 90       	pop	r11
    1b92:	af 90       	pop	r10
    1b94:	9f 90       	pop	r9
    1b96:	8f 90       	pop	r8
    1b98:	7f 90       	pop	r7
    1b9a:	08 95       	ret

00001b9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    1ba2:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    1ba6:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xTimerQueue>
    1baa:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xTimerQueue+0x1>
    1bae:	89 2b       	or	r24, r25
    1bb0:	91 f0       	breq	.+36     	; 0x1bd6 <xTimerCreateTimerTask+0x3a>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
    1bb2:	0f 2e       	mov	r0, r31
    1bb4:	f1 e1       	ldi	r31, 0x11	; 17
    1bb6:	ef 2e       	mov	r14, r31
    1bb8:	f7 e0       	ldi	r31, 0x07	; 7
    1bba:	ff 2e       	mov	r15, r31
    1bbc:	f0 2d       	mov	r31, r0
    1bbe:	01 e0       	ldi	r16, 0x01	; 1
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	44 e6       	ldi	r20, 0x64	; 100
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	66 e6       	ldi	r22, 0x66	; 102
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	83 e6       	ldi	r24, 0x63	; 99
    1bce:	9d e0       	ldi	r25, 0x0D	; 13
    1bd0:	0e 94 40 07 	call	0xe80	; 0xe80 <xTaskCreate>
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <xTimerCreateTimerTask+0x3c>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	ef 90       	pop	r14
    1bde:	08 95       	ret

00001be0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    1be0:	7f 92       	push	r7
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	6c 01       	movw	r12, r24
    1bfc:	5b 01       	movw	r10, r22
    1bfe:	74 2e       	mov	r7, r20
    1c00:	49 01       	movw	r8, r18
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    1c02:	83 e1       	ldi	r24, 0x13	; 19
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 9c 00 	call	0x138	; 0x138 <pvPortMalloc>
    1c0a:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	41 f0       	breq	.+16     	; 0x1c20 <xTimerCreate+0x40>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    1c10:	1a 8a       	std	Y+18, r1	; 0x12
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    1c12:	7c 01       	movw	r14, r24
    1c14:	94 01       	movw	r18, r8
    1c16:	47 2d       	mov	r20, r7
    1c18:	b5 01       	movw	r22, r10
    1c1a:	c6 01       	movw	r24, r12
    1c1c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
        }
    1c20:	ce 01       	movw	r24, r28
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	08 95       	ret

00001c3e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <xTimerGenericCommand+0xa>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <xTimerGenericCommand+0xc>
    1c4a:	1f 92       	push	r1
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1c50:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <xTimerQueue>
    1c54:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <xTimerQueue+0x1>
    1c58:	30 97       	sbiw	r30, 0x00	; 0
    1c5a:	71 f1       	breq	.+92     	; 0x1cb8 <xTimerGenericCommand+0x7a>
    1c5c:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1c5e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1c60:	5b 83       	std	Y+3, r21	; 0x03
    1c62:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1c64:	9d 83       	std	Y+5, r25	; 0x05
    1c66:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1c68:	66 30       	cpi	r22, 0x06	; 6
    1c6a:	ec f4       	brge	.+58     	; 0x1ca6 <xTimerGenericCommand+0x68>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1c6c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <xTaskGetSchedulerState>
    1c70:	82 30       	cpi	r24, 0x02	; 2
    1c72:	61 f4       	brne	.+24     	; 0x1c8c <xTimerGenericCommand+0x4e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	a8 01       	movw	r20, r16
    1c78:	be 01       	movw	r22, r28
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xTimerQueue>
    1c82:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xTimerQueue+0x1>
    1c86:	0e 94 03 04 	call	0x806	; 0x806 <xQueueGenericSend>
    1c8a:	17 c0       	rjmp	.+46     	; 0x1cba <xTimerGenericCommand+0x7c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	be 01       	movw	r22, r28
    1c94:	6f 5f       	subi	r22, 0xFF	; 255
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xTimerQueue>
    1c9c:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xTimerQueue+0x1>
    1ca0:	0e 94 03 04 	call	0x806	; 0x806 <xQueueGenericSend>
    1ca4:	0a c0       	rjmp	.+20     	; 0x1cba <xTimerGenericCommand+0x7c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	ad 01       	movw	r20, r26
    1caa:	be 01       	movw	r22, r28
    1cac:	6f 5f       	subi	r22, 0xFF	; 255
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	cf 01       	movw	r24, r30
    1cb2:	0e 94 95 04 	call	0x92a	; 0x92a <xQueueGenericSendFromISR>
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <xTimerGenericCommand+0x7c>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	08 95       	ret

00001cce <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    1cce:	88 30       	cpi	r24, 0x08	; 8
    1cd0:	00 f5       	brcc	.+64     	; 0x1d12 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
    1cd2:	61 11       	cpse	r22, r1
    1cd4:	0e c0       	rjmp	.+28     	; 0x1cf2 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
    1cd6:	4a b3       	in	r20, 0x1a	; 26
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	b9 01       	movw	r22, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <DIO_setPinDir+0x16>
    1ce0:	66 0f       	add	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	8a 95       	dec	r24
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <DIO_setPinDir+0x12>
    1ce8:	cb 01       	movw	r24, r22
    1cea:	80 95       	com	r24
    1cec:	84 23       	and	r24, r20
    1cee:	8a bb       	out	0x1a, r24	; 26
    1cf0:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    1cf2:	61 30       	cpi	r22, 0x01	; 1
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <DIO_setPinDir+0x2a>
    1cf6:	75 c0       	rjmp	.+234    	; 0x1de2 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
    1cf8:	4a b3       	in	r20, 0x1a	; 26
    1cfa:	21 e0       	ldi	r18, 0x01	; 1
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	b9 01       	movw	r22, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <DIO_setPinDir+0x38>
    1d02:	66 0f       	add	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	8a 95       	dec	r24
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <DIO_setPinDir+0x34>
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	84 2b       	or	r24, r20
    1d0e:	8a bb       	out	0x1a, r24	; 26
    1d10:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    1d12:	98 ef       	ldi	r25, 0xF8	; 248
    1d14:	98 0f       	add	r25, r24
    1d16:	98 30       	cpi	r25, 0x08	; 8
    1d18:	00 f5       	brcc	.+64     	; 0x1d5a <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
    1d1a:	61 11       	cpse	r22, r1
    1d1c:	0e c0       	rjmp	.+28     	; 0x1d3a <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
    1d1e:	47 b3       	in	r20, 0x17	; 23
    1d20:	21 e0       	ldi	r18, 0x01	; 1
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	b9 01       	movw	r22, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_setPinDir+0x5e>
    1d28:	66 0f       	add	r22, r22
    1d2a:	77 1f       	adc	r23, r23
    1d2c:	9a 95       	dec	r25
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <DIO_setPinDir+0x5a>
    1d30:	cb 01       	movw	r24, r22
    1d32:	80 95       	com	r24
    1d34:	84 23       	and	r24, r20
    1d36:	87 bb       	out	0x17, r24	; 23
    1d38:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    1d3a:	61 30       	cpi	r22, 0x01	; 1
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <DIO_setPinDir+0x72>
    1d3e:	51 c0       	rjmp	.+162    	; 0x1de2 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
    1d40:	47 b3       	in	r20, 0x17	; 23
    1d42:	21 e0       	ldi	r18, 0x01	; 1
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	b9 01       	movw	r22, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_setPinDir+0x80>
    1d4a:	66 0f       	add	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	9a 95       	dec	r25
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_setPinDir+0x7c>
    1d52:	cb 01       	movw	r24, r22
    1d54:	84 2b       	or	r24, r20
    1d56:	87 bb       	out	0x17, r24	; 23
    1d58:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    1d5a:	90 ef       	ldi	r25, 0xF0	; 240
    1d5c:	98 0f       	add	r25, r24
    1d5e:	98 30       	cpi	r25, 0x08	; 8
    1d60:	f8 f4       	brcc	.+62     	; 0x1da0 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
    1d62:	61 11       	cpse	r22, r1
    1d64:	0e c0       	rjmp	.+28     	; 0x1d82 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
    1d66:	44 b3       	in	r20, 0x14	; 20
    1d68:	21 e0       	ldi	r18, 0x01	; 1
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	b9 01       	movw	r22, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_setPinDir+0xa6>
    1d70:	66 0f       	add	r22, r22
    1d72:	77 1f       	adc	r23, r23
    1d74:	9a 95       	dec	r25
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_setPinDir+0xa2>
    1d78:	cb 01       	movw	r24, r22
    1d7a:	80 95       	com	r24
    1d7c:	84 23       	and	r24, r20
    1d7e:	84 bb       	out	0x14, r24	; 20
    1d80:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    1d82:	61 30       	cpi	r22, 0x01	; 1
    1d84:	71 f5       	brne	.+92     	; 0x1de2 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
    1d86:	44 b3       	in	r20, 0x14	; 20
    1d88:	21 e0       	ldi	r18, 0x01	; 1
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_setPinDir+0xc6>
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	9a 95       	dec	r25
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_setPinDir+0xc2>
    1d98:	cb 01       	movw	r24, r22
    1d9a:	84 2b       	or	r24, r20
    1d9c:	84 bb       	out	0x14, r24	; 20
    1d9e:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    1da0:	88 51       	subi	r24, 0x18	; 24
    1da2:	88 30       	cpi	r24, 0x08	; 8
    1da4:	f0 f4       	brcc	.+60     	; 0x1de2 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
    1da6:	61 11       	cpse	r22, r1
    1da8:	0e c0       	rjmp	.+28     	; 0x1dc6 <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRD,pinNum);
    1daa:	41 b3       	in	r20, 0x11	; 17
    1dac:	21 e0       	ldi	r18, 0x01	; 1
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	b9 01       	movw	r22, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_setPinDir+0xea>
    1db4:	66 0f       	add	r22, r22
    1db6:	77 1f       	adc	r23, r23
    1db8:	8a 95       	dec	r24
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_setPinDir+0xe6>
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	80 95       	com	r24
    1dc0:	84 23       	and	r24, r20
    1dc2:	81 bb       	out	0x11, r24	; 17
    1dc4:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
    1dc6:	61 30       	cpi	r22, 0x01	; 1
    1dc8:	61 f4       	brne	.+24     	; 0x1de2 <DIO_setPinDir+0x114>
			SET_BIT(DDRD,pinNum);
    1dca:	41 b3       	in	r20, 0x11	; 17
    1dcc:	21 e0       	ldi	r18, 0x01	; 1
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	b9 01       	movw	r22, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <DIO_setPinDir+0x10a>
    1dd4:	66 0f       	add	r22, r22
    1dd6:	77 1f       	adc	r23, r23
    1dd8:	8a 95       	dec	r24
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <DIO_setPinDir+0x106>
    1ddc:	cb 01       	movw	r24, r22
    1dde:	84 2b       	or	r24, r20
    1de0:	81 bb       	out	0x11, r24	; 17
    1de2:	08 95       	ret

00001de4 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
    1de4:	88 30       	cpi	r24, 0x08	; 8
    1de6:	00 f5       	brcc	.+64     	; 0x1e28 <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
    1de8:	61 11       	cpse	r22, r1
    1dea:	0e c0       	rjmp	.+28     	; 0x1e08 <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
    1dec:	4b b3       	in	r20, 0x1b	; 27
    1dee:	21 e0       	ldi	r18, 0x01	; 1
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	b9 01       	movw	r22, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <DIO_setPinValue+0x16>
    1df6:	66 0f       	add	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	8a 95       	dec	r24
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <DIO_setPinValue+0x12>
    1dfe:	cb 01       	movw	r24, r22
    1e00:	80 95       	com	r24
    1e02:	84 23       	and	r24, r20
    1e04:	8b bb       	out	0x1b, r24	; 27
    1e06:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1e08:	61 30       	cpi	r22, 0x01	; 1
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <DIO_setPinValue+0x2a>
    1e0c:	75 c0       	rjmp	.+234    	; 0x1ef8 <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
    1e0e:	4b b3       	in	r20, 0x1b	; 27
    1e10:	21 e0       	ldi	r18, 0x01	; 1
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	b9 01       	movw	r22, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <DIO_setPinValue+0x38>
    1e18:	66 0f       	add	r22, r22
    1e1a:	77 1f       	adc	r23, r23
    1e1c:	8a 95       	dec	r24
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <DIO_setPinValue+0x34>
    1e20:	cb 01       	movw	r24, r22
    1e22:	84 2b       	or	r24, r20
    1e24:	8b bb       	out	0x1b, r24	; 27
    1e26:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
    1e28:	98 ef       	ldi	r25, 0xF8	; 248
    1e2a:	98 0f       	add	r25, r24
    1e2c:	98 30       	cpi	r25, 0x08	; 8
    1e2e:	00 f5       	brcc	.+64     	; 0x1e70 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
    1e30:	61 11       	cpse	r22, r1
    1e32:	0e c0       	rjmp	.+28     	; 0x1e50 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
    1e34:	48 b3       	in	r20, 0x18	; 24
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	b9 01       	movw	r22, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_setPinValue+0x5e>
    1e3e:	66 0f       	add	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	9a 95       	dec	r25
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_setPinValue+0x5a>
    1e46:	cb 01       	movw	r24, r22
    1e48:	80 95       	com	r24
    1e4a:	84 23       	and	r24, r20
    1e4c:	88 bb       	out	0x18, r24	; 24
    1e4e:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1e50:	61 30       	cpi	r22, 0x01	; 1
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <DIO_setPinValue+0x72>
    1e54:	51 c0       	rjmp	.+162    	; 0x1ef8 <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
    1e56:	48 b3       	in	r20, 0x18	; 24
    1e58:	21 e0       	ldi	r18, 0x01	; 1
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	b9 01       	movw	r22, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <DIO_setPinValue+0x80>
    1e60:	66 0f       	add	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	9a 95       	dec	r25
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <DIO_setPinValue+0x7c>
    1e68:	cb 01       	movw	r24, r22
    1e6a:	84 2b       	or	r24, r20
    1e6c:	88 bb       	out	0x18, r24	; 24
    1e6e:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
    1e70:	90 ef       	ldi	r25, 0xF0	; 240
    1e72:	98 0f       	add	r25, r24
    1e74:	98 30       	cpi	r25, 0x08	; 8
    1e76:	f8 f4       	brcc	.+62     	; 0x1eb6 <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
    1e78:	61 11       	cpse	r22, r1
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
    1e7c:	45 b3       	in	r20, 0x15	; 21
    1e7e:	21 e0       	ldi	r18, 0x01	; 1
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	b9 01       	movw	r22, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DIO_setPinValue+0xa6>
    1e86:	66 0f       	add	r22, r22
    1e88:	77 1f       	adc	r23, r23
    1e8a:	9a 95       	dec	r25
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DIO_setPinValue+0xa2>
    1e8e:	cb 01       	movw	r24, r22
    1e90:	80 95       	com	r24
    1e92:	84 23       	and	r24, r20
    1e94:	85 bb       	out	0x15, r24	; 21
    1e96:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1e98:	61 30       	cpi	r22, 0x01	; 1
    1e9a:	71 f5       	brne	.+92     	; 0x1ef8 <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
    1e9c:	45 b3       	in	r20, 0x15	; 21
    1e9e:	21 e0       	ldi	r18, 0x01	; 1
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	b9 01       	movw	r22, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <DIO_setPinValue+0xc6>
    1ea6:	66 0f       	add	r22, r22
    1ea8:	77 1f       	adc	r23, r23
    1eaa:	9a 95       	dec	r25
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <DIO_setPinValue+0xc2>
    1eae:	cb 01       	movw	r24, r22
    1eb0:	84 2b       	or	r24, r20
    1eb2:	85 bb       	out	0x15, r24	; 21
    1eb4:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
    1eb6:	88 51       	subi	r24, 0x18	; 24
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	f0 f4       	brcc	.+60     	; 0x1ef8 <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
    1ebc:	61 11       	cpse	r22, r1
    1ebe:	0e c0       	rjmp	.+28     	; 0x1edc <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
    1ec0:	42 b3       	in	r20, 0x12	; 18
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <DIO_setPinValue+0xea>
    1eca:	66 0f       	add	r22, r22
    1ecc:	77 1f       	adc	r23, r23
    1ece:	8a 95       	dec	r24
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <DIO_setPinValue+0xe6>
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	82 bb       	out	0x12, r24	; 18
    1eda:	08 95       	ret
		}
		else if(level==DIO_HIGH){
    1edc:	61 30       	cpi	r22, 0x01	; 1
    1ede:	61 f4       	brne	.+24     	; 0x1ef8 <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
    1ee0:	42 b3       	in	r20, 0x12	; 18
    1ee2:	21 e0       	ldi	r18, 0x01	; 1
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_setPinValue+0x10a>
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	8a 95       	dec	r24
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <DIO_setPinValue+0x106>
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	84 2b       	or	r24, r20
    1ef6:	82 bb       	out	0x12, r24	; 18
    1ef8:	08 95       	ret

00001efa <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
    1efa:	88 30       	cpi	r24, 0x08	; 8
    1efc:	58 f4       	brcc	.+22     	; 0x1f14 <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
    1efe:	29 b3       	in	r18, 0x19	; 25
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	a9 01       	movw	r20, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_readPinValue+0x10>
    1f06:	55 95       	asr	r21
    1f08:	47 95       	ror	r20
    1f0a:	8a 95       	dec	r24
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_readPinValue+0xc>
    1f0e:	ca 01       	movw	r24, r20
    1f10:	81 70       	andi	r24, 0x01	; 1
    1f12:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
    1f14:	28 ef       	ldi	r18, 0xF8	; 248
    1f16:	28 0f       	add	r18, r24
    1f18:	28 30       	cpi	r18, 0x08	; 8
    1f1a:	48 f4       	brcc	.+18     	; 0x1f2e <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
    1f1c:	86 b3       	in	r24, 0x16	; 22
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <DIO_readPinValue+0x2c>
    1f22:	95 95       	asr	r25
    1f24:	87 95       	ror	r24
    1f26:	2a 95       	dec	r18
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <DIO_readPinValue+0x28>
    1f2a:	81 70       	andi	r24, 0x01	; 1
    1f2c:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
    1f2e:	20 ef       	ldi	r18, 0xF0	; 240
    1f30:	28 0f       	add	r18, r24
    1f32:	28 30       	cpi	r18, 0x08	; 8
    1f34:	48 f4       	brcc	.+18     	; 0x1f48 <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
    1f36:	83 b3       	in	r24, 0x13	; 19
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <DIO_readPinValue+0x46>
    1f3c:	95 95       	asr	r25
    1f3e:	87 95       	ror	r24
    1f40:	2a 95       	dec	r18
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <DIO_readPinValue+0x42>
    1f44:	81 70       	andi	r24, 0x01	; 1
    1f46:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
    1f48:	28 ee       	ldi	r18, 0xE8	; 232
    1f4a:	28 0f       	add	r18, r24
    1f4c:	28 30       	cpi	r18, 0x08	; 8
    1f4e:	50 f4       	brcc	.+20     	; 0x1f64 <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
    1f50:	90 b3       	in	r25, 0x10	; 16
    1f52:	89 2f       	mov	r24, r25
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <DIO_readPinValue+0x62>
    1f58:	95 95       	asr	r25
    1f5a:	87 95       	ror	r24
    1f5c:	2a 95       	dec	r18
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <DIO_readPinValue+0x5e>
    1f60:	81 70       	andi	r24, 0x01	; 1
    1f62:	08 95       	ret
	}
}
    1f64:	08 95       	ret

00001f66 <DIO_togglePinValue>:

void DIO_togglePinValue(u8 pinNum){
    1f66:	cf 93       	push	r28
    1f68:	c8 2f       	mov	r28, r24
	DIO_setPinValue(pinNum,!DIO_readPinValue(pinNum));
    1f6a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_readPinValue>
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	81 11       	cpse	r24, r1
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	8c 2f       	mov	r24, r28
    1f76:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_setPinValue>
}
    1f7a:	cf 91       	pop	r28
    1f7c:	08 95       	ret

00001f7e <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
    1f7e:	1f 92       	push	r1
    1f80:	0f 92       	push	r0
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	0f 92       	push	r0
    1f86:	11 24       	eor	r1, r1
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    1fa0:	e0 91 33 07 	lds	r30, 0x0733	; 0x800733 <EXT_int0Func>
    1fa4:	f0 91 34 07 	lds	r31, 0x0734	; 0x800734 <EXT_int0Func+0x1>
    1fa8:	09 95       	icall
    1faa:	ff 91       	pop	r31
    1fac:	ef 91       	pop	r30
    1fae:	bf 91       	pop	r27
    1fb0:	af 91       	pop	r26
    1fb2:	9f 91       	pop	r25
    1fb4:	8f 91       	pop	r24
    1fb6:	7f 91       	pop	r23
    1fb8:	6f 91       	pop	r22
    1fba:	5f 91       	pop	r21
    1fbc:	4f 91       	pop	r20
    1fbe:	3f 91       	pop	r19
    1fc0:	2f 91       	pop	r18
    1fc2:	0f 90       	pop	r0
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	0f 90       	pop	r0
    1fc8:	1f 90       	pop	r1
    1fca:	18 95       	reti

00001fcc <__vector_2>:
    1fcc:	1f 92       	push	r1
    1fce:	0f 92       	push	r0
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	0f 92       	push	r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	2f 93       	push	r18
    1fd8:	3f 93       	push	r19
    1fda:	4f 93       	push	r20
    1fdc:	5f 93       	push	r21
    1fde:	6f 93       	push	r22
    1fe0:	7f 93       	push	r23
    1fe2:	8f 93       	push	r24
    1fe4:	9f 93       	push	r25
    1fe6:	af 93       	push	r26
    1fe8:	bf 93       	push	r27
    1fea:	ef 93       	push	r30
    1fec:	ff 93       	push	r31
    1fee:	e0 91 2f 07 	lds	r30, 0x072F	; 0x80072f <EXT_int1Func>
    1ff2:	f0 91 30 07 	lds	r31, 0x0730	; 0x800730 <EXT_int1Func+0x1>
    1ff6:	09 95       	icall
    1ff8:	ff 91       	pop	r31
    1ffa:	ef 91       	pop	r30
    1ffc:	bf 91       	pop	r27
    1ffe:	af 91       	pop	r26
    2000:	9f 91       	pop	r25
    2002:	8f 91       	pop	r24
    2004:	7f 91       	pop	r23
    2006:	6f 91       	pop	r22
    2008:	5f 91       	pop	r21
    200a:	4f 91       	pop	r20
    200c:	3f 91       	pop	r19
    200e:	2f 91       	pop	r18
    2010:	0f 90       	pop	r0
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	0f 90       	pop	r0
    2016:	1f 90       	pop	r1
    2018:	18 95       	reti

0000201a <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
    201a:	1f 92       	push	r1
    201c:	0f 92       	push	r0
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	0f 92       	push	r0
    2022:	11 24       	eor	r1, r1
    2024:	2f 93       	push	r18
    2026:	3f 93       	push	r19
    2028:	4f 93       	push	r20
    202a:	5f 93       	push	r21
    202c:	6f 93       	push	r22
    202e:	7f 93       	push	r23
    2030:	8f 93       	push	r24
    2032:	9f 93       	push	r25
    2034:	af 93       	push	r26
    2036:	bf 93       	push	r27
    2038:	ef 93       	push	r30
    203a:	ff 93       	push	r31
	EXT_int2Func();
    203c:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <EXT_int2Func>
    2040:	f0 91 32 07 	lds	r31, 0x0732	; 0x800732 <EXT_int2Func+0x1>
    2044:	09 95       	icall
    2046:	ff 91       	pop	r31
    2048:	ef 91       	pop	r30
    204a:	bf 91       	pop	r27
    204c:	af 91       	pop	r26
    204e:	9f 91       	pop	r25
    2050:	8f 91       	pop	r24
    2052:	7f 91       	pop	r23
    2054:	6f 91       	pop	r22
    2056:	5f 91       	pop	r21
    2058:	4f 91       	pop	r20
    205a:	3f 91       	pop	r19
    205c:	2f 91       	pop	r18
    205e:	0f 90       	pop	r0
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	0f 90       	pop	r0
    2064:	1f 90       	pop	r1
    2066:	18 95       	reti

00002068 <__vector_11>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
    2072:	2f 93       	push	r18
    2074:	3f 93       	push	r19
    2076:	4f 93       	push	r20
    2078:	5f 93       	push	r21
    207a:	6f 93       	push	r22
    207c:	7f 93       	push	r23
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25
    2082:	af 93       	push	r26
    2084:	bf 93       	push	r27
    2086:	ef 93       	push	r30
    2088:	ff 93       	push	r31
    208a:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <TIMER0_OvFunc>
    208e:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <TIMER0_OvFunc+0x1>
    2092:	09 95       	icall
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	bf 91       	pop	r27
    209a:	af 91       	pop	r26
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	7f 91       	pop	r23
    20a2:	6f 91       	pop	r22
    20a4:	5f 91       	pop	r21
    20a6:	4f 91       	pop	r20
    20a8:	3f 91       	pop	r19
    20aa:	2f 91       	pop	r18
    20ac:	0f 90       	pop	r0
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	0f 90       	pop	r0
    20b2:	1f 90       	pop	r1
    20b4:	18 95       	reti

000020b6 <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	2f 93       	push	r18
    20c2:	3f 93       	push	r19
    20c4:	4f 93       	push	r20
    20c6:	5f 93       	push	r21
    20c8:	6f 93       	push	r22
    20ca:	7f 93       	push	r23
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	af 93       	push	r26
    20d2:	bf 93       	push	r27
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
	TIMER0_CTCFunc();
    20d8:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <TIMER0_CTCFunc>
    20dc:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <TIMER0_CTCFunc+0x1>
    20e0:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
    20e2:	ff 91       	pop	r31
    20e4:	ef 91       	pop	r30
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	0f 90       	pop	r0
    2100:	1f 90       	pop	r1
    2102:	18 95       	reti

00002104 <__vector_6>:
}

//Vector Table Function that belongs to TIMER1
//number(in vector table) - 1
void __vector_6() __attribute__((signal));
void __vector_6(){
    2104:	1f 92       	push	r1
    2106:	0f 92       	push	r0
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	0f 92       	push	r0
    210c:	11 24       	eor	r1, r1
    210e:	2f 93       	push	r18
    2110:	3f 93       	push	r19
    2112:	4f 93       	push	r20
    2114:	5f 93       	push	r21
    2116:	6f 93       	push	r22
    2118:	7f 93       	push	r23
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	af 93       	push	r26
    2120:	bf 93       	push	r27
    2122:	ef 93       	push	r30
    2124:	ff 93       	push	r31
	TIMER1_IcuFunc();
    2126:	e0 91 39 07 	lds	r30, 0x0739	; 0x800739 <TIMER1_IcuFunc>
    212a:	f0 91 3a 07 	lds	r31, 0x073A	; 0x80073a <TIMER1_IcuFunc+0x1>
    212e:	09 95       	icall
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_13>:
}

//Vector Table Function that belongs to UART_INT
//number(in vector table) - 1
void __vector_13() __attribute__((signal));
void __vector_13(){
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
	UART_INTFunc();
    2174:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <UART_INTFunc>
    2178:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <UART_INTFunc+0x1>
    217c:	09 95       	icall
    217e:	ff 91       	pop	r31
    2180:	ef 91       	pop	r30
    2182:	bf 91       	pop	r27
    2184:	af 91       	pop	r26
    2186:	9f 91       	pop	r25
    2188:	8f 91       	pop	r24
    218a:	7f 91       	pop	r23
    218c:	6f 91       	pop	r22
    218e:	5f 91       	pop	r21
    2190:	4f 91       	pop	r20
    2192:	3f 91       	pop	r19
    2194:	2f 91       	pop	r18
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	0f 90       	pop	r0
    219c:	1f 90       	pop	r1
    219e:	18 95       	reti

000021a0 <__udivmodhi4>:
    21a0:	aa 1b       	sub	r26, r26
    21a2:	bb 1b       	sub	r27, r27
    21a4:	51 e1       	ldi	r21, 0x11	; 17
    21a6:	07 c0       	rjmp	.+14     	; 0x21b6 <__udivmodhi4_ep>

000021a8 <__udivmodhi4_loop>:
    21a8:	aa 1f       	adc	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	a6 17       	cp	r26, r22
    21ae:	b7 07       	cpc	r27, r23
    21b0:	10 f0       	brcs	.+4      	; 0x21b6 <__udivmodhi4_ep>
    21b2:	a6 1b       	sub	r26, r22
    21b4:	b7 0b       	sbc	r27, r23

000021b6 <__udivmodhi4_ep>:
    21b6:	88 1f       	adc	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	5a 95       	dec	r21
    21bc:	a9 f7       	brne	.-22     	; 0x21a8 <__udivmodhi4_loop>
    21be:	80 95       	com	r24
    21c0:	90 95       	com	r25
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	08 95       	ret

000021c8 <__tablejump2__>:
    21c8:	ee 0f       	add	r30, r30
    21ca:	ff 1f       	adc	r31, r31
    21cc:	05 90       	lpm	r0, Z+
    21ce:	f4 91       	lpm	r31, Z
    21d0:	e0 2d       	mov	r30, r0
    21d2:	09 94       	ijmp

000021d4 <memcpy>:
    21d4:	fb 01       	movw	r30, r22
    21d6:	dc 01       	movw	r26, r24
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <memcpy+0xa>
    21da:	01 90       	ld	r0, Z+
    21dc:	0d 92       	st	X+, r0
    21de:	41 50       	subi	r20, 0x01	; 1
    21e0:	50 40       	sbci	r21, 0x00	; 0
    21e2:	d8 f7       	brcc	.-10     	; 0x21da <memcpy+0x6>
    21e4:	08 95       	ret

000021e6 <_exit>:
    21e6:	f8 94       	cli

000021e8 <__stop_program>:
    21e8:	ff cf       	rjmp	.-2      	; 0x21e8 <__stop_program>
