
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dce  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000882  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088c  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b2  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00003902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_1>
   8:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_2>
   c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_10>
  2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
 */ 

#include "Sess23CTC/sess_INT.h"

int main(){
	source_code();
  7c:	0e 94 43 00 	call	0x86	; 0x86 <source_code>
	return 0;
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <source_code>:

#include "Sess23CTC/PWM/PWM_INT.h"

int source_code()
{
	DIO_setPinDir(DIO_PINB3,DIO_OUTPUT);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	8b e0       	ldi	r24, 0x0B	; 11
  8a:	0e 94 7a 00 	call	0xf4	; 0xf4 <DIO_setPinDir>
	
	//high
	DIO_setPinDir(DIO_PIND6,DIO_INPUT);
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	8e e1       	ldi	r24, 0x1E	; 30
  92:	0e 94 7a 00 	call	0xf4	; 0xf4 <DIO_setPinDir>
	u8 state_high;
	
	//low
	DIO_setPinDir(DIO_PIND0,DIO_INPUT);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	0e 94 7a 00 	call	0xf4	; 0xf4 <DIO_setPinDir>
	u8 state_low;
	
	GI_enable();
  9e:	0e 94 b0 01 	call	0x360	; 0x360 <GI_enable>
	
	TIMER0_initFPWM();
  a2:	0e 94 b4 01 	call	0x368	; 0x368 <TIMER0_initFPWM>
	
	
	u16 lumin = 0;
	
	TIMER0_start(TIMER0_DIV64);
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	0e 94 c1 01 	call	0x382	; 0x382 <TIMER0_start>
	GI_enable();
	
	TIMER0_initFPWM();
	
	
	u16 lumin = 0;
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
	
	TIMER0_start(TIMER0_DIV64);
	
	while (1)
	{
		state_high=DIO_readPinValue(DIO_PIND6);
  b0:	8e e1       	ldi	r24, 0x1E	; 30
  b2:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_readPinValue>
		if (state_high==DIO_HIGH)
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	71 f4       	brne	.+28     	; 0xd6 <source_code+0x50>
		{
			lumin+=20;
  ba:	64 96       	adiw	r28, 0x14	; 20
			if (lumin>=255)
  bc:	cf 3f       	cpi	r28, 0xFF	; 255
  be:	d1 05       	cpc	r29, r1
  c0:	10 f0       	brcs	.+4      	; 0xc6 <source_code+0x40>
			{
				lumin = 255;
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d0 e0       	ldi	r29, 0x00	; 0
			}
			TIMER0_setOCR(lumin);
  c6:	8c 2f       	mov	r24, r28
  c8:	0e 94 09 02 	call	0x412	; 0x412 <TIMER0_setOCR>
			while (DIO_readPinValue(DIO_PIND6)==DIO_HIGH);
  cc:	8e e1       	ldi	r24, 0x1E	; 30
  ce:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_readPinValue>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	d9 f3       	breq	.-10     	; 0xcc <source_code+0x46>
		}
		
		state_low=DIO_readPinValue(DIO_PIND0);
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_readPinValue>
		if (state_low==DIO_HIGH)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	41 f7       	brne	.-48     	; 0xb0 <source_code+0x2a>
		{
			lumin-=20;
  e0:	64 97       	sbiw	r28, 0x14	; 20
			if (lumin<=0)
			{
				lumin = 0;
			}
			TIMER0_setOCR(lumin);
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 09 02 	call	0x412	; 0x412 <TIMER0_setOCR>
			while(DIO_readPinValue(DIO_PIND0)==DIO_HIGH);
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_readPinValue>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	d9 f3       	breq	.-10     	; 0xe8 <source_code+0x62>
  f2:	de cf       	rjmp	.-68     	; 0xb0 <source_code+0x2a>

000000f4 <DIO_setPinDir>:
		pinNum=pinNum-24;
		if (level==DIO_LOW){
			CLEAR_BIT(PORTD,pinNum);
		}
		else if(level==DIO_HIGH){
			SET_BIT(PORTD,pinNum);
  f4:	88 30       	cpi	r24, 0x08	; 8
  f6:	00 f5       	brcc	.+64     	; 0x138 <DIO_setPinDir+0x44>
  f8:	61 11       	cpse	r22, r1
  fa:	0e c0       	rjmp	.+28     	; 0x118 <DIO_setPinDir+0x24>
  fc:	4a b3       	in	r20, 0x1a	; 26
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	b9 01       	movw	r22, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_setPinDir+0x16>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_setPinDir+0x12>
 10e:	cb 01       	movw	r24, r22
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	8a bb       	out	0x1a, r24	; 26
 116:	08 95       	ret
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	09 f0       	breq	.+2      	; 0x11e <DIO_setPinDir+0x2a>
 11c:	75 c0       	rjmp	.+234    	; 0x208 <DIO_setPinDir+0x114>
 11e:	4a b3       	in	r20, 0x1a	; 26
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_setPinDir+0x38>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_setPinDir+0x34>
 130:	cb 01       	movw	r24, r22
 132:	84 2b       	or	r24, r20
 134:	8a bb       	out	0x1a, r24	; 26
 136:	08 95       	ret
 138:	98 ef       	ldi	r25, 0xF8	; 248
 13a:	98 0f       	add	r25, r24
 13c:	98 30       	cpi	r25, 0x08	; 8
 13e:	00 f5       	brcc	.+64     	; 0x180 <DIO_setPinDir+0x8c>
 140:	61 11       	cpse	r22, r1
 142:	0e c0       	rjmp	.+28     	; 0x160 <DIO_setPinDir+0x6c>
 144:	47 b3       	in	r20, 0x17	; 23
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_setPinDir+0x5e>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	9a 95       	dec	r25
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_setPinDir+0x5a>
 156:	cb 01       	movw	r24, r22
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	87 bb       	out	0x17, r24	; 23
 15e:	08 95       	ret
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <DIO_setPinDir+0x72>
 164:	51 c0       	rjmp	.+162    	; 0x208 <DIO_setPinDir+0x114>
 166:	47 b3       	in	r20, 0x17	; 23
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	b9 01       	movw	r22, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_setPinDir+0x80>
 170:	66 0f       	add	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	9a 95       	dec	r25
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_setPinDir+0x7c>
 178:	cb 01       	movw	r24, r22
 17a:	84 2b       	or	r24, r20
 17c:	87 bb       	out	0x17, r24	; 23
 17e:	08 95       	ret
 180:	90 ef       	ldi	r25, 0xF0	; 240
 182:	98 0f       	add	r25, r24
 184:	98 30       	cpi	r25, 0x08	; 8
 186:	f8 f4       	brcc	.+62     	; 0x1c6 <DIO_setPinDir+0xd2>
 188:	61 11       	cpse	r22, r1
 18a:	0e c0       	rjmp	.+28     	; 0x1a8 <DIO_setPinDir+0xb4>
 18c:	44 b3       	in	r20, 0x14	; 20
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinDir+0xa6>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	9a 95       	dec	r25
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinDir+0xa2>
 19e:	cb 01       	movw	r24, r22
 1a0:	80 95       	com	r24
 1a2:	84 23       	and	r24, r20
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	71 f5       	brne	.+92     	; 0x208 <DIO_setPinDir+0x114>
 1ac:	44 b3       	in	r20, 0x14	; 20
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setPinDir+0xc6>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	9a 95       	dec	r25
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setPinDir+0xc2>
 1be:	cb 01       	movw	r24, r22
 1c0:	84 2b       	or	r24, r20
 1c2:	84 bb       	out	0x14, r24	; 20
 1c4:	08 95       	ret
 1c6:	88 51       	subi	r24, 0x18	; 24
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	f0 f4       	brcc	.+60     	; 0x208 <DIO_setPinDir+0x114>
 1cc:	61 11       	cpse	r22, r1
 1ce:	0e c0       	rjmp	.+28     	; 0x1ec <DIO_setPinDir+0xf8>
 1d0:	44 b3       	in	r20, 0x14	; 20
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_setPinDir+0xea>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_setPinDir+0xe6>
 1e2:	cb 01       	movw	r24, r22
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	84 bb       	out	0x14, r24	; 20
 1ea:	08 95       	ret
 1ec:	61 30       	cpi	r22, 0x01	; 1
 1ee:	61 f4       	brne	.+24     	; 0x208 <DIO_setPinDir+0x114>
 1f0:	44 b3       	in	r20, 0x14	; 20
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_setPinDir+0x10a>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_setPinDir+0x106>
 202:	cb 01       	movw	r24, r22
 204:	84 2b       	or	r24, r20
 206:	84 bb       	out	0x14, r24	; 20
 208:	08 95       	ret

0000020a <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 20a:	88 30       	cpi	r24, 0x08	; 8
 20c:	58 f4       	brcc	.+22     	; 0x224 <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
 20e:	29 b3       	in	r18, 0x19	; 25
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	a9 01       	movw	r20, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_readPinValue+0x10>
 216:	55 95       	asr	r21
 218:	47 95       	ror	r20
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_readPinValue+0xc>
 21e:	ca 01       	movw	r24, r20
 220:	81 70       	andi	r24, 0x01	; 1
 222:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 224:	28 ef       	ldi	r18, 0xF8	; 248
 226:	28 0f       	add	r18, r24
 228:	28 30       	cpi	r18, 0x08	; 8
 22a:	48 f4       	brcc	.+18     	; 0x23e <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 22c:	86 b3       	in	r24, 0x16	; 22
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_readPinValue+0x2c>
 232:	95 95       	asr	r25
 234:	87 95       	ror	r24
 236:	2a 95       	dec	r18
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_readPinValue+0x28>
 23a:	81 70       	andi	r24, 0x01	; 1
 23c:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 23e:	20 ef       	ldi	r18, 0xF0	; 240
 240:	28 0f       	add	r18, r24
 242:	28 30       	cpi	r18, 0x08	; 8
 244:	48 f4       	brcc	.+18     	; 0x258 <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 246:	83 b3       	in	r24, 0x13	; 19
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_readPinValue+0x46>
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	2a 95       	dec	r18
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_readPinValue+0x42>
 254:	81 70       	andi	r24, 0x01	; 1
 256:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 258:	28 ee       	ldi	r18, 0xE8	; 232
 25a:	28 0f       	add	r18, r24
 25c:	28 30       	cpi	r18, 0x08	; 8
 25e:	50 f4       	brcc	.+20     	; 0x274 <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 260:	90 b3       	in	r25, 0x10	; 16
 262:	89 2f       	mov	r24, r25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_readPinValue+0x62>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	2a 95       	dec	r18
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_readPinValue+0x5e>
 270:	81 70       	andi	r24, 0x01	; 1
 272:	08 95       	ret
	}
}
 274:	08 95       	ret

00000276 <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
 298:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXT_int0Func>
 29c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXT_int0Func+0x1>
 2a0:	09 95       	icall
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_2>:
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
 2e6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ea:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ee:	09 95       	icall
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	EXT_int2Func();
 334:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXT_int2Func>
 338:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXT_int2Func+0x1>
 33c:	09 95       	icall
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <GI_enable>:
 */ 

#include "GI_INT.h"

void GI_enable(){
	SET_BIT(SREG,I);
 360:	8f b7       	in	r24, 0x3f	; 63
 362:	80 68       	ori	r24, 0x80	; 128
 364:	8f bf       	out	0x3f, r24	; 63
 366:	08 95       	ret

00000368 <TIMER0_initFPWM>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
 368:	83 b7       	in	r24, 0x33	; 51
 36a:	80 64       	ori	r24, 0x40	; 64
 36c:	83 bf       	out	0x33, r24	; 51
 36e:	83 b7       	in	r24, 0x33	; 51
 370:	88 60       	ori	r24, 0x08	; 8
 372:	83 bf       	out	0x33, r24	; 51
 374:	83 b7       	in	r24, 0x33	; 51
 376:	8f 7e       	andi	r24, 0xEF	; 239
 378:	83 bf       	out	0x33, r24	; 51
 37a:	83 b7       	in	r24, 0x33	; 51
 37c:	80 62       	ori	r24, 0x20	; 32
 37e:	83 bf       	out	0x33, r24	; 51
 380:	08 95       	ret

00000382 <TIMER0_start>:
 382:	81 11       	cpse	r24, r1
 384:	0a c0       	rjmp	.+20     	; 0x39a <TIMER0_start+0x18>
 386:	83 b7       	in	r24, 0x33	; 51
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	83 bf       	out	0x33, r24	; 51
 38c:	83 b7       	in	r24, 0x33	; 51
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	83 bf       	out	0x33, r24	; 51
 392:	83 b7       	in	r24, 0x33	; 51
 394:	84 60       	ori	r24, 0x04	; 4
 396:	83 bf       	out	0x33, r24	; 51
 398:	08 95       	ret
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	51 f4       	brne	.+20     	; 0x3b2 <TIMER0_start+0x30>
 39e:	83 b7       	in	r24, 0x33	; 51
 3a0:	8e 7f       	andi	r24, 0xFE	; 254
 3a2:	83 bf       	out	0x33, r24	; 51
 3a4:	83 b7       	in	r24, 0x33	; 51
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	83 bf       	out	0x33, r24	; 51
 3aa:	83 b7       	in	r24, 0x33	; 51
 3ac:	84 60       	ori	r24, 0x04	; 4
 3ae:	83 bf       	out	0x33, r24	; 51
 3b0:	08 95       	ret
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	51 f4       	brne	.+20     	; 0x3ca <TIMER0_start+0x48>
 3b6:	83 b7       	in	r24, 0x33	; 51
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	83 bf       	out	0x33, r24	; 51
 3bc:	83 b7       	in	r24, 0x33	; 51
 3be:	8d 7f       	andi	r24, 0xFD	; 253
 3c0:	83 bf       	out	0x33, r24	; 51
 3c2:	83 b7       	in	r24, 0x33	; 51
 3c4:	8b 7f       	andi	r24, 0xFB	; 251
 3c6:	83 bf       	out	0x33, r24	; 51
 3c8:	08 95       	ret
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	51 f4       	brne	.+20     	; 0x3e2 <TIMER0_start+0x60>
 3ce:	83 b7       	in	r24, 0x33	; 51
 3d0:	8e 7f       	andi	r24, 0xFE	; 254
 3d2:	83 bf       	out	0x33, r24	; 51
 3d4:	83 b7       	in	r24, 0x33	; 51
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	83 bf       	out	0x33, r24	; 51
 3da:	83 b7       	in	r24, 0x33	; 51
 3dc:	8b 7f       	andi	r24, 0xFB	; 251
 3de:	83 bf       	out	0x33, r24	; 51
 3e0:	08 95       	ret
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	51 f4       	brne	.+20     	; 0x3fa <TIMER0_start+0x78>
 3e6:	83 b7       	in	r24, 0x33	; 51
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	83 bf       	out	0x33, r24	; 51
 3ec:	83 b7       	in	r24, 0x33	; 51
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	83 bf       	out	0x33, r24	; 51
 3f2:	83 b7       	in	r24, 0x33	; 51
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	83 bf       	out	0x33, r24	; 51
 3f8:	08 95       	ret
 3fa:	85 30       	cpi	r24, 0x05	; 5
 3fc:	49 f4       	brne	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3fe:	83 b7       	in	r24, 0x33	; 51
 400:	8e 7f       	andi	r24, 0xFE	; 254
 402:	83 bf       	out	0x33, r24	; 51
 404:	83 b7       	in	r24, 0x33	; 51
 406:	8d 7f       	andi	r24, 0xFD	; 253
 408:	83 bf       	out	0x33, r24	; 51
 40a:	83 b7       	in	r24, 0x33	; 51
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	83 bf       	out	0x33, r24	; 51
 410:	08 95       	ret

00000412 <TIMER0_setOCR>:
 412:	8c bf       	out	0x3c, r24	; 60
 414:	08 95       	ret

00000416 <__vector_11>:
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	2f 93       	push	r18
 422:	3f 93       	push	r19
 424:	4f 93       	push	r20
 426:	5f 93       	push	r21
 428:	6f 93       	push	r22
 42a:	7f 93       	push	r23
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	af 93       	push	r26
 432:	bf 93       	push	r27
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
 438:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TIMER0_OvFunc>
 43c:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TIMER0_OvFunc+0x1>
 440:	09 95       	icall
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	TIMER0_CTCFunc();
 486:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER0_CTCFunc>
 48a:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER0_CTCFunc+0x1>
 48e:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
