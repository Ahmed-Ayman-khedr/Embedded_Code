
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000006ee  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  0080006a  0000078c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001656  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a05  00000000  00000000  0000201e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5e  00000000  00000000  00002a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00003684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000699  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e7f  00000000  00000000  00004185  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_1>
   8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_2>
   c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 

#include "Sess22TI1/TASKCOUNTER/TASKCOUNTER_INT.h"

int main(){
	source_code();
  92:	0e 94 4e 00 	call	0x9c	; 0x9c <source_code>
	return 0;
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret

0000009c <source_code>:

#include "Sess22TI1/TASKCOUNTER/TASKCOUNTER_INT.h"

int source_code()
{
	DIO_setPinDir(DIO_PINC2,DIO_OUTPUT);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e1       	ldi	r24, 0x12	; 18
  a0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
	DIO_setPinDir(DIO_PINC3,DIO_OUTPUT);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	83 e1       	ldi	r24, 0x13	; 19
  a8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
	
	LCD_init();
  ac:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_init>
	
	GI_enable();
  b0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <GI_enable>
	TIMER0_initNormal();
  b4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <TIMER0_initNormal>
	TIMER0_start(TIMER0_RISING);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 02 03 	call	0x604	; 0x604 <TIMER0_start>
	TIMER0_setPreload(0);	
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 4a 03 	call	0x694	; 0x694 <TIMER0_setPreload>
	while (1)
	{
		if (TIMER0_getCounter()==3)
  c4:	0e 94 4c 03 	call	0x698	; 0x698 <TIMER0_getCounter>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	e1 f7       	brne	.-8      	; 0xc4 <source_code+0x28>
		{
			LCD_clearDis();
  cc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_clearDis>
			LCD_sendStr("Complete");
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_sendStr>
			TIMER0_setPreload(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 4a 03 	call	0x694	; 0x694 <TIMER0_setPreload>
  de:	f2 cf       	rjmp	.-28     	; 0xc4 <source_code+0x28>

000000e0 <LCD_Instruction>:
		LCD_sendCmd(0b00011100);
	}
	else if (direction==LCD_SHIFT_DIS_LIFT)
	{
		//Shift left
		LCD_sendCmd(0b00011000);
  e0:	81 11       	cpse	r24, r1
  e2:	09 c0       	rjmp	.+18     	; 0xf6 <LCD_Instruction+0x16>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	89 e0       	ldi	r24, 0x09	; 9
  f0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
  f4:	08 95       	ret
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	41 f4       	brne	.+16     	; 0x10a <LCD_Instruction+0x2a>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	89 e0       	ldi	r24, 0x09	; 9
 106:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 10a:	08 95       	ret

0000010c <LCD_pulse>:
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	8b e0       	ldi	r24, 0x0B	; 11
 110:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_pulse+0xc>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_pulse+0x12>
 11e:	00 00       	nop
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	8b e0       	ldi	r24, 0x0B	; 11
 124:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 128:	08 95       	ret

0000012a <LCD_sendData>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Instruction>
 134:	c4 fb       	bst	r28, 4
 136:	66 27       	eor	r22, r22
 138:	60 f9       	bld	r22, 0
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 140:	c5 fb       	bst	r28, 5
 142:	66 27       	eor	r22, r22
 144:	60 f9       	bld	r22, 0
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 14c:	c6 fb       	bst	r28, 6
 14e:	66 27       	eor	r22, r22
 150:	60 f9       	bld	r22, 0
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 158:	6c 2f       	mov	r22, r28
 15a:	66 1f       	adc	r22, r22
 15c:	66 27       	eor	r22, r22
 15e:	66 1f       	adc	r22, r22
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 166:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_pulse>
 16a:	6c 2f       	mov	r22, r28
 16c:	61 70       	andi	r22, 0x01	; 1
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 174:	c1 fb       	bst	r28, 1
 176:	66 27       	eor	r22, r22
 178:	60 f9       	bld	r22, 0
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 180:	c2 fb       	bst	r28, 2
 182:	66 27       	eor	r22, r22
 184:	60 f9       	bld	r22, 0
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 18c:	c3 fb       	bst	r28, 3
 18e:	66 27       	eor	r22, r22
 190:	60 f9       	bld	r22, 0
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 198:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_pulse>
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <LCD_sendCmd>:
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Instruction>
 1aa:	c4 fb       	bst	r28, 4
 1ac:	66 27       	eor	r22, r22
 1ae:	60 f9       	bld	r22, 0
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 1b6:	c5 fb       	bst	r28, 5
 1b8:	66 27       	eor	r22, r22
 1ba:	60 f9       	bld	r22, 0
 1bc:	85 e0       	ldi	r24, 0x05	; 5
 1be:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 1c2:	c6 fb       	bst	r28, 6
 1c4:	66 27       	eor	r22, r22
 1c6:	60 f9       	bld	r22, 0
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 1ce:	6c 2f       	mov	r22, r28
 1d0:	66 1f       	adc	r22, r22
 1d2:	66 27       	eor	r22, r22
 1d4:	66 1f       	adc	r22, r22
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 1dc:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_pulse>
 1e0:	6c 2f       	mov	r22, r28
 1e2:	61 70       	andi	r22, 0x01	; 1
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 1ea:	c1 fb       	bst	r28, 1
 1ec:	66 27       	eor	r22, r22
 1ee:	60 f9       	bld	r22, 0
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 1f6:	c2 fb       	bst	r28, 2
 1f8:	66 27       	eor	r22, r22
 1fa:	60 f9       	bld	r22, 0
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 202:	c3 fb       	bst	r28, 3
 204:	66 27       	eor	r22, r22
 206:	60 f9       	bld	r22, 0
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_setPinValue>
 20e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_pulse>
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <LCD_init>:
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	87 e0       	ldi	r24, 0x07	; 7
 232:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	8b e0       	ldi	r24, 0x0B	; 11
 23a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	89 e0       	ldi	r24, 0x09	; 9
 24a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_setPinDir>
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_sendCmd>
 254:	2f ef       	ldi	r18, 0xFF	; 255
 256:	86 e7       	ldi	r24, 0x76	; 118
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <LCD_init+0x44>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_init+0x4e>
 264:	00 00       	nop
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_sendCmd>
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_init+0x5a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_init+0x60>
 276:	00 00       	nop
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_sendCmd>
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_init+0x6c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_init+0x72>
 288:	00 00       	nop
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_sendCmd>
 290:	8f e3       	ldi	r24, 0x3F	; 63
 292:	9f e1       	ldi	r25, 0x1F	; 31
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_init+0x7e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_init+0x84>
 29a:	00 00       	nop
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_sendCmd>
 2a2:	08 95       	ret

000002a4 <LCD_clearDis>:
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_sendCmd>
 2aa:	08 95       	ret

000002ac <LCD_sendStr>:
	DIO_setPinValue(LCD_D7,GET_BIT(cmd,3));
	
	LCD_pulse();
}

void LCD_sendStr(u8* str){
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	8c 01       	movw	r16, r24
	u8 i=0;
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i]!='\0')
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCD_sendStr+0x12>
	{
		LCD_sendData(str[i]);
 2b8:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_sendData>
		i++;
 2bc:	cf 5f       	subi	r28, 0xFF	; 255
	LCD_pulse();
}

void LCD_sendStr(u8* str){
	u8 i=0;
	while (str[i]!='\0')
 2be:	f8 01       	movw	r30, r16
 2c0:	ec 0f       	add	r30, r28
 2c2:	f1 1d       	adc	r31, r1
 2c4:	80 81       	ld	r24, Z
 2c6:	81 11       	cpse	r24, r1
 2c8:	f7 cf       	rjmp	.-18     	; 0x2b8 <LCD_sendStr+0xc>
	{
		LCD_sendData(str[i]);
		i++;
	}
	
}
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 2d2:	88 30       	cpi	r24, 0x08	; 8
 2d4:	00 f5       	brcc	.+64     	; 0x316 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 2d6:	61 11       	cpse	r22, r1
 2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 2da:	4a b3       	in	r20, 0x1a	; 26
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	b9 01       	movw	r22, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_setPinDir+0x16>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	8a 95       	dec	r24
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_setPinDir+0x12>
 2ec:	cb 01       	movw	r24, r22
 2ee:	80 95       	com	r24
 2f0:	84 23       	and	r24, r20
 2f2:	8a bb       	out	0x1a, r24	; 26
 2f4:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	09 f0       	breq	.+2      	; 0x2fc <DIO_setPinDir+0x2a>
 2fa:	75 c0       	rjmp	.+234    	; 0x3e6 <DIO_setPinDir+0x114>
			SET_BIT(DDRA,pinNum);
 2fc:	4a b3       	in	r20, 0x1a	; 26
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	b9 01       	movw	r22, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_setPinDir+0x38>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_setPinDir+0x34>
 30e:	cb 01       	movw	r24, r22
 310:	84 2b       	or	r24, r20
 312:	8a bb       	out	0x1a, r24	; 26
 314:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 316:	98 ef       	ldi	r25, 0xF8	; 248
 318:	98 0f       	add	r25, r24
 31a:	98 30       	cpi	r25, 0x08	; 8
 31c:	00 f5       	brcc	.+64     	; 0x35e <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 31e:	61 11       	cpse	r22, r1
 320:	0e c0       	rjmp	.+28     	; 0x33e <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 322:	47 b3       	in	r20, 0x17	; 23
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_setPinDir+0x5e>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	9a 95       	dec	r25
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_setPinDir+0x5a>
 334:	cb 01       	movw	r24, r22
 336:	80 95       	com	r24
 338:	84 23       	and	r24, r20
 33a:	87 bb       	out	0x17, r24	; 23
 33c:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	09 f0       	breq	.+2      	; 0x344 <DIO_setPinDir+0x72>
 342:	51 c0       	rjmp	.+162    	; 0x3e6 <DIO_setPinDir+0x114>
			SET_BIT(DDRB,pinNum);
 344:	47 b3       	in	r20, 0x17	; 23
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_setPinDir+0x80>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	9a 95       	dec	r25
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_setPinDir+0x7c>
 356:	cb 01       	movw	r24, r22
 358:	84 2b       	or	r24, r20
 35a:	87 bb       	out	0x17, r24	; 23
 35c:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 35e:	90 ef       	ldi	r25, 0xF0	; 240
 360:	98 0f       	add	r25, r24
 362:	98 30       	cpi	r25, 0x08	; 8
 364:	f8 f4       	brcc	.+62     	; 0x3a4 <DIO_setPinDir+0xd2>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 366:	61 11       	cpse	r22, r1
 368:	0e c0       	rjmp	.+28     	; 0x386 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 36a:	44 b3       	in	r20, 0x14	; 20
 36c:	21 e0       	ldi	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	b9 01       	movw	r22, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_setPinDir+0xa6>
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	9a 95       	dec	r25
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_setPinDir+0xa2>
 37c:	cb 01       	movw	r24, r22
 37e:	80 95       	com	r24
 380:	84 23       	and	r24, r20
 382:	84 bb       	out	0x14, r24	; 20
 384:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	71 f5       	brne	.+92     	; 0x3e6 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 38a:	44 b3       	in	r20, 0x14	; 20
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	b9 01       	movw	r22, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_setPinDir+0xc6>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	9a 95       	dec	r25
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_setPinDir+0xc2>
 39c:	cb 01       	movw	r24, r22
 39e:	84 2b       	or	r24, r20
 3a0:	84 bb       	out	0x14, r24	; 20
 3a2:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 3a4:	88 51       	subi	r24, 0x18	; 24
 3a6:	88 30       	cpi	r24, 0x08	; 8
 3a8:	f0 f4       	brcc	.+60     	; 0x3e6 <DIO_setPinDir+0x114>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 3aa:	61 11       	cpse	r22, r1
 3ac:	0e c0       	rjmp	.+28     	; 0x3ca <DIO_setPinDir+0xf8>
			CLEAR_BIT(DDRC,pinNum);
 3ae:	44 b3       	in	r20, 0x14	; 20
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_setPinDir+0xea>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_setPinDir+0xe6>
 3c0:	cb 01       	movw	r24, r22
 3c2:	80 95       	com	r24
 3c4:	84 23       	and	r24, r20
 3c6:	84 bb       	out	0x14, r24	; 20
 3c8:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 3ca:	61 30       	cpi	r22, 0x01	; 1
 3cc:	61 f4       	brne	.+24     	; 0x3e6 <DIO_setPinDir+0x114>
			SET_BIT(DDRC,pinNum);
 3ce:	44 b3       	in	r20, 0x14	; 20
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	b9 01       	movw	r22, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_setPinDir+0x10a>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_setPinDir+0x106>
 3e0:	cb 01       	movw	r24, r22
 3e2:	84 2b       	or	r24, r20
 3e4:	84 bb       	out	0x14, r24	; 20
 3e6:	08 95       	ret

000003e8 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 3e8:	88 30       	cpi	r24, 0x08	; 8
 3ea:	00 f5       	brcc	.+64     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		if (level==DIO_LOW){
 3ec:	61 11       	cpse	r22, r1
 3ee:	0e c0       	rjmp	.+28     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			CLEAR_BIT(PORTA,pinNum);
 3f0:	4b b3       	in	r20, 0x1b	; 27
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	b9 01       	movw	r22, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_setPinValue+0x16>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	8a 95       	dec	r24
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_setPinValue+0x12>
 402:	cb 01       	movw	r24, r22
 404:	80 95       	com	r24
 406:	84 23       	and	r24, r20
 408:	8b bb       	out	0x1b, r24	; 27
 40a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 40c:	61 30       	cpi	r22, 0x01	; 1
 40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	75 c0       	rjmp	.+234    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			SET_BIT(PORTA,pinNum);
 412:	4b b3       	in	r20, 0x1b	; 27
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	cb 01       	movw	r24, r22
 426:	84 2b       	or	r24, r20
 428:	8b bb       	out	0x1b, r24	; 27
 42a:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 42c:	98 ef       	ldi	r25, 0xF8	; 248
 42e:	98 0f       	add	r25, r24
 430:	98 30       	cpi	r25, 0x08	; 8
 432:	00 f5       	brcc	.+64     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 434:	61 11       	cpse	r22, r1
 436:	0e c0       	rjmp	.+28     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			CLEAR_BIT(PORTB,pinNum);
 438:	48 b3       	in	r20, 0x18	; 24
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	9a 95       	dec	r25
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	88 bb       	out	0x18, r24	; 24
 452:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 454:	61 30       	cpi	r22, 0x01	; 1
 456:	09 f0       	breq	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 458:	51 c0       	rjmp	.+162    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			SET_BIT(PORTB,pinNum);
 45a:	48 b3       	in	r20, 0x18	; 24
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	b9 01       	movw	r22, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	9a 95       	dec	r25
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	cb 01       	movw	r24, r22
 46e:	84 2b       	or	r24, r20
 470:	88 bb       	out	0x18, r24	; 24
 472:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 474:	90 ef       	ldi	r25, 0xF0	; 240
 476:	98 0f       	add	r25, r24
 478:	98 30       	cpi	r25, 0x08	; 8
 47a:	f8 f4       	brcc	.+62     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 47c:	61 11       	cpse	r22, r1
 47e:	0e c0       	rjmp	.+28     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			CLEAR_BIT(PORTC,pinNum);
 480:	45 b3       	in	r20, 0x15	; 21
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	b9 01       	movw	r22, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	9a 95       	dec	r25
 490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	cb 01       	movw	r24, r22
 494:	80 95       	com	r24
 496:	84 23       	and	r24, r20
 498:	85 bb       	out	0x15, r24	; 21
 49a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 49c:	61 30       	cpi	r22, 0x01	; 1
 49e:	71 f5       	brne	.+92     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			SET_BIT(PORTC,pinNum);
 4a0:	45 b3       	in	r20, 0x15	; 21
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	9a 95       	dec	r25
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b2:	cb 01       	movw	r24, r22
 4b4:	84 2b       	or	r24, r20
 4b6:	85 bb       	out	0x15, r24	; 21
 4b8:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 4ba:	88 51       	subi	r24, 0x18	; 24
 4bc:	88 30       	cpi	r24, 0x08	; 8
 4be:	f0 f4       	brcc	.+60     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 4c0:	61 11       	cpse	r22, r1
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
			CLEAR_BIT(PORTD,pinNum);
 4c4:	42 b3       	in	r20, 0x12	; 18
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	cb 01       	movw	r24, r22
 4d8:	80 95       	com	r24
 4da:	84 23       	and	r24, r20
 4dc:	82 bb       	out	0x12, r24	; 18
 4de:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4e0:	61 30       	cpi	r22, 0x01	; 1
 4e2:	61 f4       	brne	.+24     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			SET_BIT(PORTD,pinNum);
 4e4:	42 b3       	in	r20, 0x12	; 18
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	b9 01       	movw	r22, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	8a 95       	dec	r24
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4f6:	cb 01       	movw	r24, r22
 4f8:	84 2b       	or	r24, r20
 4fa:	82 bb       	out	0x12, r24	; 18
 4fc:	08 95       	ret

000004fe <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <EXT_int0Func>
 524:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <EXT_int0Func+0x1>
 528:	09 95       	icall
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <__vector_2>:
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
 56e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 572:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 576:	09 95       	icall
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	2f 93       	push	r18
 5a6:	3f 93       	push	r19
 5a8:	4f 93       	push	r20
 5aa:	5f 93       	push	r21
 5ac:	6f 93       	push	r22
 5ae:	7f 93       	push	r23
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	af 93       	push	r26
 5b6:	bf 93       	push	r27
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
	EXT_int2Func();
 5bc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <EXT_int2Func>
 5c0:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <EXT_int2Func+0x1>
 5c4:	09 95       	icall
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <GI_enable>:
 */ 

#include "GI_INT.h"

void GI_enable(){
	SET_BIT(SREG,I);
 5e8:	8f b7       	in	r24, 0x3f	; 63
 5ea:	80 68       	ori	r24, 0x80	; 128
 5ec:	8f bf       	out	0x3f, r24	; 63
 5ee:	08 95       	ret

000005f0 <TIMER0_initNormal>:

void (*TIMER0_OvFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackOv(void (*ptr)()){
	TIMER0_OvFunc = ptr;
 5f0:	83 b7       	in	r24, 0x33	; 51
 5f2:	8f 7b       	andi	r24, 0xBF	; 191
 5f4:	83 bf       	out	0x33, r24	; 51
 5f6:	83 b7       	in	r24, 0x33	; 51
 5f8:	87 7f       	andi	r24, 0xF7	; 247
 5fa:	83 bf       	out	0x33, r24	; 51
 5fc:	89 b7       	in	r24, 0x39	; 57
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	89 bf       	out	0x39, r24	; 57
 602:	08 95       	ret

00000604 <TIMER0_start>:
 604:	81 11       	cpse	r24, r1
 606:	0a c0       	rjmp	.+20     	; 0x61c <TIMER0_start+0x18>
 608:	83 b7       	in	r24, 0x33	; 51
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	83 bf       	out	0x33, r24	; 51
 60e:	83 b7       	in	r24, 0x33	; 51
 610:	82 60       	ori	r24, 0x02	; 2
 612:	83 bf       	out	0x33, r24	; 51
 614:	83 b7       	in	r24, 0x33	; 51
 616:	84 60       	ori	r24, 0x04	; 4
 618:	83 bf       	out	0x33, r24	; 51
 61a:	08 95       	ret
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	51 f4       	brne	.+20     	; 0x634 <TIMER0_start+0x30>
 620:	83 b7       	in	r24, 0x33	; 51
 622:	8e 7f       	andi	r24, 0xFE	; 254
 624:	83 bf       	out	0x33, r24	; 51
 626:	83 b7       	in	r24, 0x33	; 51
 628:	82 60       	ori	r24, 0x02	; 2
 62a:	83 bf       	out	0x33, r24	; 51
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	84 60       	ori	r24, 0x04	; 4
 630:	83 bf       	out	0x33, r24	; 51
 632:	08 95       	ret
 634:	82 30       	cpi	r24, 0x02	; 2
 636:	51 f4       	brne	.+20     	; 0x64c <TIMER0_start+0x48>
 638:	83 b7       	in	r24, 0x33	; 51
 63a:	81 60       	ori	r24, 0x01	; 1
 63c:	83 bf       	out	0x33, r24	; 51
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	8d 7f       	andi	r24, 0xFD	; 253
 642:	83 bf       	out	0x33, r24	; 51
 644:	83 b7       	in	r24, 0x33	; 51
 646:	8b 7f       	andi	r24, 0xFB	; 251
 648:	83 bf       	out	0x33, r24	; 51
 64a:	08 95       	ret
 64c:	83 30       	cpi	r24, 0x03	; 3
 64e:	51 f4       	brne	.+20     	; 0x664 <TIMER0_start+0x60>
 650:	83 b7       	in	r24, 0x33	; 51
 652:	8e 7f       	andi	r24, 0xFE	; 254
 654:	83 bf       	out	0x33, r24	; 51
 656:	83 b7       	in	r24, 0x33	; 51
 658:	82 60       	ori	r24, 0x02	; 2
 65a:	83 bf       	out	0x33, r24	; 51
 65c:	83 b7       	in	r24, 0x33	; 51
 65e:	8b 7f       	andi	r24, 0xFB	; 251
 660:	83 bf       	out	0x33, r24	; 51
 662:	08 95       	ret
 664:	84 30       	cpi	r24, 0x04	; 4
 666:	51 f4       	brne	.+20     	; 0x67c <TIMER0_start+0x78>
 668:	83 b7       	in	r24, 0x33	; 51
 66a:	81 60       	ori	r24, 0x01	; 1
 66c:	83 bf       	out	0x33, r24	; 51
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	82 60       	ori	r24, 0x02	; 2
 672:	83 bf       	out	0x33, r24	; 51
 674:	83 b7       	in	r24, 0x33	; 51
 676:	8b 7f       	andi	r24, 0xFB	; 251
 678:	83 bf       	out	0x33, r24	; 51
 67a:	08 95       	ret
 67c:	85 30       	cpi	r24, 0x05	; 5
 67e:	49 f4       	brne	.+18     	; 0x692 <TIMER0_start+0x8e>
 680:	83 b7       	in	r24, 0x33	; 51
 682:	8e 7f       	andi	r24, 0xFE	; 254
 684:	83 bf       	out	0x33, r24	; 51
 686:	83 b7       	in	r24, 0x33	; 51
 688:	8d 7f       	andi	r24, 0xFD	; 253
 68a:	83 bf       	out	0x33, r24	; 51
 68c:	83 b7       	in	r24, 0x33	; 51
 68e:	84 60       	ori	r24, 0x04	; 4
 690:	83 bf       	out	0x33, r24	; 51
 692:	08 95       	ret

00000694 <TIMER0_setPreload>:
 694:	82 bf       	out	0x32, r24	; 50
 696:	08 95       	ret

00000698 <TIMER0_getCounter>:
 698:	82 b7       	in	r24, 0x32	; 50
 69a:	08 95       	ret

0000069c <__vector_11>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_11() __attribute__((signal));
void __vector_11(){
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	6f 93       	push	r22
 6b0:	7f 93       	push	r23
 6b2:	8f 93       	push	r24
 6b4:	9f 93       	push	r25
 6b6:	af 93       	push	r26
 6b8:	bf 93       	push	r27
 6ba:	ef 93       	push	r30
 6bc:	ff 93       	push	r31
	TIMER0_OvFunc();
 6be:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TIMER0_OvFunc>
 6c2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TIMER0_OvFunc+0x1>
 6c6:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
