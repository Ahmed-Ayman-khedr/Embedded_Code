
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800078  00800078  00000d68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002481  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f15  00000000  00000000  0000356d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001789  00000000  00000000  00004482  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  00005c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e4  00000000  00000000  0000638c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ad  00000000  00000000  00006d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000841d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_1>
   8:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_2>
   c:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_10>
  2c:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 

#include "Sess29EEPROM/TASKEEPROMPASS/TASKEEPROMPASS_INT.h"

int main(){
	source_code();
  92:	0e 94 4e 00 	call	0x9c	; 0x9c <source_code>
	return 0;
}
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret

0000009c <source_code>:
 */ 

#include "Sess29EEPROM/TASKEEPROMPASS/TASKEEPROMPASS_INT.h"

int source_code()
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	00 d0       	rcall	.+0      	; 0xa2 <source_code+0x6>
  a2:	00 d0       	rcall	.+0      	; 0xa4 <source_code+0x8>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	UART_init();
  aa:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <UART_init>
	
	LCD_init();
  ae:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_init>
	
	KPD_init();
  b2:	0e 94 67 01 	call	0x2ce	; 0x2ce <KPD_init>
	
	EEPROM_Init();
  b6:	0e 94 10 01 	call	0x220	; 0x220 <EEPROM_Init>
	
	BOOL flage=FALSE,EEPROM_flage = FALSE,Save_flage = FALSE;
	u8 UART_RecevedData, KPD_RecevedData, Entered_Pass[4], i = 0, i2 = 0, EEPROMRecevedData;
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	00 e0       	ldi	r16, 0x00	; 0
	
	KPD_init();
	
	EEPROM_Init();
	
	BOOL flage=FALSE,EEPROM_flage = FALSE,Save_flage = FALSE;
  be:	b1 2c       	mov	r11, r1
  c0:	d1 2c       	mov	r13, r1
  c2:	c1 2c       	mov	r12, r1
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <source_code+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <source_code+0x30>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <source_code+0x3a>
  d6:	00 00       	nop
			i2++;
		}*/
		while (i2<4)
		{
			_delay_ms(1000);
			EEPROM_ReadByteNACK(&EEPROMRecevedData,i2);
  d8:	61 2f       	mov	r22, r17
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	ce 01       	movw	r24, r28
  de:	05 96       	adiw	r24, 0x05	; 5
  e0:	0e 94 36 01 	call	0x26c	; 0x26c <EEPROM_ReadByteNACK>
			if (EEPROMRecevedData!=255)
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	19 f0       	breq	.+6      	; 0xf0 <source_code+0x54>
			{
				EEPROM_flage = TRUE;
  ea:	dd 24       	eor	r13, r13
  ec:	d3 94       	inc	r13
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <source_code+0x56>
			}
			else
			{
				EEPROM_flage = FALSE;
  f0:	d1 2c       	mov	r13, r1
			}
			i2++;
  f2:	1f 5f       	subi	r17, 0xFF	; 255
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <source_code+0x5c>
					LCD_clearDis();
					LCD_sendStr("Wrong Password");
					UART_sendStr("Wrong Password");
				}
			}
			i = 0;
  f6:	00 e0       	ldi	r16, 0x00	; 0
			EEPROMRecevedData = 255;
			_delay_ms(1000);
			EEPROM_SendByte(&EEPROMRecevedData,i2);
			i2++;
		}*/
		while (i2<4)
  f8:	14 30       	cpi	r17, 0x04	; 4
  fa:	28 f3       	brcs	.-54     	; 0xc6 <source_code+0x2a>
				EEPROM_flage = FALSE;
			}
			i2++;
		}
		
		UART_RecevedData = UART_receiveData();
  fc:	0e 94 02 06 	call	0xc04	; 0xc04 <UART_receiveData>
 100:	e8 2e       	mov	r14, r24
		KPD_RecevedData = KPD_read();
 102:	0e 94 94 01 	call	0x328	; 0x328 <KPD_read>
 106:	f8 2e       	mov	r15, r24
		if (UART_RecevedData!=UART_NOT_RECEIVE || KPD_RecevedData!=KPD_UNPRESSED)
 108:	28 e7       	ldi	r18, 0x78	; 120
 10a:	e2 12       	cpse	r14, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <source_code+0x76>
 10e:	82 17       	cp	r24, r18
 110:	19 f1       	breq	.+70     	; 0x158 <source_code+0xbc>
		{
			while(KPD_read()!=KPD_UNPRESSED);
 112:	0e 94 94 01 	call	0x328	; 0x328 <KPD_read>
 116:	88 37       	cpi	r24, 0x78	; 120
 118:	e1 f7       	brne	.-8      	; 0x112 <source_code+0x76>
			if (KPD_RecevedData!=KPD_UNPRESSED)
 11a:	f8 16       	cp	r15, r24
 11c:	69 f0       	breq	.+26     	; 0x138 <source_code+0x9c>
			{
				LCD_sendNum(KPD_RecevedData-48);
 11e:	8f 2d       	mov	r24, r15
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	c0 97       	sbiw	r24, 0x30	; 48
 124:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_sendNum>
				Entered_Pass[i] = KPD_RecevedData;
 128:	e1 e0       	ldi	r30, 0x01	; 1
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	e0 0f       	add	r30, r16
 132:	f1 1d       	adc	r31, r1
 134:	f0 82       	st	Z, r15
 136:	0f c0       	rjmp	.+30     	; 0x156 <source_code+0xba>
			}
			else if (UART_RecevedData!=UART_NOT_RECEIVE)
 138:	98 e7       	ldi	r25, 0x78	; 120
 13a:	e9 16       	cp	r14, r25
 13c:	61 f0       	breq	.+24     	; 0x156 <source_code+0xba>
			{
				LCD_sendNum(UART_RecevedData-48);
 13e:	8e 2d       	mov	r24, r14
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c0 97       	sbiw	r24, 0x30	; 48
 144:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_sendNum>
				Entered_Pass[i] = UART_RecevedData;
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e0 0f       	add	r30, r16
 152:	f1 1d       	adc	r31, r1
 154:	e0 82       	st	Z, r14
			}
			i++;
 156:	0f 5f       	subi	r16, 0xFF	; 255
		}
		
		if (i==4)
 158:	04 30       	cpi	r16, 0x04	; 4
 15a:	71 f6       	brne	.-100    	; 0xf8 <source_code+0x5c>
		{
			if (EEPROM_flage==FALSE)
 15c:	dd 20       	and	r13, r13
 15e:	b9 f0       	breq	.+46     	; 0x18e <source_code+0xf2>
 160:	1b c0       	rjmp	.+54     	; 0x198 <source_code+0xfc>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ed       	ldi	r24, 0xD3	; 211
 166:	90 e3       	ldi	r25, 0x30	; 48
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <source_code+0xcc>
 170:	00 c0       	rjmp	.+0      	; 0x172 <source_code+0xd6>
 172:	00 00       	nop
			{
				i2 = 0;
				while (i2<4)
				{
					_delay_ms(1000);
					EEPROM_SendByte(Entered_Pass[i2],i2);
 174:	61 2f       	mov	r22, r17
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	e1 e0       	ldi	r30, 0x01	; 1
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	e6 0f       	add	r30, r22
 182:	f7 1f       	adc	r31, r23
 184:	80 81       	ld	r24, Z
 186:	0e 94 14 01 	call	0x228	; 0x228 <EEPROM_SendByte>
					i2++;
 18a:	1f 5f       	subi	r17, 0xFF	; 255
 18c:	01 c0       	rjmp	.+2      	; 0x190 <source_code+0xf4>
 18e:	10 e0       	ldi	r17, 0x00	; 0
		if (i==4)
		{
			if (EEPROM_flage==FALSE)
			{
				i2 = 0;
				while (i2<4)
 190:	14 30       	cpi	r17, 0x04	; 4
 192:	38 f3       	brcs	.-50     	; 0x162 <source_code+0xc6>
				{
					_delay_ms(1000);
					EEPROM_SendByte(Entered_Pass[i2],i2);
					i2++;
				}
				Save_flage = TRUE;
 194:	bb 24       	eor	r11, r11
 196:	b3 94       	inc	r11
			}
			if (EEPROM_flage==TRUE){
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	d2 12       	cpse	r13, r18
 19c:	24 c0       	rjmp	.+72     	; 0x1e6 <source_code+0x14a>
 19e:	20 c0       	rjmp	.+64     	; 0x1e0 <source_code+0x144>
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	93 ed       	ldi	r25, 0xD3	; 211
 1a4:	20 e3       	ldi	r18, 0x30	; 48
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <source_code+0x10a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <source_code+0x114>
 1b0:	00 00       	nop
				i2 = 0;
				while ( i2<4)
				{
					_delay_ms(1000);
					EEPROM_ReadByteNACK(&EEPROMRecevedData,i2);
 1b2:	e1 2e       	mov	r14, r17
 1b4:	f1 2c       	mov	r15, r1
 1b6:	b7 01       	movw	r22, r14
 1b8:	ce 01       	movw	r24, r28
 1ba:	05 96       	adiw	r24, 0x05	; 5
 1bc:	0e 94 36 01 	call	0x26c	; 0x26c <EEPROM_ReadByteNACK>
					if (Entered_Pass[i2]==EEPROMRecevedData)
 1c0:	e1 e0       	ldi	r30, 0x01	; 1
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ec 0f       	add	r30, r28
 1c6:	fd 1f       	adc	r31, r29
 1c8:	ee 0d       	add	r30, r14
 1ca:	ff 1d       	adc	r31, r15
 1cc:	90 81       	ld	r25, Z
 1ce:	8d 81       	ldd	r24, Y+5	; 0x05
 1d0:	98 13       	cpse	r25, r24
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <source_code+0x13e>
					{
						flage = TRUE;
 1d4:	cc 24       	eor	r12, r12
 1d6:	c3 94       	inc	r12
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <source_code+0x140>
					}
					else
					{
						flage = FALSE;
 1da:	c1 2c       	mov	r12, r1
					}
					i2++;
 1dc:	1f 5f       	subi	r17, 0xFF	; 255
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <source_code+0x146>
 1e0:	10 e0       	ldi	r17, 0x00	; 0
				}
				Save_flage = TRUE;
			}
			if (EEPROM_flage==TRUE){
				i2 = 0;
				while ( i2<4)
 1e2:	14 30       	cpi	r17, 0x04	; 4
 1e4:	e8 f2       	brcs	.-70     	; 0x1a0 <source_code+0x104>
					}
					i2++;
				}
			}
			
			if (Save_flage==FALSE)
 1e6:	b1 10       	cpse	r11, r1
 1e8:	86 cf       	rjmp	.-244    	; 0xf6 <source_code+0x5a>
			{
				if (flage==TRUE)
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	c8 12       	cpse	r12, r24
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <source_code+0x16c>
				{
					LCD_clearDis();
 1f0:	0e 94 33 03 	call	0x666	; 0x666 <LCD_clearDis>
					LCD_sendStr("Welcome");
 1f4:	80 e6       	ldi	r24, 0x60	; 96
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_sendStr>
					UART_sendStr("Welcome");
 1fc:	80 e6       	ldi	r24, 0x60	; 96
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendStr>
					LCD_clearDis();
					LCD_sendStr("Wrong Password");
					UART_sendStr("Wrong Password");
				}
			}
			i = 0;
 204:	00 e0       	ldi	r16, 0x00	; 0
 206:	78 cf       	rjmp	.-272    	; 0xf8 <source_code+0x5c>
					LCD_sendStr("Welcome");
					UART_sendStr("Welcome");
				}
				else
				{
					LCD_clearDis();
 208:	0e 94 33 03 	call	0x666	; 0x666 <LCD_clearDis>
					LCD_sendStr("Wrong Password");
 20c:	88 e6       	ldi	r24, 0x68	; 104
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_sendStr>
					UART_sendStr("Wrong Password");
 214:	88 e6       	ldi	r24, 0x68	; 104
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendStr>
				}
			}
			i = 0;
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	6c cf       	rjmp	.-296    	; 0xf8 <source_code+0x5c>

00000220 <EEPROM_Init>:
 */ 

#include "EEPROM_INT.h"

void EEPROM_Init(){
	I2C_init(MASTER);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 5b 05 	call	0xab6	; 0xab6 <I2C_init>
 226:	08 95       	ret

00000228 <EEPROM_SendByte>:
}

void EEPROM_SendByte(u8 byte,u16 location){
		//Send Start
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 228:	94 ea       	ldi	r25, 0xA4	; 164
 22a:	96 bf       	out	0x36, r25	; 54
		while (GET_BIT(TWCR,TWINT)==0);
 22c:	06 b6       	in	r0, 0x36	; 54
 22e:	07 fe       	sbrs	r0, 7
 230:	fd cf       	rjmp	.-6      	; 0x22c <EEPROM_SendByte+0x4>
		
		//Send Location
		u8 varr = 0b10100000|(location>>7);
 232:	9b 01       	movw	r18, r22
 234:	22 0f       	add	r18, r18
 236:	23 2f       	mov	r18, r19
 238:	22 1f       	adc	r18, r18
 23a:	33 0b       	sbc	r19, r19
 23c:	31 95       	neg	r19
		CLEAR_BIT(varr,0);
 23e:	2e 7f       	andi	r18, 0xFE	; 254
 240:	20 6a       	ori	r18, 0xA0	; 160
		TWDR = varr;
 242:	23 b9       	out	0x03, r18	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
 244:	94 e8       	ldi	r25, 0x84	; 132
 246:	96 bf       	out	0x36, r25	; 54
		while (GET_BIT(TWCR,TWINT)==0);
 248:	06 b6       	in	r0, 0x36	; 54
 24a:	07 fe       	sbrs	r0, 7
 24c:	fd cf       	rjmp	.-6      	; 0x248 <EEPROM_SendByte+0x20>
		
		//Send the remainder of Location
		TWDR = (u8)location;
 24e:	63 b9       	out	0x03, r22	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
 250:	94 e8       	ldi	r25, 0x84	; 132
 252:	96 bf       	out	0x36, r25	; 54
		while (GET_BIT(TWCR,TWINT)==0);
 254:	06 b6       	in	r0, 0x36	; 54
 256:	07 fe       	sbrs	r0, 7
 258:	fd cf       	rjmp	.-6      	; 0x254 <EEPROM_SendByte+0x2c>
		
		//Send Data
		TWDR = byte;
 25a:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
 25c:	84 e8       	ldi	r24, 0x84	; 132
 25e:	86 bf       	out	0x36, r24	; 54
		while (GET_BIT(TWCR,TWINT)==0);
 260:	06 b6       	in	r0, 0x36	; 54
 262:	07 fe       	sbrs	r0, 7
 264:	fd cf       	rjmp	.-6      	; 0x260 <EEPROM_SendByte+0x38>
		
		//Send Stop
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 266:	84 e9       	ldi	r24, 0x94	; 148
 268:	86 bf       	out	0x36, r24	; 54
 26a:	08 95       	ret

0000026c <EEPROM_ReadByteNACK>:
}

void EEPROM_ReadByteNACK(u8* byte,u16 location){
	//Send Dummy Write Start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 26c:	24 ea       	ldi	r18, 0xA4	; 164
 26e:	26 bf       	out	0x36, r18	; 54
	while (GET_BIT(TWCR,TWINT)==0);
 270:	06 b6       	in	r0, 0x36	; 54
 272:	07 fe       	sbrs	r0, 7
 274:	fd cf       	rjmp	.-6      	; 0x270 <EEPROM_ReadByteNACK+0x4>
	
	//Send Location
	u8 varr = 0b10100000|(location>>7);
 276:	9b 01       	movw	r18, r22
 278:	22 0f       	add	r18, r18
 27a:	23 2f       	mov	r18, r19
 27c:	22 1f       	adc	r18, r18
 27e:	33 0b       	sbc	r19, r19
 280:	31 95       	neg	r19
 282:	2e 7f       	andi	r18, 0xFE	; 254
	CLEAR_BIT(varr,0);
 284:	32 2f       	mov	r19, r18
 286:	30 6a       	ori	r19, 0xA0	; 160
	TWDR = varr;
 288:	33 b9       	out	0x03, r19	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 28a:	34 e8       	ldi	r19, 0x84	; 132
 28c:	36 bf       	out	0x36, r19	; 54
	while (GET_BIT(TWCR,TWINT)==0);
 28e:	06 b6       	in	r0, 0x36	; 54
 290:	07 fe       	sbrs	r0, 7
 292:	fd cf       	rjmp	.-6      	; 0x28e <EEPROM_ReadByteNACK+0x22>
	
	//Send the remainder of Location
	TWDR = (u8)location;
 294:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 296:	34 e8       	ldi	r19, 0x84	; 132
 298:	36 bf       	out	0x36, r19	; 54
	while (GET_BIT(TWCR,TWINT)==0);
 29a:	06 b6       	in	r0, 0x36	; 54
 29c:	07 fe       	sbrs	r0, 7
 29e:	fd cf       	rjmp	.-6      	; 0x29a <EEPROM_ReadByteNACK+0x2e>
	
	//Send Start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 2a0:	34 ea       	ldi	r19, 0xA4	; 164
 2a2:	36 bf       	out	0x36, r19	; 54
	while (GET_BIT(TWCR,TWINT)==0);
 2a4:	06 b6       	in	r0, 0x36	; 54
 2a6:	07 fe       	sbrs	r0, 7
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <EEPROM_ReadByteNACK+0x38>
	
	//Send Location
	SET_BIT(varr,0);
 2aa:	21 6a       	ori	r18, 0xA1	; 161
	TWDR = varr;
 2ac:	23 b9       	out	0x03, r18	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 2ae:	24 e8       	ldi	r18, 0x84	; 132
 2b0:	26 bf       	out	0x36, r18	; 54
	while (GET_BIT(TWCR,TWINT)==0);
 2b2:	06 b6       	in	r0, 0x36	; 54
 2b4:	07 fe       	sbrs	r0, 7
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <EEPROM_ReadByteNACK+0x46>
	
	//Read data
	TWCR = (1<<TWINT)|(1<<TWEN);
 2b8:	24 e8       	ldi	r18, 0x84	; 132
 2ba:	26 bf       	out	0x36, r18	; 54
	while (GET_BIT(TWCR,TWINT)==0);
 2bc:	06 b6       	in	r0, 0x36	; 54
 2be:	07 fe       	sbrs	r0, 7
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <EEPROM_ReadByteNACK+0x50>
	*byte = TWDR;
 2c2:	23 b1       	in	r18, 0x03	; 3
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
	
	//Send Stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 2c8:	84 e9       	ldi	r24, 0x94	; 148
 2ca:	86 bf       	out	0x36, r24	; 54
 2cc:	08 95       	ret

000002ce <KPD_init>:
#include "KPD_INT.h"

//Initialize
void KPD_init()
{
	DIO_setPinDir(KPD_COL0, DIO_OUTPUT);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	83 e1       	ldi	r24, 0x13	; 19
 2d2:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	DIO_setPinDir(KPD_COL1, DIO_OUTPUT);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	84 e1       	ldi	r24, 0x14	; 20
 2da:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	DIO_setPinDir(KPD_COL2, DIO_OUTPUT);
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	85 e1       	ldi	r24, 0x15	; 21
 2e2:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	DIO_setPinDir(KPD_COL3, DIO_OUTPUT);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	86 e1       	ldi	r24, 0x16	; 22
 2ea:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	
	DIO_setPinDir(KPD_ROW0, DIO_INPUT);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8c e0       	ldi	r24, 0x0C	; 12
 2f2:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW1, DIO_INPUT);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	8d e0       	ldi	r24, 0x0D	; 13
 2fa:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW2, DIO_INPUT);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	8e e0       	ldi	r24, 0x0E	; 14
 302:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	DIO_setPinDir(KPD_ROW3, DIO_INPUT);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8f e0       	ldi	r24, 0x0F	; 15
 30a:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
	
	DIO_setPullUp(KPD_ROW0);
 30e:	8c e0       	ldi	r24, 0x0C	; 12
 310:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW1);
 314:	8d e0       	ldi	r24, 0x0D	; 13
 316:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW2);
 31a:	8e e0       	ldi	r24, 0x0E	; 14
 31c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <DIO_setPullUp>
	DIO_setPullUp(KPD_ROW3);
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <DIO_setPullUp>
 326:	08 95       	ret

00000328 <KPD_read>:
}

//Read
u8 KPD_read()
{
	DIO_setPinValue(KPD_COL0, DIO_LOW);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	83 e1       	ldi	r24, 0x13	; 19
 32c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	84 e1       	ldi	r24, 0x14	; 20
 334:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	85 e1       	ldi	r24, 0x15	; 21
 33c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	86 e1       	ldi	r24, 0x16	; 22
 344:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 34e:	88 23       	and	r24, r24
 350:	09 f4       	brne	.+2      	; 0x354 <KPD_read+0x2c>
 352:	87 c0       	rjmp	.+270    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	{
		return KPD_ROW0_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 35a:	88 23       	and	r24, r24
 35c:	09 f4       	brne	.+2      	; 0x360 <KPD_read+0x38>
 35e:	83 c0       	rjmp	.+262    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	{
		return KPD_ROW1_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 360:	8e e0       	ldi	r24, 0x0E	; 14
 362:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 366:	88 23       	and	r24, r24
 368:	09 f4       	brne	.+2      	; 0x36c <KPD_read+0x44>
 36a:	7f c0       	rjmp	.+254    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	{
		return KPD_ROW2_COL0;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 36c:	8f e0       	ldi	r24, 0x0F	; 15
 36e:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 372:	88 23       	and	r24, r24
 374:	09 f4       	brne	.+2      	; 0x378 <KPD_read+0x50>
 376:	7b c0       	rjmp	.+246    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		return KPD_ROW3_COL0;
	}
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	83 e1       	ldi	r24, 0x13	; 19
 37c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_LOW);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	84 e1       	ldi	r24, 0x14	; 20
 384:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	85 e1       	ldi	r24, 0x15	; 21
 38c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	86 e1       	ldi	r24, 0x16	; 22
 394:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 398:	8c e0       	ldi	r24, 0x0C	; 12
 39a:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 39e:	88 23       	and	r24, r24
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <KPD_read+0x7c>
 3a2:	67 c0       	rjmp	.+206    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	{
		return KPD_ROW0_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 3a4:	8d e0       	ldi	r24, 0x0D	; 13
 3a6:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 3aa:	88 23       	and	r24, r24
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <KPD_read+0x88>
 3ae:	63 c0       	rjmp	.+198    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
	{
		return KPD_ROW1_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 3b0:	8e e0       	ldi	r24, 0x0E	; 14
 3b2:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 3b6:	88 23       	and	r24, r24
 3b8:	09 f4       	brne	.+2      	; 0x3bc <KPD_read+0x94>
 3ba:	5f c0       	rjmp	.+190    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	{
		return KPD_ROW2_COL1;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 3bc:	8f e0       	ldi	r24, 0x0F	; 15
 3be:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 3c2:	88 23       	and	r24, r24
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <KPD_read+0xa0>
 3c6:	5b c0       	rjmp	.+182    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	{
		return KPD_ROW3_COL1;
	}
	
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	83 e1       	ldi	r24, 0x13	; 19
 3cc:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	84 e1       	ldi	r24, 0x14	; 20
 3d4:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_LOW);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	85 e1       	ldi	r24, 0x15	; 21
 3dc:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	86 e1       	ldi	r24, 0x16	; 22
 3e4:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 3ee:	88 23       	and	r24, r24
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <KPD_read+0xcc>
 3f2:	47 c0       	rjmp	.+142    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
	{
		return KPD_ROW0_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 3f4:	8d e0       	ldi	r24, 0x0D	; 13
 3f6:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 3fa:	88 23       	and	r24, r24
 3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	43 c0       	rjmp	.+134    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	{
		return KPD_ROW1_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 400:	8e e0       	ldi	r24, 0x0E	; 14
 402:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 406:	88 23       	and	r24, r24
 408:	09 f4       	brne	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	3f c0       	rjmp	.+126    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
	{
		return KPD_ROW2_COL2;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 40c:	8f e0       	ldi	r24, 0x0F	; 15
 40e:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 412:	88 23       	and	r24, r24
 414:	e1 f1       	breq	.+120    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	{
		return KPD_ROW3_COL2;
	}
	
	DIO_setPinValue(KPD_COL0, DIO_HIGH);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	83 e1       	ldi	r24, 0x13	; 19
 41a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL1, DIO_HIGH);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	84 e1       	ldi	r24, 0x14	; 20
 422:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	85 e1       	ldi	r24, 0x15	; 21
 42a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	DIO_setPinValue(KPD_COL3, DIO_LOW);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	86 e1       	ldi	r24, 0x16	; 22
 432:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 43c:	88 23       	and	r24, r24
 43e:	49 f1       	breq	.+82     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
	{
		return KPD_ROW0_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
 440:	8d e0       	ldi	r24, 0x0D	; 13
 442:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 446:	88 23       	and	r24, r24
 448:	31 f1       	breq	.+76     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
	{
		return KPD_ROW1_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
 44a:	8e e0       	ldi	r24, 0x0E	; 14
 44c:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 450:	88 23       	and	r24, r24
 452:	19 f1       	breq	.+70     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
	{
		return KPD_ROW2_COL3;
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
 454:	8f e0       	ldi	r24, 0x0F	; 15
 456:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_readPinValue>
 45a:	81 11       	cpse	r24, r1
 45c:	20 c0       	rjmp	.+64     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
	{
		return KPD_ROW3_COL3;
 45e:	8b e2       	ldi	r24, 0x2B	; 43
 460:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL0;
 462:	87 e3       	ldi	r24, 0x37	; 55
 464:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL0;
 466:	84 e3       	ldi	r24, 0x34	; 52
 468:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL0;
 46a:	81 e3       	ldi	r24, 0x31	; 49
 46c:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL0;
 46e:	83 e6       	ldi	r24, 0x63	; 99
 470:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL1;
 472:	88 e3       	ldi	r24, 0x38	; 56
 474:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL1;
 476:	85 e3       	ldi	r24, 0x35	; 53
 478:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL1;
 47a:	82 e3       	ldi	r24, 0x32	; 50
 47c:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL1;
 47e:	80 e3       	ldi	r24, 0x30	; 48
 480:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_LOW);
	DIO_setPinValue(KPD_COL3, DIO_HIGH);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL2;
 482:	89 e3       	ldi	r24, 0x39	; 57
 484:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL2;
 486:	86 e3       	ldi	r24, 0x36	; 54
 488:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL2;
 48a:	83 e3       	ldi	r24, 0x33	; 51
 48c:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL2;
 48e:	8d e3       	ldi	r24, 0x3D	; 61
 490:	08 95       	ret
	DIO_setPinValue(KPD_COL2, DIO_HIGH);
	DIO_setPinValue(KPD_COL3, DIO_LOW);
	
	if(DIO_readPinValue(KPD_ROW0) == DIO_LOW)
	{
		return KPD_ROW0_COL3;
 492:	8f e2       	ldi	r24, 0x2F	; 47
 494:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW1) == DIO_LOW)
	{
		return KPD_ROW1_COL3;
 496:	8a e2       	ldi	r24, 0x2A	; 42
 498:	08 95       	ret
	}
	else if(DIO_readPinValue(KPD_ROW2) == DIO_LOW)
	{
		return KPD_ROW2_COL3;
 49a:	8d e2       	ldi	r24, 0x2D	; 45
 49c:	08 95       	ret
	else if(DIO_readPinValue(KPD_ROW3) == DIO_LOW)
	{
		return KPD_ROW3_COL3;
	}
	
	return KPD_UNPRESSED;
 49e:	88 e7       	ldi	r24, 0x78	; 120
 4a0:	08 95       	ret

000004a2 <LCD_Instruction>:
		LCD_sendCmd(0b00011100);
	}
	else if (direction==LCD_SHIFT_DIS_LIFT)
	{
		//Shift left
		LCD_sendCmd(0b00011000);
 4a2:	81 11       	cpse	r24, r1
 4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <LCD_Instruction+0x16>
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	8a e0       	ldi	r24, 0x0A	; 10
 4aa:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	89 e0       	ldi	r24, 0x09	; 9
 4b2:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 4b6:	08 95       	ret
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	41 f4       	brne	.+16     	; 0x4cc <LCD_Instruction+0x2a>
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	89 e0       	ldi	r24, 0x09	; 9
 4c8:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 4cc:	08 95       	ret

000004ce <LCD_pulse>:
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	8b e0       	ldi	r24, 0x0B	; 11
 4d2:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 4d6:	8f e9       	ldi	r24, 0x9F	; 159
 4d8:	9f e0       	ldi	r25, 0x0F	; 15
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_pulse+0xc>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_pulse+0x12>
 4e0:	00 00       	nop
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	8b e0       	ldi	r24, 0x0B	; 11
 4e6:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 4ea:	08 95       	ret

000004ec <LCD_sendData>:
 4ec:	cf 93       	push	r28
 4ee:	c8 2f       	mov	r28, r24
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_Instruction>
 4f6:	c4 fb       	bst	r28, 4
 4f8:	66 27       	eor	r22, r22
 4fa:	60 f9       	bld	r22, 0
 4fc:	84 e0       	ldi	r24, 0x04	; 4
 4fe:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 502:	c5 fb       	bst	r28, 5
 504:	66 27       	eor	r22, r22
 506:	60 f9       	bld	r22, 0
 508:	85 e0       	ldi	r24, 0x05	; 5
 50a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 50e:	c6 fb       	bst	r28, 6
 510:	66 27       	eor	r22, r22
 512:	60 f9       	bld	r22, 0
 514:	86 e0       	ldi	r24, 0x06	; 6
 516:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 51a:	6c 2f       	mov	r22, r28
 51c:	66 1f       	adc	r22, r22
 51e:	66 27       	eor	r22, r22
 520:	66 1f       	adc	r22, r22
 522:	87 e0       	ldi	r24, 0x07	; 7
 524:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 528:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_pulse>
 52c:	6c 2f       	mov	r22, r28
 52e:	61 70       	andi	r22, 0x01	; 1
 530:	84 e0       	ldi	r24, 0x04	; 4
 532:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 536:	c1 fb       	bst	r28, 1
 538:	66 27       	eor	r22, r22
 53a:	60 f9       	bld	r22, 0
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 542:	c2 fb       	bst	r28, 2
 544:	66 27       	eor	r22, r22
 546:	60 f9       	bld	r22, 0
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 54e:	c3 fb       	bst	r28, 3
 550:	66 27       	eor	r22, r22
 552:	60 f9       	bld	r22, 0
 554:	87 e0       	ldi	r24, 0x07	; 7
 556:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 55a:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_pulse>
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <LCD_sendCmd>:
 562:	cf 93       	push	r28
 564:	c8 2f       	mov	r28, r24
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_Instruction>
 56c:	c4 fb       	bst	r28, 4
 56e:	66 27       	eor	r22, r22
 570:	60 f9       	bld	r22, 0
 572:	84 e0       	ldi	r24, 0x04	; 4
 574:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 578:	c5 fb       	bst	r28, 5
 57a:	66 27       	eor	r22, r22
 57c:	60 f9       	bld	r22, 0
 57e:	85 e0       	ldi	r24, 0x05	; 5
 580:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 584:	c6 fb       	bst	r28, 6
 586:	66 27       	eor	r22, r22
 588:	60 f9       	bld	r22, 0
 58a:	86 e0       	ldi	r24, 0x06	; 6
 58c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 590:	6c 2f       	mov	r22, r28
 592:	66 1f       	adc	r22, r22
 594:	66 27       	eor	r22, r22
 596:	66 1f       	adc	r22, r22
 598:	87 e0       	ldi	r24, 0x07	; 7
 59a:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 59e:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_pulse>
 5a2:	6c 2f       	mov	r22, r28
 5a4:	61 70       	andi	r22, 0x01	; 1
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 5ac:	c1 fb       	bst	r28, 1
 5ae:	66 27       	eor	r22, r22
 5b0:	60 f9       	bld	r22, 0
 5b2:	85 e0       	ldi	r24, 0x05	; 5
 5b4:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 5b8:	c2 fb       	bst	r28, 2
 5ba:	66 27       	eor	r22, r22
 5bc:	60 f9       	bld	r22, 0
 5be:	86 e0       	ldi	r24, 0x06	; 6
 5c0:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 5c4:	c3 fb       	bst	r28, 3
 5c6:	66 27       	eor	r22, r22
 5c8:	60 f9       	bld	r22, 0
 5ca:	87 e0       	ldi	r24, 0x07	; 7
 5cc:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 5d0:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_pulse>
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <LCD_init>:
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	85 e0       	ldi	r24, 0x05	; 5
 5e4:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	87 e0       	ldi	r24, 0x07	; 7
 5f4:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	8b e0       	ldi	r24, 0x0B	; 11
 5fc:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	8a e0       	ldi	r24, 0x0A	; 10
 604:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	89 e0       	ldi	r24, 0x09	; 9
 60c:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_setPinDir>
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_sendCmd>
 616:	2f ef       	ldi	r18, 0xFF	; 255
 618:	86 e7       	ldi	r24, 0x76	; 118
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	21 50       	subi	r18, 0x01	; 1
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	e1 f7       	brne	.-8      	; 0x61c <LCD_init+0x44>
 624:	00 c0       	rjmp	.+0      	; 0x626 <LCD_init+0x4e>
 626:	00 00       	nop
 628:	88 e2       	ldi	r24, 0x28	; 40
 62a:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_sendCmd>
 62e:	8f e9       	ldi	r24, 0x9F	; 159
 630:	9f e0       	ldi	r25, 0x0F	; 15
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <LCD_init+0x5a>
 636:	00 c0       	rjmp	.+0      	; 0x638 <LCD_init+0x60>
 638:	00 00       	nop
 63a:	8f e0       	ldi	r24, 0x0F	; 15
 63c:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_sendCmd>
 640:	8f e9       	ldi	r24, 0x9F	; 159
 642:	9f e0       	ldi	r25, 0x0F	; 15
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <LCD_init+0x6c>
 648:	00 c0       	rjmp	.+0      	; 0x64a <LCD_init+0x72>
 64a:	00 00       	nop
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_sendCmd>
 652:	8f e3       	ldi	r24, 0x3F	; 63
 654:	9f e1       	ldi	r25, 0x1F	; 31
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <LCD_init+0x7e>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_init+0x84>
 65c:	00 00       	nop
 65e:	86 e0       	ldi	r24, 0x06	; 6
 660:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_sendCmd>
 664:	08 95       	ret

00000666 <LCD_clearDis>:
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_sendCmd>
 66c:	08 95       	ret

0000066e <LCD_sendStr>:
	DIO_setPinValue(LCD_D7,GET_BIT(cmd,3));
	
	LCD_pulse();
}

void LCD_sendStr(u8* str){
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	8c 01       	movw	r16, r24
	u8 i=0;
 676:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i]!='\0')
 678:	03 c0       	rjmp	.+6      	; 0x680 <LCD_sendStr+0x12>
	{
		LCD_sendData(str[i]);
 67a:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_sendData>
		i++;
 67e:	cf 5f       	subi	r28, 0xFF	; 255
	LCD_pulse();
}

void LCD_sendStr(u8* str){
	u8 i=0;
	while (str[i]!='\0')
 680:	f8 01       	movw	r30, r16
 682:	ec 0f       	add	r30, r28
 684:	f1 1d       	adc	r31, r1
 686:	80 81       	ld	r24, Z
 688:	81 11       	cpse	r24, r1
 68a:	f7 cf       	rjmp	.-18     	; 0x67a <LCD_sendStr+0xc>
	{
		LCD_sendData(str[i]);
		i++;
	}
	
}
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <LCD_sendNum>:

void LCD_sendNum(s32 num){
 694:	ef 92       	push	r14
 696:	ff 92       	push	r15
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	2a 97       	sbiw	r28, 0x0a	; 10
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	f8 94       	cli
 6a8:	de bf       	out	0x3e, r29	; 62
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	cd bf       	out	0x3d, r28	; 61
 6ae:	7c 01       	movw	r14, r24
	u8 arr_numbers[10] ;
	s8 i=0;	
	if(num==0){
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	21 f4       	brne	.+8      	; 0x6bc <LCD_sendNum+0x28>
		LCD_sendData('0');
 6b4:	80 e3       	ldi	r24, 0x30	; 48
 6b6:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_sendData>
 6ba:	2c c0       	rjmp	.+88     	; 0x714 <LCD_sendNum+0x80>
		return;
	}
	else if (num<0)
 6bc:	99 23       	and	r25, r25
 6be:	1c f4       	brge	.+6      	; 0x6c6 <LCD_sendNum+0x32>
	{
		LCD_sendData('-');
 6c0:	8d e2       	ldi	r24, 0x2D	; 45
 6c2:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_sendData>
		i++;
	}
	
}

void LCD_sendNum(s32 num){
 6c6:	10 e0       	ldi	r17, 0x00	; 0
 6c8:	12 c0       	rjmp	.+36     	; 0x6ee <LCD_sendNum+0x5a>
		LCD_sendData('-');
	}
	
	while (num>0)
	{
		arr_numbers[i]=(num%10)+48;
 6ca:	c7 01       	movw	r24, r14
 6cc:	6a e0       	ldi	r22, 0x0A	; 10
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	0e 94 34 06 	call	0xc68	; 0xc68 <__divmodhi4>
 6d4:	e1 e0       	ldi	r30, 0x01	; 1
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	ec 0f       	add	r30, r28
 6da:	fd 1f       	adc	r31, r29
 6dc:	e1 0f       	add	r30, r17
 6de:	f1 1d       	adc	r31, r1
 6e0:	17 fd       	sbrc	r17, 7
 6e2:	fa 95       	dec	r31
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	80 83       	st	Z, r24
		num=num/10;
 6e8:	e6 2e       	mov	r14, r22
 6ea:	f7 2e       	mov	r15, r23
		i++;
 6ec:	1f 5f       	subi	r17, 0xFF	; 255
	else if (num<0)
	{
		LCD_sendData('-');
	}
	
	while (num>0)
 6ee:	1e 14       	cp	r1, r14
 6f0:	1f 04       	cpc	r1, r15
 6f2:	5c f3       	brlt	.-42     	; 0x6ca <LCD_sendNum+0x36>
	{
		arr_numbers[i]=(num%10)+48;
		num=num/10;
		i++;
	}
	i--;
 6f4:	11 50       	subi	r17, 0x01	; 1
	while (i>=0)
 6f6:	0c c0       	rjmp	.+24     	; 0x710 <LCD_sendNum+0x7c>
	{
		LCD_sendData(arr_numbers[i]);
 6f8:	e1 e0       	ldi	r30, 0x01	; 1
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	ec 0f       	add	r30, r28
 6fe:	fd 1f       	adc	r31, r29
 700:	e1 0f       	add	r30, r17
 702:	f1 1d       	adc	r31, r1
 704:	17 fd       	sbrc	r17, 7
 706:	fa 95       	dec	r31
 708:	80 81       	ld	r24, Z
 70a:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_sendData>
		i--;
 70e:	11 50       	subi	r17, 0x01	; 1
		arr_numbers[i]=(num%10)+48;
		num=num/10;
		i++;
	}
	i--;
	while (i>=0)
 710:	11 23       	and	r17, r17
 712:	94 f7       	brge	.-28     	; 0x6f8 <LCD_sendNum+0x64>
	{
		LCD_sendData(arr_numbers[i]);
		i--;
	}
}
 714:	2a 96       	adiw	r28, 0x0a	; 10
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	08 95       	ret

0000072c <DIO_setPinDir>:
	}
}

void DIO_togglePinValue(u8 pinNum){
	DIO_setPinValue(pinNum,!DIO_readPinValue(pinNum));
}
 72c:	88 30       	cpi	r24, 0x08	; 8
 72e:	00 f5       	brcc	.+64     	; 0x770 <DIO_setPinDir+0x44>
 730:	61 11       	cpse	r22, r1
 732:	0e c0       	rjmp	.+28     	; 0x750 <DIO_setPinDir+0x24>
 734:	4a b3       	in	r20, 0x1a	; 26
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	b9 01       	movw	r22, r18
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_setPinDir+0x16>
 73e:	66 0f       	add	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	8a 95       	dec	r24
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_setPinDir+0x12>
 746:	cb 01       	movw	r24, r22
 748:	80 95       	com	r24
 74a:	84 23       	and	r24, r20
 74c:	8a bb       	out	0x1a, r24	; 26
 74e:	08 95       	ret
 750:	61 30       	cpi	r22, 0x01	; 1
 752:	09 f0       	breq	.+2      	; 0x756 <DIO_setPinDir+0x2a>
 754:	75 c0       	rjmp	.+234    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 756:	4a b3       	in	r20, 0x1a	; 26
 758:	21 e0       	ldi	r18, 0x01	; 1
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	b9 01       	movw	r22, r18
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_setPinDir+0x38>
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	8a 95       	dec	r24
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_setPinDir+0x34>
 768:	cb 01       	movw	r24, r22
 76a:	84 2b       	or	r24, r20
 76c:	8a bb       	out	0x1a, r24	; 26
 76e:	08 95       	ret
 770:	98 ef       	ldi	r25, 0xF8	; 248
 772:	98 0f       	add	r25, r24
 774:	98 30       	cpi	r25, 0x08	; 8
 776:	00 f5       	brcc	.+64     	; 0x7b8 <DIO_setPinDir+0x8c>
 778:	61 11       	cpse	r22, r1
 77a:	0e c0       	rjmp	.+28     	; 0x798 <DIO_setPinDir+0x6c>
 77c:	47 b3       	in	r20, 0x17	; 23
 77e:	21 e0       	ldi	r18, 0x01	; 1
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	b9 01       	movw	r22, r18
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_setPinDir+0x5e>
 786:	66 0f       	add	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	9a 95       	dec	r25
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_setPinDir+0x5a>
 78e:	cb 01       	movw	r24, r22
 790:	80 95       	com	r24
 792:	84 23       	and	r24, r20
 794:	87 bb       	out	0x17, r24	; 23
 796:	08 95       	ret
 798:	61 30       	cpi	r22, 0x01	; 1
 79a:	09 f0       	breq	.+2      	; 0x79e <DIO_setPinDir+0x72>
 79c:	51 c0       	rjmp	.+162    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 79e:	47 b3       	in	r20, 0x17	; 23
 7a0:	21 e0       	ldi	r18, 0x01	; 1
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	b9 01       	movw	r22, r18
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_setPinDir+0x80>
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	9a 95       	dec	r25
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_setPinDir+0x7c>
 7b0:	cb 01       	movw	r24, r22
 7b2:	84 2b       	or	r24, r20
 7b4:	87 bb       	out	0x17, r24	; 23
 7b6:	08 95       	ret
 7b8:	90 ef       	ldi	r25, 0xF0	; 240
 7ba:	98 0f       	add	r25, r24
 7bc:	98 30       	cpi	r25, 0x08	; 8
 7be:	f8 f4       	brcc	.+62     	; 0x7fe <DIO_setPinDir+0xd2>
 7c0:	61 11       	cpse	r22, r1
 7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <DIO_setPinDir+0xb4>
 7c4:	44 b3       	in	r20, 0x14	; 20
 7c6:	21 e0       	ldi	r18, 0x01	; 1
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	b9 01       	movw	r22, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_setPinDir+0xa6>
 7ce:	66 0f       	add	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	9a 95       	dec	r25
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_setPinDir+0xa2>
 7d6:	cb 01       	movw	r24, r22
 7d8:	80 95       	com	r24
 7da:	84 23       	and	r24, r20
 7dc:	84 bb       	out	0x14, r24	; 20
 7de:	08 95       	ret
 7e0:	61 30       	cpi	r22, 0x01	; 1
 7e2:	71 f5       	brne	.+92     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7e4:	44 b3       	in	r20, 0x14	; 20
 7e6:	21 e0       	ldi	r18, 0x01	; 1
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	b9 01       	movw	r22, r18
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_setPinDir+0xc6>
 7ee:	66 0f       	add	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	9a 95       	dec	r25
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_setPinDir+0xc2>
 7f6:	cb 01       	movw	r24, r22
 7f8:	84 2b       	or	r24, r20
 7fa:	84 bb       	out	0x14, r24	; 20
 7fc:	08 95       	ret
 7fe:	88 51       	subi	r24, 0x18	; 24
 800:	88 30       	cpi	r24, 0x08	; 8
 802:	f0 f4       	brcc	.+60     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 804:	61 11       	cpse	r22, r1
 806:	0e c0       	rjmp	.+28     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 808:	41 b3       	in	r20, 0x11	; 17
 80a:	21 e0       	ldi	r18, 0x01	; 1
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	b9 01       	movw	r22, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	8a 95       	dec	r24
 818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	cb 01       	movw	r24, r22
 81c:	80 95       	com	r24
 81e:	84 23       	and	r24, r20
 820:	81 bb       	out	0x11, r24	; 17
 822:	08 95       	ret
 824:	61 30       	cpi	r22, 0x01	; 1
 826:	61 f4       	brne	.+24     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 828:	41 b3       	in	r20, 0x11	; 17
 82a:	21 e0       	ldi	r18, 0x01	; 1
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	b9 01       	movw	r22, r18
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	8a 95       	dec	r24
 838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 83a:	cb 01       	movw	r24, r22
 83c:	84 2b       	or	r24, r20
 83e:	81 bb       	out	0x11, r24	; 17
 840:	08 95       	ret

00000842 <DIO_setPinValue>:
 842:	88 30       	cpi	r24, 0x08	; 8
 844:	00 f5       	brcc	.+64     	; 0x886 <__stack+0x27>
 846:	61 11       	cpse	r22, r1
 848:	0e c0       	rjmp	.+28     	; 0x866 <__stack+0x7>
 84a:	4b b3       	in	r20, 0x1b	; 27
 84c:	21 e0       	ldi	r18, 0x01	; 1
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	b9 01       	movw	r22, r18
 852:	02 c0       	rjmp	.+4      	; 0x858 <DIO_setPinValue+0x16>
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	8a 95       	dec	r24
 85a:	e2 f7       	brpl	.-8      	; 0x854 <DIO_setPinValue+0x12>
 85c:	cb 01       	movw	r24, r22
 85e:	80 95       	com	r24
 860:	84 23       	and	r24, r20
 862:	8b bb       	out	0x1b, r24	; 27
 864:	08 95       	ret
 866:	61 30       	cpi	r22, 0x01	; 1
 868:	09 f0       	breq	.+2      	; 0x86c <__stack+0xd>
 86a:	75 c0       	rjmp	.+234    	; 0x956 <__stack+0xf7>
 86c:	4b b3       	in	r20, 0x1b	; 27
 86e:	21 e0       	ldi	r18, 0x01	; 1
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	b9 01       	movw	r22, r18
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	8a 95       	dec	r24
 87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
 87e:	cb 01       	movw	r24, r22
 880:	84 2b       	or	r24, r20
 882:	8b bb       	out	0x1b, r24	; 27
 884:	08 95       	ret
 886:	98 ef       	ldi	r25, 0xF8	; 248
 888:	98 0f       	add	r25, r24
 88a:	98 30       	cpi	r25, 0x08	; 8
 88c:	00 f5       	brcc	.+64     	; 0x8ce <__stack+0x6f>
 88e:	61 11       	cpse	r22, r1
 890:	0e c0       	rjmp	.+28     	; 0x8ae <__stack+0x4f>
 892:	48 b3       	in	r20, 0x18	; 24
 894:	21 e0       	ldi	r18, 0x01	; 1
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	b9 01       	movw	r22, r18
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	9a 95       	dec	r25
 8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
 8a4:	cb 01       	movw	r24, r22
 8a6:	80 95       	com	r24
 8a8:	84 23       	and	r24, r20
 8aa:	88 bb       	out	0x18, r24	; 24
 8ac:	08 95       	ret
 8ae:	61 30       	cpi	r22, 0x01	; 1
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <__stack+0x55>
 8b2:	51 c0       	rjmp	.+162    	; 0x956 <__stack+0xf7>
 8b4:	48 b3       	in	r20, 0x18	; 24
 8b6:	21 e0       	ldi	r18, 0x01	; 1
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	b9 01       	movw	r22, r18
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	9a 95       	dec	r25
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
 8c6:	cb 01       	movw	r24, r22
 8c8:	84 2b       	or	r24, r20
 8ca:	88 bb       	out	0x18, r24	; 24
 8cc:	08 95       	ret
 8ce:	90 ef       	ldi	r25, 0xF0	; 240
 8d0:	98 0f       	add	r25, r24
 8d2:	98 30       	cpi	r25, 0x08	; 8
 8d4:	f8 f4       	brcc	.+62     	; 0x914 <__stack+0xb5>
 8d6:	61 11       	cpse	r22, r1
 8d8:	0e c0       	rjmp	.+28     	; 0x8f6 <__stack+0x97>
 8da:	45 b3       	in	r20, 0x15	; 21
 8dc:	21 e0       	ldi	r18, 0x01	; 1
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	b9 01       	movw	r22, r18
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
 8e4:	66 0f       	add	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	9a 95       	dec	r25
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <__stack+0x85>
 8ec:	cb 01       	movw	r24, r22
 8ee:	80 95       	com	r24
 8f0:	84 23       	and	r24, r20
 8f2:	85 bb       	out	0x15, r24	; 21
 8f4:	08 95       	ret
 8f6:	61 30       	cpi	r22, 0x01	; 1
 8f8:	71 f5       	brne	.+92     	; 0x956 <__stack+0xf7>
 8fa:	45 b3       	in	r20, 0x15	; 21
 8fc:	21 e0       	ldi	r18, 0x01	; 1
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	b9 01       	movw	r22, r18
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
 904:	66 0f       	add	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	9a 95       	dec	r25
 90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
 90c:	cb 01       	movw	r24, r22
 90e:	84 2b       	or	r24, r20
 910:	85 bb       	out	0x15, r24	; 21
 912:	08 95       	ret
 914:	88 51       	subi	r24, 0x18	; 24
 916:	88 30       	cpi	r24, 0x08	; 8
 918:	f0 f4       	brcc	.+60     	; 0x956 <__stack+0xf7>
 91a:	61 11       	cpse	r22, r1
 91c:	0e c0       	rjmp	.+28     	; 0x93a <__stack+0xdb>
 91e:	42 b3       	in	r20, 0x12	; 18
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	b9 01       	movw	r22, r18
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	8a 95       	dec	r24
 92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
 930:	cb 01       	movw	r24, r22
 932:	80 95       	com	r24
 934:	84 23       	and	r24, r20
 936:	82 bb       	out	0x12, r24	; 18
 938:	08 95       	ret
 93a:	61 30       	cpi	r22, 0x01	; 1
 93c:	61 f4       	brne	.+24     	; 0x956 <__stack+0xf7>
 93e:	42 b3       	in	r20, 0x12	; 18
 940:	21 e0       	ldi	r18, 0x01	; 1
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	b9 01       	movw	r22, r18
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0xed>
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	8a 95       	dec	r24
 94e:	e2 f7       	brpl	.-8      	; 0x948 <__stack+0xe9>
 950:	cb 01       	movw	r24, r22
 952:	84 2b       	or	r24, r20
 954:	82 bb       	out	0x12, r24	; 18
 956:	08 95       	ret

00000958 <DIO_readPinValue>:
 958:	88 30       	cpi	r24, 0x08	; 8
 95a:	58 f4       	brcc	.+22     	; 0x972 <DIO_readPinValue+0x1a>
 95c:	29 b3       	in	r18, 0x19	; 25
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	a9 01       	movw	r20, r18
 962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_readPinValue+0x10>
 964:	55 95       	asr	r21
 966:	47 95       	ror	r20
 968:	8a 95       	dec	r24
 96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_readPinValue+0xc>
 96c:	ca 01       	movw	r24, r20
 96e:	81 70       	andi	r24, 0x01	; 1
 970:	08 95       	ret
 972:	28 ef       	ldi	r18, 0xF8	; 248
 974:	28 0f       	add	r18, r24
 976:	28 30       	cpi	r18, 0x08	; 8
 978:	48 f4       	brcc	.+18     	; 0x98c <DIO_readPinValue+0x34>
 97a:	86 b3       	in	r24, 0x16	; 22
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	02 c0       	rjmp	.+4      	; 0x984 <DIO_readPinValue+0x2c>
 980:	95 95       	asr	r25
 982:	87 95       	ror	r24
 984:	2a 95       	dec	r18
 986:	e2 f7       	brpl	.-8      	; 0x980 <DIO_readPinValue+0x28>
 988:	81 70       	andi	r24, 0x01	; 1
 98a:	08 95       	ret
 98c:	20 ef       	ldi	r18, 0xF0	; 240
 98e:	28 0f       	add	r18, r24
 990:	28 30       	cpi	r18, 0x08	; 8
 992:	48 f4       	brcc	.+18     	; 0x9a6 <DIO_readPinValue+0x4e>
 994:	83 b3       	in	r24, 0x13	; 19
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_readPinValue+0x46>
 99a:	95 95       	asr	r25
 99c:	87 95       	ror	r24
 99e:	2a 95       	dec	r18
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_readPinValue+0x42>
 9a2:	81 70       	andi	r24, 0x01	; 1
 9a4:	08 95       	ret
 9a6:	28 ee       	ldi	r18, 0xE8	; 232
 9a8:	28 0f       	add	r18, r24
 9aa:	28 30       	cpi	r18, 0x08	; 8
 9ac:	50 f4       	brcc	.+20     	; 0x9c2 <DIO_readPinValue+0x6a>
 9ae:	90 b3       	in	r25, 0x10	; 16
 9b0:	89 2f       	mov	r24, r25
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_readPinValue+0x62>
 9b6:	95 95       	asr	r25
 9b8:	87 95       	ror	r24
 9ba:	2a 95       	dec	r18
 9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_readPinValue+0x5e>
 9be:	81 70       	andi	r24, 0x01	; 1
 9c0:	08 95       	ret
 9c2:	08 95       	ret

000009c4 <DIO_setPullUp>:

void DIO_setPullUp(u8 pinNum){
	DIO_setPinValue(pinNum,DIO_HIGH);
 9c4:	61 e0       	ldi	r22, 0x01	; 1
 9c6:	0e 94 21 04 	call	0x842	; 0x842 <DIO_setPinValue>
 9ca:	08 95       	ret

000009cc <__vector_1>:
//Vector 3
void (*EXT_int2Func)();

//call back function to send the function from the main function
void EXT_setcallbackInt2(void (*ptr)()){
	EXT_int2Func = ptr;
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	2f 93       	push	r18
 9d8:	3f 93       	push	r19
 9da:	4f 93       	push	r20
 9dc:	5f 93       	push	r21
 9de:	6f 93       	push	r22
 9e0:	7f 93       	push	r23
 9e2:	8f 93       	push	r24
 9e4:	9f 93       	push	r25
 9e6:	af 93       	push	r26
 9e8:	bf 93       	push	r27
 9ea:	ef 93       	push	r30
 9ec:	ff 93       	push	r31
 9ee:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <EXT_int0Func>
 9f2:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <EXT_int0Func+0x1>
 9f6:	09 95       	icall
 9f8:	ff 91       	pop	r31
 9fa:	ef 91       	pop	r30
 9fc:	bf 91       	pop	r27
 9fe:	af 91       	pop	r26
 a00:	9f 91       	pop	r25
 a02:	8f 91       	pop	r24
 a04:	7f 91       	pop	r23
 a06:	6f 91       	pop	r22
 a08:	5f 91       	pop	r21
 a0a:	4f 91       	pop	r20
 a0c:	3f 91       	pop	r19
 a0e:	2f 91       	pop	r18
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <__vector_2>:
 a1a:	1f 92       	push	r1
 a1c:	0f 92       	push	r0
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	0f 92       	push	r0
 a22:	11 24       	eor	r1, r1
 a24:	2f 93       	push	r18
 a26:	3f 93       	push	r19
 a28:	4f 93       	push	r20
 a2a:	5f 93       	push	r21
 a2c:	6f 93       	push	r22
 a2e:	7f 93       	push	r23
 a30:	8f 93       	push	r24
 a32:	9f 93       	push	r25
 a34:	af 93       	push	r26
 a36:	bf 93       	push	r27
 a38:	ef 93       	push	r30
 a3a:	ff 93       	push	r31
 a3c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end>
 a40:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x1>
 a44:	09 95       	icall
 a46:	ff 91       	pop	r31
 a48:	ef 91       	pop	r30
 a4a:	bf 91       	pop	r27
 a4c:	af 91       	pop	r26
 a4e:	9f 91       	pop	r25
 a50:	8f 91       	pop	r24
 a52:	7f 91       	pop	r23
 a54:	6f 91       	pop	r22
 a56:	5f 91       	pop	r21
 a58:	4f 91       	pop	r20
 a5a:	3f 91       	pop	r19
 a5c:	2f 91       	pop	r18
 a5e:	0f 90       	pop	r0
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	0f 90       	pop	r0
 a64:	1f 90       	pop	r1
 a66:	18 95       	reti

00000a68 <__vector_3>:
}

//Vector Table Function that belongs to INT2
//number(in vector table) - 1
void __vector_3() __attribute__((signal));
void __vector_3(){
 a68:	1f 92       	push	r1
 a6a:	0f 92       	push	r0
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	0f 92       	push	r0
 a70:	11 24       	eor	r1, r1
 a72:	2f 93       	push	r18
 a74:	3f 93       	push	r19
 a76:	4f 93       	push	r20
 a78:	5f 93       	push	r21
 a7a:	6f 93       	push	r22
 a7c:	7f 93       	push	r23
 a7e:	8f 93       	push	r24
 a80:	9f 93       	push	r25
 a82:	af 93       	push	r26
 a84:	bf 93       	push	r27
 a86:	ef 93       	push	r30
 a88:	ff 93       	push	r31
	EXT_int2Func();
 a8a:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXT_int2Func>
 a8e:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXT_int2Func+0x1>
 a92:	09 95       	icall
 a94:	ff 91       	pop	r31
 a96:	ef 91       	pop	r30
 a98:	bf 91       	pop	r27
 a9a:	af 91       	pop	r26
 a9c:	9f 91       	pop	r25
 a9e:	8f 91       	pop	r24
 aa0:	7f 91       	pop	r23
 aa2:	6f 91       	pop	r22
 aa4:	5f 91       	pop	r21
 aa6:	4f 91       	pop	r20
 aa8:	3f 91       	pop	r19
 aaa:	2f 91       	pop	r18
 aac:	0f 90       	pop	r0
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	0f 90       	pop	r0
 ab2:	1f 90       	pop	r1
 ab4:	18 95       	reti

00000ab6 <I2C_init>:
 */ 

#include "I2C_INT.h"

void I2C_init(I2C_mode mode){
	if (mode==MASTER)
 ab6:	81 30       	cpi	r24, 0x01	; 1
 ab8:	21 f0       	breq	.+8      	; 0xac2 <I2C_init+0xc>
	{
	} 
	else if (mode==SLAVE)
 aba:	81 11       	cpse	r24, r1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <I2C_init+0xc>
	{
		TWAR = I2C_SLAVE_ADDRESS<<1;
 abe:	80 ea       	ldi	r24, 0xA0	; 160
 ac0:	82 b9       	out	0x02, r24	; 2
	}
	
	//Enable
	SET_BIT(TWCR,TWEN);
 ac2:	86 b7       	in	r24, 0x36	; 54
 ac4:	84 60       	ori	r24, 0x04	; 4
 ac6:	86 bf       	out	0x36, r24	; 54
	TWBR = 72;
 ac8:	88 e4       	ldi	r24, 0x48	; 72
 aca:	80 b9       	out	0x00, r24	; 0
 acc:	08 95       	ret

00000ace <__vector_11>:
//pointer to CTC function
void (*TIMER0_CTCFunc)();

//call back function to send the function from the main function
void TIMER_setcallbackCTC(void (*ptr)()){
	TIMER0_CTCFunc = ptr;
 ace:	1f 92       	push	r1
 ad0:	0f 92       	push	r0
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	0f 92       	push	r0
 ad6:	11 24       	eor	r1, r1
 ad8:	2f 93       	push	r18
 ada:	3f 93       	push	r19
 adc:	4f 93       	push	r20
 ade:	5f 93       	push	r21
 ae0:	6f 93       	push	r22
 ae2:	7f 93       	push	r23
 ae4:	8f 93       	push	r24
 ae6:	9f 93       	push	r25
 ae8:	af 93       	push	r26
 aea:	bf 93       	push	r27
 aec:	ef 93       	push	r30
 aee:	ff 93       	push	r31
 af0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <TIMER0_OvFunc>
 af4:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <TIMER0_OvFunc+0x1>
 af8:	09 95       	icall
 afa:	ff 91       	pop	r31
 afc:	ef 91       	pop	r30
 afe:	bf 91       	pop	r27
 b00:	af 91       	pop	r26
 b02:	9f 91       	pop	r25
 b04:	8f 91       	pop	r24
 b06:	7f 91       	pop	r23
 b08:	6f 91       	pop	r22
 b0a:	5f 91       	pop	r21
 b0c:	4f 91       	pop	r20
 b0e:	3f 91       	pop	r19
 b10:	2f 91       	pop	r18
 b12:	0f 90       	pop	r0
 b14:	0f be       	out	0x3f, r0	; 63
 b16:	0f 90       	pop	r0
 b18:	1f 90       	pop	r1
 b1a:	18 95       	reti

00000b1c <__vector_10>:
}

//Vector Table Function that belongs to INT0
//number(in vector table) - 1
void __vector_10() __attribute__((signal));
void __vector_10(){
 b1c:	1f 92       	push	r1
 b1e:	0f 92       	push	r0
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	0f 92       	push	r0
 b24:	11 24       	eor	r1, r1
 b26:	2f 93       	push	r18
 b28:	3f 93       	push	r19
 b2a:	4f 93       	push	r20
 b2c:	5f 93       	push	r21
 b2e:	6f 93       	push	r22
 b30:	7f 93       	push	r23
 b32:	8f 93       	push	r24
 b34:	9f 93       	push	r25
 b36:	af 93       	push	r26
 b38:	bf 93       	push	r27
 b3a:	ef 93       	push	r30
 b3c:	ff 93       	push	r31
	TIMER0_CTCFunc();
 b3e:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <TIMER0_CTCFunc>
 b42:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <TIMER0_CTCFunc+0x1>
 b46:	09 95       	icall
	//LCD_Shift(LCD_SHIFT_DIS_LIFT);
}
 b48:	ff 91       	pop	r31
 b4a:	ef 91       	pop	r30
 b4c:	bf 91       	pop	r27
 b4e:	af 91       	pop	r26
 b50:	9f 91       	pop	r25
 b52:	8f 91       	pop	r24
 b54:	7f 91       	pop	r23
 b56:	6f 91       	pop	r22
 b58:	5f 91       	pop	r21
 b5a:	4f 91       	pop	r20
 b5c:	3f 91       	pop	r19
 b5e:	2f 91       	pop	r18
 b60:	0f 90       	pop	r0
 b62:	0f be       	out	0x3f, r0	; 63
 b64:	0f 90       	pop	r0
 b66:	1f 90       	pop	r1
 b68:	18 95       	reti

00000b6a <__vector_6>:
}

//Vector Table Function that belongs to TIMER1
//number(in vector table) - 1
void __vector_6() __attribute__((signal));
void __vector_6(){
 b6a:	1f 92       	push	r1
 b6c:	0f 92       	push	r0
 b6e:	0f b6       	in	r0, 0x3f	; 63
 b70:	0f 92       	push	r0
 b72:	11 24       	eor	r1, r1
 b74:	2f 93       	push	r18
 b76:	3f 93       	push	r19
 b78:	4f 93       	push	r20
 b7a:	5f 93       	push	r21
 b7c:	6f 93       	push	r22
 b7e:	7f 93       	push	r23
 b80:	8f 93       	push	r24
 b82:	9f 93       	push	r25
 b84:	af 93       	push	r26
 b86:	bf 93       	push	r27
 b88:	ef 93       	push	r30
 b8a:	ff 93       	push	r31
	TIMER1_IcuFunc();
 b8c:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <TIMER1_IcuFunc>
 b90:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <TIMER1_IcuFunc+0x1>
 b94:	09 95       	icall
 b96:	ff 91       	pop	r31
 b98:	ef 91       	pop	r30
 b9a:	bf 91       	pop	r27
 b9c:	af 91       	pop	r26
 b9e:	9f 91       	pop	r25
 ba0:	8f 91       	pop	r24
 ba2:	7f 91       	pop	r23
 ba4:	6f 91       	pop	r22
 ba6:	5f 91       	pop	r21
 ba8:	4f 91       	pop	r20
 baa:	3f 91       	pop	r19
 bac:	2f 91       	pop	r18
 bae:	0f 90       	pop	r0
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	0f 90       	pop	r0
 bb4:	1f 90       	pop	r1
 bb6:	18 95       	reti

00000bb8 <UART_init>:
//pointer to UART Interrupt function
void (*UART_INTFunc)();

//call back function to send the function from the main function
void UART_setcallbackINT(void (*ptr)()){
	UART_INTFunc = ptr;
 bb8:	8a b1       	in	r24, 0x0a	; 10
 bba:	88 60       	ori	r24, 0x08	; 8
 bbc:	8a b9       	out	0x0a, r24	; 10
 bbe:	8a b1       	in	r24, 0x0a	; 10
 bc0:	80 61       	ori	r24, 0x10	; 16
 bc2:	8a b9       	out	0x0a, r24	; 10
 bc4:	8a b1       	in	r24, 0x0a	; 10
 bc6:	8b 7f       	andi	r24, 0xFB	; 251
 bc8:	8a b9       	out	0x0a, r24	; 10
 bca:	86 e8       	ldi	r24, 0x86	; 134
 bcc:	80 bd       	out	0x20, r24	; 32
 bce:	87 e6       	ldi	r24, 0x67	; 103
 bd0:	89 b9       	out	0x09, r24	; 9
 bd2:	10 bc       	out	0x20, r1	; 32
 bd4:	08 95       	ret

00000bd6 <UART_sendData>:
 bd6:	5d 9b       	sbis	0x0b, 5	; 11
 bd8:	fe cf       	rjmp	.-4      	; 0xbd6 <UART_sendData>
 bda:	8c b9       	out	0x0c, r24	; 12
 bdc:	08 95       	ret

00000bde <UART_sendStr>:
 bde:	0f 93       	push	r16
 be0:	1f 93       	push	r17
 be2:	cf 93       	push	r28
 be4:	8c 01       	movw	r16, r24
 be6:	c0 e0       	ldi	r28, 0x00	; 0
 be8:	03 c0       	rjmp	.+6      	; 0xbf0 <UART_sendStr+0x12>
 bea:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <UART_sendData>
 bee:	cf 5f       	subi	r28, 0xFF	; 255
 bf0:	f8 01       	movw	r30, r16
 bf2:	ec 0f       	add	r30, r28
 bf4:	f1 1d       	adc	r31, r1
 bf6:	80 81       	ld	r24, Z
 bf8:	81 11       	cpse	r24, r1
 bfa:	f7 cf       	rjmp	.-18     	; 0xbea <UART_sendStr+0xc>
 bfc:	cf 91       	pop	r28
 bfe:	1f 91       	pop	r17
 c00:	0f 91       	pop	r16
 c02:	08 95       	ret

00000c04 <UART_receiveData>:
 c04:	80 ea       	ldi	r24, 0xA0	; 160
 c06:	96 e8       	ldi	r25, 0x86	; 134
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <UART_receiveData+0xa>
 c0a:	01 97       	sbiw	r24, 0x01	; 1
 c0c:	21 f0       	breq	.+8      	; 0xc16 <UART_receiveData+0x12>
 c0e:	5f 9b       	sbis	0x0b, 7	; 11
 c10:	fc cf       	rjmp	.-8      	; 0xc0a <UART_receiveData+0x6>
 c12:	8c b1       	in	r24, 0x0c	; 12
 c14:	08 95       	ret
 c16:	88 e7       	ldi	r24, 0x78	; 120
 c18:	08 95       	ret

00000c1a <__vector_13>:
}

//Vector Table Function that belongs to UART_INT
//number(in vector table) - 1
void __vector_13() __attribute__((signal));
void __vector_13(){
 c1a:	1f 92       	push	r1
 c1c:	0f 92       	push	r0
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	0f 92       	push	r0
 c22:	11 24       	eor	r1, r1
 c24:	2f 93       	push	r18
 c26:	3f 93       	push	r19
 c28:	4f 93       	push	r20
 c2a:	5f 93       	push	r21
 c2c:	6f 93       	push	r22
 c2e:	7f 93       	push	r23
 c30:	8f 93       	push	r24
 c32:	9f 93       	push	r25
 c34:	af 93       	push	r26
 c36:	bf 93       	push	r27
 c38:	ef 93       	push	r30
 c3a:	ff 93       	push	r31
	UART_INTFunc();
 c3c:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <UART_INTFunc>
 c40:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <UART_INTFunc+0x1>
 c44:	09 95       	icall
 c46:	ff 91       	pop	r31
 c48:	ef 91       	pop	r30
 c4a:	bf 91       	pop	r27
 c4c:	af 91       	pop	r26
 c4e:	9f 91       	pop	r25
 c50:	8f 91       	pop	r24
 c52:	7f 91       	pop	r23
 c54:	6f 91       	pop	r22
 c56:	5f 91       	pop	r21
 c58:	4f 91       	pop	r20
 c5a:	3f 91       	pop	r19
 c5c:	2f 91       	pop	r18
 c5e:	0f 90       	pop	r0
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	0f 90       	pop	r0
 c64:	1f 90       	pop	r1
 c66:	18 95       	reti

00000c68 <__divmodhi4>:
 c68:	97 fb       	bst	r25, 7
 c6a:	07 2e       	mov	r0, r23
 c6c:	16 f4       	brtc	.+4      	; 0xc72 <__divmodhi4+0xa>
 c6e:	00 94       	com	r0
 c70:	07 d0       	rcall	.+14     	; 0xc80 <__divmodhi4_neg1>
 c72:	77 fd       	sbrc	r23, 7
 c74:	09 d0       	rcall	.+18     	; 0xc88 <__divmodhi4_neg2>
 c76:	0e 94 48 06 	call	0xc90	; 0xc90 <__udivmodhi4>
 c7a:	07 fc       	sbrc	r0, 7
 c7c:	05 d0       	rcall	.+10     	; 0xc88 <__divmodhi4_neg2>
 c7e:	3e f4       	brtc	.+14     	; 0xc8e <__divmodhi4_exit>

00000c80 <__divmodhi4_neg1>:
 c80:	90 95       	com	r25
 c82:	81 95       	neg	r24
 c84:	9f 4f       	sbci	r25, 0xFF	; 255
 c86:	08 95       	ret

00000c88 <__divmodhi4_neg2>:
 c88:	70 95       	com	r23
 c8a:	61 95       	neg	r22
 c8c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c8e <__divmodhi4_exit>:
 c8e:	08 95       	ret

00000c90 <__udivmodhi4>:
 c90:	aa 1b       	sub	r26, r26
 c92:	bb 1b       	sub	r27, r27
 c94:	51 e1       	ldi	r21, 0x11	; 17
 c96:	07 c0       	rjmp	.+14     	; 0xca6 <__udivmodhi4_ep>

00000c98 <__udivmodhi4_loop>:
 c98:	aa 1f       	adc	r26, r26
 c9a:	bb 1f       	adc	r27, r27
 c9c:	a6 17       	cp	r26, r22
 c9e:	b7 07       	cpc	r27, r23
 ca0:	10 f0       	brcs	.+4      	; 0xca6 <__udivmodhi4_ep>
 ca2:	a6 1b       	sub	r26, r22
 ca4:	b7 0b       	sbc	r27, r23

00000ca6 <__udivmodhi4_ep>:
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	5a 95       	dec	r21
 cac:	a9 f7       	brne	.-22     	; 0xc98 <__udivmodhi4_loop>
 cae:	80 95       	com	r24
 cb0:	90 95       	com	r25
 cb2:	bc 01       	movw	r22, r24
 cb4:	cd 01       	movw	r24, r26
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
