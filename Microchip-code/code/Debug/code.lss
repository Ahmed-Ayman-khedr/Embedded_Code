
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000117a  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082c  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000867  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000936  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000039de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 15 03 	jmp	0x62a	; 0x62a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "BIT_MATH.h"

#include "Sess18/ASG2/ASS_INT.h"

int main(){
	source_code();
  6c:	0e 94 3b 00 	call	0x76	; 0x76 <source_code>
	return 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <source_code>:
#include "Sess18\ASG2\ASS_INT.h"

int source_code()
{
	//LCD initialization
	LCD_int();
  76:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_int>
	//Counter
	u8 counter=0;
	
	//Increment button
	u8 increment_state;
	DIO_setPinDir(DIO_PIND0,DIO_OUTPUT);
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	88 e1       	ldi	r24, 0x18	; 24
  7e:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
	
	//Decrement button
	u8 decrement_state;
	DIO_setPinDir(DIO_PIND6,DIO_OUTPUT);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	8e e1       	ldi	r24, 0x1E	; 30
  86:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
	
	//clear and start display at 0
	LCD_clearDis();
  8a:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_clearDis>
	LCD_sendNum(counter);
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_sendNum>
{
	//LCD initialization
	LCD_int();
	
	//Counter
	u8 counter=0;
  96:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_clearDis();
	LCD_sendNum(counter);
	while (1)
	{
		//Increment button
		increment_state = DIO_readPinValue(DIO_PIND0);
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_readPinValue>
		if (increment_state==DIO_HIGH && counter<9)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	71 f4       	brne	.+28     	; 0xbe <source_code+0x48>
  a2:	c9 30       	cpi	r28, 0x09	; 9
  a4:	60 f4       	brcc	.+24     	; 0xbe <source_code+0x48>
		{
			counter++;
  a6:	cf 5f       	subi	r28, 0xFF	; 255
			LCD_clearDis();
  a8:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_clearDis>
			while (DIO_readPinValue(DIO_PIND0)==DIO_HIGH);
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_readPinValue>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	d9 f3       	breq	.-10     	; 0xac <source_code+0x36>
			LCD_sendNum(counter);
  b6:	8c 2f       	mov	r24, r28
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_sendNum>
		}
		
		//Decrement button
		decrement_state = DIO_readPinValue(DIO_PIND6);
  be:	8e e1       	ldi	r24, 0x1E	; 30
  c0:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_readPinValue>
		if (decrement_state==DIO_HIGH  && counter>0)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	41 f7       	brne	.-48     	; 0x98 <source_code+0x22>
  c8:	cc 23       	and	r28, r28
  ca:	31 f3       	breq	.-52     	; 0x98 <source_code+0x22>
		{
			counter--;
  cc:	c1 50       	subi	r28, 0x01	; 1
			LCD_clearDis();
  ce:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_clearDis>
			while (DIO_readPinValue(DIO_PIND6)==DIO_HIGH);
  d2:	8e e1       	ldi	r24, 0x1E	; 30
  d4:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_readPinValue>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	d9 f3       	breq	.-10     	; 0xd2 <source_code+0x5c>
			LCD_sendNum(counter);
  dc:	8c 2f       	mov	r24, r28
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_sendNum>
  e4:	d9 cf       	rjmp	.-78     	; 0x98 <source_code+0x22>

000000e6 <LCD_Instruction>:
	{
		LCD_sendData(str[i]);
		i++;
	}
	
}
  e6:	84 34       	cpi	r24, 0x44	; 68
  e8:	49 f4       	brne	.+18     	; 0xfc <LCD_Instruction+0x16>
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	89 e0       	ldi	r24, 0x09	; 9
  f6:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
  fa:	08 95       	ret
  fc:	83 34       	cpi	r24, 0x43	; 67
  fe:	41 f4       	brne	.+16     	; 0x110 <LCD_Instruction+0x2a>
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	89 e0       	ldi	r24, 0x09	; 9
 10c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 110:	08 95       	ret

00000112 <LCD_pulse>:
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	8b e0       	ldi	r24, 0x0B	; 11
 116:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 11a:	8f e9       	ldi	r24, 0x9F	; 159
 11c:	9f e0       	ldi	r25, 0x0F	; 15
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_pulse+0xc>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_pulse+0x12>
 124:	00 00       	nop
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 12e:	08 95       	ret

00000130 <LCD_sendData>:
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
 134:	84 e4       	ldi	r24, 0x44	; 68
 136:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Instruction>
 13a:	c4 fb       	bst	r28, 4
 13c:	66 27       	eor	r22, r22
 13e:	60 f9       	bld	r22, 0
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 146:	c5 fb       	bst	r28, 5
 148:	66 27       	eor	r22, r22
 14a:	60 f9       	bld	r22, 0
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 152:	c6 fb       	bst	r28, 6
 154:	66 27       	eor	r22, r22
 156:	60 f9       	bld	r22, 0
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 16c:	0e 94 89 00 	call	0x112	; 0x112 <LCD_pulse>
 170:	6c 2f       	mov	r22, r28
 172:	61 70       	andi	r22, 0x01	; 1
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 17a:	c1 fb       	bst	r28, 1
 17c:	66 27       	eor	r22, r22
 17e:	60 f9       	bld	r22, 0
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 186:	c2 fb       	bst	r28, 2
 188:	66 27       	eor	r22, r22
 18a:	60 f9       	bld	r22, 0
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 192:	c3 fb       	bst	r28, 3
 194:	66 27       	eor	r22, r22
 196:	60 f9       	bld	r22, 0
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 19e:	0e 94 89 00 	call	0x112	; 0x112 <LCD_pulse>
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <LCD_sendCmd>:
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
 1aa:	83 e4       	ldi	r24, 0x43	; 67
 1ac:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Instruction>
 1b0:	c4 fb       	bst	r28, 4
 1b2:	66 27       	eor	r22, r22
 1b4:	60 f9       	bld	r22, 0
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 1bc:	c5 fb       	bst	r28, 5
 1be:	66 27       	eor	r22, r22
 1c0:	60 f9       	bld	r22, 0
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 1c8:	c6 fb       	bst	r28, 6
 1ca:	66 27       	eor	r22, r22
 1cc:	60 f9       	bld	r22, 0
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 1d4:	6c 2f       	mov	r22, r28
 1d6:	66 1f       	adc	r22, r22
 1d8:	66 27       	eor	r22, r22
 1da:	66 1f       	adc	r22, r22
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <LCD_pulse>
 1e6:	6c 2f       	mov	r22, r28
 1e8:	61 70       	andi	r22, 0x01	; 1
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 1f0:	c1 fb       	bst	r28, 1
 1f2:	66 27       	eor	r22, r22
 1f4:	60 f9       	bld	r22, 0
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 1fc:	c2 fb       	bst	r28, 2
 1fe:	66 27       	eor	r22, r22
 200:	60 f9       	bld	r22, 0
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 208:	c3 fb       	bst	r28, 3
 20a:	66 27       	eor	r22, r22
 20c:	60 f9       	bld	r22, 0
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_setPinValue>
 214:	0e 94 89 00 	call	0x112	; 0x112 <LCD_pulse>
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <LCD_int>:
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	87 e0       	ldi	r24, 0x07	; 7
 238:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	8b e0       	ldi	r24, 0x0B	; 11
 240:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	8a e0       	ldi	r24, 0x0A	; 10
 248:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	89 e0       	ldi	r24, 0x09	; 9
 250:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_setPinDir>
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_sendCmd>
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	86 e7       	ldi	r24, 0x76	; 118
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <LCD_int+0x44>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_int+0x4e>
 26a:	00 00       	nop
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_sendCmd>
 272:	8f e9       	ldi	r24, 0x9F	; 159
 274:	9f e0       	ldi	r25, 0x0F	; 15
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_int+0x5a>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_int+0x60>
 27c:	00 00       	nop
 27e:	8f e0       	ldi	r24, 0x0F	; 15
 280:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_sendCmd>
 284:	8f e9       	ldi	r24, 0x9F	; 159
 286:	9f e0       	ldi	r25, 0x0F	; 15
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_int+0x6c>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_int+0x72>
 28e:	00 00       	nop
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_sendCmd>
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	9f e1       	ldi	r25, 0x1F	; 31
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_int+0x7e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_int+0x84>
 2a0:	00 00       	nop
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_sendCmd>
 2a8:	08 95       	ret

000002aa <LCD_clearDis>:
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_sendCmd>
 2b0:	08 95       	ret

000002b2 <LCD_sendNum>:


void LCD_sendNum(s32 num){
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	2a 97       	sbiw	r28, 0x0a	; 10
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
	u8 arr_numbers[10] ;
	s8 i=0;
	//u32 remainder=0;
	
	if(num==0){
 2c8:	00 97       	sbiw	r24, 0x00	; 0
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <LCD_sendNum+0x22>
		LCD_sendData('0');
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	0e 94 98 00 	call	0x130	; 0x130 <LCD_sendData>
 2d2:	2d c0       	rjmp	.+90     	; 0x32e <LCD_sendNum+0x7c>
		return;
	}
	else if (num<0)
 2d4:	99 23       	and	r25, r25
 2d6:	bc f4       	brge	.+46     	; 0x306 <LCD_sendNum+0x54>
	{
		LCD_sendData('-');
 2d8:	8d e2       	ldi	r24, 0x2D	; 45
 2da:	0e 94 98 00 	call	0x130	; 0x130 <LCD_sendData>
}


void LCD_sendNum(s32 num){
	u8 arr_numbers[10] ;
	s8 i=0;
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	16 c0       	rjmp	.+44     	; 0x30e <LCD_sendNum+0x5c>
	}
	else 
	
	while (num>0)
	{
		arr_numbers[i]=(num%10)+48;
 2e2:	6a e0       	ldi	r22, 0x0A	; 10
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	0e 94 ed 02 	call	0x5da	; 0x5da <__divmodhi4>
 2ea:	e1 e0       	ldi	r30, 0x01	; 1
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ec 0f       	add	r30, r28
 2f0:	fd 1f       	adc	r31, r29
 2f2:	e1 0f       	add	r30, r17
 2f4:	f1 1d       	adc	r31, r1
 2f6:	17 fd       	sbrc	r17, 7
 2f8:	fa 95       	dec	r31
 2fa:	80 5d       	subi	r24, 0xD0	; 208
 2fc:	80 83       	st	Z, r24
		
		num=num/10;
 2fe:	86 2f       	mov	r24, r22
 300:	97 2f       	mov	r25, r23
		i++;
 302:	1f 5f       	subi	r17, 0xFF	; 255
 304:	01 c0       	rjmp	.+2      	; 0x308 <LCD_sendNum+0x56>
 306:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_sendData('-');
	}
	else 
	
	while (num>0)
 308:	18 16       	cp	r1, r24
 30a:	19 06       	cpc	r1, r25
 30c:	54 f3       	brlt	.-44     	; 0x2e2 <LCD_sendNum+0x30>
		arr_numbers[i]=(num%10)+48;
		
		num=num/10;
		i++;
	}
	i--;
 30e:	11 50       	subi	r17, 0x01	; 1
	while (i>=0)
 310:	0c c0       	rjmp	.+24     	; 0x32a <LCD_sendNum+0x78>
	{
		LCD_sendData(arr_numbers[i]);
 312:	e1 e0       	ldi	r30, 0x01	; 1
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ec 0f       	add	r30, r28
 318:	fd 1f       	adc	r31, r29
 31a:	e1 0f       	add	r30, r17
 31c:	f1 1d       	adc	r31, r1
 31e:	17 fd       	sbrc	r17, 7
 320:	fa 95       	dec	r31
 322:	80 81       	ld	r24, Z
 324:	0e 94 98 00 	call	0x130	; 0x130 <LCD_sendData>
		i--;
 328:	11 50       	subi	r17, 0x01	; 1
		
		num=num/10;
		i++;
	}
	i--;
	while (i>=0)
 32a:	11 23       	and	r17, r17
 32c:	94 f7       	brge	.-28     	; 0x312 <LCD_sendNum+0x60>
	{
		LCD_sendData(arr_numbers[i]);
		i--;
	}
}
 32e:	2a 96       	adiw	r28, 0x0a	; 10
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	08 95       	ret

00000342 <DIO_setPinDir>:

#include "DIO_INT.h"

void DIO_setPinDir(u8 pinNum, u8 dir){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 342:	88 30       	cpi	r24, 0x08	; 8
 344:	00 f5       	brcc	.+64     	; 0x386 <DIO_setPinDir+0x44>
	{
		if (dir==DIO_INPUT){
 346:	61 11       	cpse	r22, r1
 348:	0e c0       	rjmp	.+28     	; 0x366 <DIO_setPinDir+0x24>
			CLEAR_BIT(DDRA,pinNum);
 34a:	4a b3       	in	r20, 0x1a	; 26
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	b9 01       	movw	r22, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_setPinDir+0x16>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	8a 95       	dec	r24
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_setPinDir+0x12>
 35c:	cb 01       	movw	r24, r22
 35e:	80 95       	com	r24
 360:	84 23       	and	r24, r20
 362:	8a bb       	out	0x1a, r24	; 26
 364:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 366:	61 30       	cpi	r22, 0x01	; 1
 368:	09 f0       	breq	.+2      	; 0x36c <DIO_setPinDir+0x2a>
 36a:	75 c0       	rjmp	.+234    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			SET_BIT(DDRA,pinNum);
 36c:	4a b3       	in	r20, 0x1a	; 26
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_setPinDir+0x38>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_setPinDir+0x34>
 37e:	cb 01       	movw	r24, r22
 380:	84 2b       	or	r24, r20
 382:	8a bb       	out	0x1a, r24	; 26
 384:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 386:	98 ef       	ldi	r25, 0xF8	; 248
 388:	98 0f       	add	r25, r24
 38a:	98 30       	cpi	r25, 0x08	; 8
 38c:	00 f5       	brcc	.+64     	; 0x3ce <DIO_setPinDir+0x8c>
	{
		pinNum=pinNum-8;
		if (dir==DIO_INPUT){
 38e:	61 11       	cpse	r22, r1
 390:	0e c0       	rjmp	.+28     	; 0x3ae <DIO_setPinDir+0x6c>
			CLEAR_BIT(DDRB,pinNum);
 392:	47 b3       	in	r20, 0x17	; 23
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	b9 01       	movw	r22, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_setPinDir+0x5e>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	9a 95       	dec	r25
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_setPinDir+0x5a>
 3a4:	cb 01       	movw	r24, r22
 3a6:	80 95       	com	r24
 3a8:	84 23       	and	r24, r20
 3aa:	87 bb       	out	0x17, r24	; 23
 3ac:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_setPinDir+0x72>
 3b2:	51 c0       	rjmp	.+162    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			SET_BIT(DDRB,pinNum);
 3b4:	47 b3       	in	r20, 0x17	; 23
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_setPinDir+0x80>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	9a 95       	dec	r25
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_setPinDir+0x7c>
 3c6:	cb 01       	movw	r24, r22
 3c8:	84 2b       	or	r24, r20
 3ca:	87 bb       	out	0x17, r24	; 23
 3cc:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 3ce:	90 ef       	ldi	r25, 0xF0	; 240
 3d0:	98 0f       	add	r25, r24
 3d2:	98 30       	cpi	r25, 0x08	; 8
 3d4:	f8 f4       	brcc	.+62     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		pinNum=pinNum-16;
		if (dir==DIO_INPUT){
 3d6:	61 11       	cpse	r22, r1
 3d8:	0e c0       	rjmp	.+28     	; 0x3f6 <DIO_setPinDir+0xb4>
			CLEAR_BIT(DDRC,pinNum);
 3da:	44 b3       	in	r20, 0x14	; 20
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	b9 01       	movw	r22, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_setPinDir+0xa6>
 3e4:	66 0f       	add	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	9a 95       	dec	r25
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_setPinDir+0xa2>
 3ec:	cb 01       	movw	r24, r22
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	84 bb       	out	0x14, r24	; 20
 3f4:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 3f6:	61 30       	cpi	r22, 0x01	; 1
 3f8:	71 f5       	brne	.+92     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			SET_BIT(DDRC,pinNum);
 3fa:	44 b3       	in	r20, 0x14	; 20
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	9a 95       	dec	r25
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	cb 01       	movw	r24, r22
 40e:	84 2b       	or	r24, r20
 410:	84 bb       	out	0x14, r24	; 20
 412:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 414:	88 51       	subi	r24, 0x18	; 24
 416:	88 30       	cpi	r24, 0x08	; 8
 418:	f0 f4       	brcc	.+60     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	{
		pinNum=pinNum-24;
		if (dir==DIO_INPUT){
 41a:	61 11       	cpse	r22, r1
 41c:	0e c0       	rjmp	.+28     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			CLEAR_BIT(DDRC,pinNum);
 41e:	44 b3       	in	r20, 0x14	; 20
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	b9 01       	movw	r22, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	8a 95       	dec	r24
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	cb 01       	movw	r24, r22
 432:	80 95       	com	r24
 434:	84 23       	and	r24, r20
 436:	84 bb       	out	0x14, r24	; 20
 438:	08 95       	ret
		}
		else if(dir==DIO_OUTPUT){
 43a:	61 30       	cpi	r22, 0x01	; 1
 43c:	61 f4       	brne	.+24     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			SET_BIT(DDRC,pinNum);
 43e:	44 b3       	in	r20, 0x14	; 20
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	b9 01       	movw	r22, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	8a 95       	dec	r24
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	cb 01       	movw	r24, r22
 452:	84 2b       	or	r24, r20
 454:	84 bb       	out	0x14, r24	; 20
 456:	08 95       	ret

00000458 <DIO_setPinValue>:
	}
}

void DIO_setPinValue(u8 pinNum, u8 level){
	//PORTA
	if (pinNum>=0 && pinNum<=7) 
 458:	88 30       	cpi	r24, 0x08	; 8
 45a:	00 f5       	brcc	.+64     	; 0x49c <DIO_setPinValue+0x44>
	{
		if (level==DIO_LOW){
 45c:	61 11       	cpse	r22, r1
 45e:	0e c0       	rjmp	.+28     	; 0x47c <DIO_setPinValue+0x24>
			CLEAR_BIT(PORTA,pinNum);
 460:	4b b3       	in	r20, 0x1b	; 27
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	b9 01       	movw	r22, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_setPinValue+0x16>
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	8a 95       	dec	r24
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_setPinValue+0x12>
 472:	cb 01       	movw	r24, r22
 474:	80 95       	com	r24
 476:	84 23       	and	r24, r20
 478:	8b bb       	out	0x1b, r24	; 27
 47a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 47c:	61 30       	cpi	r22, 0x01	; 1
 47e:	09 f0       	breq	.+2      	; 0x482 <DIO_setPinValue+0x2a>
 480:	75 c0       	rjmp	.+234    	; 0x56c <DIO_setPinValue+0x114>
			SET_BIT(PORTA,pinNum);
 482:	4b b3       	in	r20, 0x1b	; 27
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_setPinValue+0x38>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_setPinValue+0x34>
 494:	cb 01       	movw	r24, r22
 496:	84 2b       	or	r24, r20
 498:	8b bb       	out	0x1b, r24	; 27
 49a:	08 95       	ret
		}
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15) 
 49c:	98 ef       	ldi	r25, 0xF8	; 248
 49e:	98 0f       	add	r25, r24
 4a0:	98 30       	cpi	r25, 0x08	; 8
 4a2:	00 f5       	brcc	.+64     	; 0x4e4 <DIO_setPinValue+0x8c>
	{
		pinNum=pinNum-8;
		if (level==DIO_LOW){
 4a4:	61 11       	cpse	r22, r1
 4a6:	0e c0       	rjmp	.+28     	; 0x4c4 <DIO_setPinValue+0x6c>
			CLEAR_BIT(PORTB,pinNum);
 4a8:	48 b3       	in	r20, 0x18	; 24
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	b9 01       	movw	r22, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_setPinValue+0x5e>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	9a 95       	dec	r25
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_setPinValue+0x5a>
 4ba:	cb 01       	movw	r24, r22
 4bc:	80 95       	com	r24
 4be:	84 23       	and	r24, r20
 4c0:	88 bb       	out	0x18, r24	; 24
 4c2:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 4c4:	61 30       	cpi	r22, 0x01	; 1
 4c6:	09 f0       	breq	.+2      	; 0x4ca <DIO_setPinValue+0x72>
 4c8:	51 c0       	rjmp	.+162    	; 0x56c <DIO_setPinValue+0x114>
			SET_BIT(PORTB,pinNum);
 4ca:	48 b3       	in	r20, 0x18	; 24
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	b9 01       	movw	r22, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_setPinValue+0x80>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	9a 95       	dec	r25
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_setPinValue+0x7c>
 4dc:	cb 01       	movw	r24, r22
 4de:	84 2b       	or	r24, r20
 4e0:	88 bb       	out	0x18, r24	; 24
 4e2:	08 95       	ret
		}
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23) 
 4e4:	90 ef       	ldi	r25, 0xF0	; 240
 4e6:	98 0f       	add	r25, r24
 4e8:	98 30       	cpi	r25, 0x08	; 8
 4ea:	f8 f4       	brcc	.+62     	; 0x52a <DIO_setPinValue+0xd2>
	{
		pinNum=pinNum-16;
		if (level==DIO_LOW){
 4ec:	61 11       	cpse	r22, r1
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <DIO_setPinValue+0xb4>
			CLEAR_BIT(PORTC,pinNum);
 4f0:	45 b3       	in	r20, 0x15	; 21
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	b9 01       	movw	r22, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_setPinValue+0xa6>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	9a 95       	dec	r25
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_setPinValue+0xa2>
 502:	cb 01       	movw	r24, r22
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	85 bb       	out	0x15, r24	; 21
 50a:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 50c:	61 30       	cpi	r22, 0x01	; 1
 50e:	71 f5       	brne	.+92     	; 0x56c <DIO_setPinValue+0x114>
			SET_BIT(PORTC,pinNum);
 510:	45 b3       	in	r20, 0x15	; 21
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	b9 01       	movw	r22, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_setPinValue+0xc6>
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	9a 95       	dec	r25
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_setPinValue+0xc2>
 522:	cb 01       	movw	r24, r22
 524:	84 2b       	or	r24, r20
 526:	85 bb       	out	0x15, r24	; 21
 528:	08 95       	ret
		}
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31) 
 52a:	88 51       	subi	r24, 0x18	; 24
 52c:	88 30       	cpi	r24, 0x08	; 8
 52e:	f0 f4       	brcc	.+60     	; 0x56c <DIO_setPinValue+0x114>
	{
		pinNum=pinNum-24;
		if (level==DIO_LOW){
 530:	61 11       	cpse	r22, r1
 532:	0e c0       	rjmp	.+28     	; 0x550 <DIO_setPinValue+0xf8>
			CLEAR_BIT(PORTD,pinNum);
 534:	42 b3       	in	r20, 0x12	; 18
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	b9 01       	movw	r22, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_setPinValue+0xea>
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	8a 95       	dec	r24
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_setPinValue+0xe6>
 546:	cb 01       	movw	r24, r22
 548:	80 95       	com	r24
 54a:	84 23       	and	r24, r20
 54c:	82 bb       	out	0x12, r24	; 18
 54e:	08 95       	ret
		}
		else if(level==DIO_HIGH){
 550:	61 30       	cpi	r22, 0x01	; 1
 552:	61 f4       	brne	.+24     	; 0x56c <DIO_setPinValue+0x114>
			SET_BIT(PORTD,pinNum);
 554:	42 b3       	in	r20, 0x12	; 18
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	b9 01       	movw	r22, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_setPinValue+0x10a>
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	8a 95       	dec	r24
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_setPinValue+0x106>
 566:	cb 01       	movw	r24, r22
 568:	84 2b       	or	r24, r20
 56a:	82 bb       	out	0x12, r24	; 18
 56c:	08 95       	ret

0000056e <DIO_readPinValue>:
	}
}

u8 DIO_readPinValue(u8 pinNum){
	//PORTA
	if (pinNum>=0 && pinNum<=7)
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	58 f4       	brcc	.+22     	; 0x588 <DIO_readPinValue+0x1a>
	{
		return GET_BIT(PINA,pinNum);
 572:	29 b3       	in	r18, 0x19	; 25
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	a9 01       	movw	r20, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_readPinValue+0x10>
 57a:	55 95       	asr	r21
 57c:	47 95       	ror	r20
 57e:	8a 95       	dec	r24
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_readPinValue+0xc>
 582:	ca 01       	movw	r24, r20
 584:	81 70       	andi	r24, 0x01	; 1
 586:	08 95       	ret
	}
	else //PORTB
	if (pinNum>=8 && pinNum<=15)
 588:	28 ef       	ldi	r18, 0xF8	; 248
 58a:	28 0f       	add	r18, r24
 58c:	28 30       	cpi	r18, 0x08	; 8
 58e:	48 f4       	brcc	.+18     	; 0x5a2 <DIO_readPinValue+0x34>
	{
		pinNum=pinNum-8;
		return GET_BIT(PINB,pinNum);
 590:	86 b3       	in	r24, 0x16	; 22
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_readPinValue+0x2c>
 596:	95 95       	asr	r25
 598:	87 95       	ror	r24
 59a:	2a 95       	dec	r18
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_readPinValue+0x28>
 59e:	81 70       	andi	r24, 0x01	; 1
 5a0:	08 95       	ret
	}
	else //PORTC
	if (pinNum>=16 && pinNum<=23)
 5a2:	20 ef       	ldi	r18, 0xF0	; 240
 5a4:	28 0f       	add	r18, r24
 5a6:	28 30       	cpi	r18, 0x08	; 8
 5a8:	48 f4       	brcc	.+18     	; 0x5bc <DIO_readPinValue+0x4e>
	{
		pinNum=pinNum-16;
		return GET_BIT(PINC,pinNum);
 5aa:	83 b3       	in	r24, 0x13	; 19
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_readPinValue+0x46>
 5b0:	95 95       	asr	r25
 5b2:	87 95       	ror	r24
 5b4:	2a 95       	dec	r18
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_readPinValue+0x42>
 5b8:	81 70       	andi	r24, 0x01	; 1
 5ba:	08 95       	ret
	}
	else //PORTD
	if (pinNum>=24 && pinNum<=31)
 5bc:	28 ee       	ldi	r18, 0xE8	; 232
 5be:	28 0f       	add	r18, r24
 5c0:	28 30       	cpi	r18, 0x08	; 8
 5c2:	50 f4       	brcc	.+20     	; 0x5d8 <DIO_readPinValue+0x6a>
	{
		pinNum=pinNum-24;
		return GET_BIT(PIND,pinNum);
 5c4:	90 b3       	in	r25, 0x10	; 16
 5c6:	89 2f       	mov	r24, r25
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_readPinValue+0x62>
 5cc:	95 95       	asr	r25
 5ce:	87 95       	ror	r24
 5d0:	2a 95       	dec	r18
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_readPinValue+0x5e>
 5d4:	81 70       	andi	r24, 0x01	; 1
 5d6:	08 95       	ret
	}
}
 5d8:	08 95       	ret

000005da <__divmodhi4>:
 5da:	97 fb       	bst	r25, 7
 5dc:	07 2e       	mov	r0, r23
 5de:	16 f4       	brtc	.+4      	; 0x5e4 <__divmodhi4+0xa>
 5e0:	00 94       	com	r0
 5e2:	07 d0       	rcall	.+14     	; 0x5f2 <__divmodhi4_neg1>
 5e4:	77 fd       	sbrc	r23, 7
 5e6:	09 d0       	rcall	.+18     	; 0x5fa <__divmodhi4_neg2>
 5e8:	0e 94 01 03 	call	0x602	; 0x602 <__udivmodhi4>
 5ec:	07 fc       	sbrc	r0, 7
 5ee:	05 d0       	rcall	.+10     	; 0x5fa <__divmodhi4_neg2>
 5f0:	3e f4       	brtc	.+14     	; 0x600 <__divmodhi4_exit>

000005f2 <__divmodhi4_neg1>:
 5f2:	90 95       	com	r25
 5f4:	81 95       	neg	r24
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255
 5f8:	08 95       	ret

000005fa <__divmodhi4_neg2>:
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000600 <__divmodhi4_exit>:
 600:	08 95       	ret

00000602 <__udivmodhi4>:
 602:	aa 1b       	sub	r26, r26
 604:	bb 1b       	sub	r27, r27
 606:	51 e1       	ldi	r21, 0x11	; 17
 608:	07 c0       	rjmp	.+14     	; 0x618 <__udivmodhi4_ep>

0000060a <__udivmodhi4_loop>:
 60a:	aa 1f       	adc	r26, r26
 60c:	bb 1f       	adc	r27, r27
 60e:	a6 17       	cp	r26, r22
 610:	b7 07       	cpc	r27, r23
 612:	10 f0       	brcs	.+4      	; 0x618 <__udivmodhi4_ep>
 614:	a6 1b       	sub	r26, r22
 616:	b7 0b       	sbc	r27, r23

00000618 <__udivmodhi4_ep>:
 618:	88 1f       	adc	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	5a 95       	dec	r21
 61e:	a9 f7       	brne	.-22     	; 0x60a <__udivmodhi4_loop>
 620:	80 95       	com	r24
 622:	90 95       	com	r25
 624:	bc 01       	movw	r22, r24
 626:	cd 01       	movw	r24, r26
 628:	08 95       	ret

0000062a <_exit>:
 62a:	f8 94       	cli

0000062c <__stop_program>:
 62c:	ff cf       	rjmp	.-2      	; 0x62c <__stop_program>
